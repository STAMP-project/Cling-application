/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:05:09 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noResolvedType0;
      jSTypeArray0[1] = (JSType) booleanType0;
      jSTypeArray0[2] = (JSType) booleanType0;
      jSTypeArray0[3] = (JSType) booleanType0;
      jSTypeArray0[4] = (JSType) noResolvedType0;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
      JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = (JSType) booleanType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, false, jSTypeArray0);
      noResolvedType0.setImplicitPrototype(functionType0);
      simpleErrorReporter0.warning("B", "^N7a>Ie\"2+)kg!e`}VC", 1, 1);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      parameterizedType0.resolve(simpleErrorReporter0, noResolvedType0);
      JSType jSType1 = parameterizedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      instanceObjectType0.differsFrom(noResolvedType1);
      JSType.getGreatestSubtype(jSType1, (JSType) noResolvedType0);
      instanceObjectType0.detectImplicitPrototypeCycle();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kEa");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      errorFunctionType0.getTypesUnderInequality(objectType0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeParameterizedType((JSType) null);
      jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Unknown class name");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasDisplayName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(noResolvedType0);
      jSType_TypePair0.typeB.isArrayType();
      parameterizedType0.matchesObjectContext();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      jSTypeRegistry0.createDefaultObjectUnion(noType0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      noResolvedType0.forceResolve(simpleErrorReporter0, noType0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) noResolvedType1, (JSType) noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      parameterizedType0.isRegexpType();
      parameterizedType0.isGlobalThisType();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasDisplayName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.isGlobalThisType();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderInequality(noType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.toDebugHashCodeString();
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      functionType0.getMinArguments();
      errorFunctionType0.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      nullType0.setValidator(predicate0);
      noResolvedType0.getTypesUnderEquality(nullType0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry1, "n0]F28m?");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      templateType1.isImplicitPrototype(templateType0);
      templateType0.hasDisplayName();
      templateType1.matchesInt32Context();
      templateType0.toMaybeTemplateType();
      jSTypeRegistry0.canPropertyBeDefined(templateType0, "Not declared as a constructor");
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createUnionType((JSTypeNative[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) nullType0, (JSType) nullType0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      noResolvedType0.isConstructor();
      JSType.getGreatestSubtype(jSType0, (JSType) noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      noResolvedType0.isConstructor();
      JSType.getGreatestSubtype(jSType0, jSType0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".>DRSf1J<Gg;f%2{");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      errorFunctionType0.getTypesUnderInequality(objectType0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.testForEquality(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(nullType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(nullType0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.clearTemplateTypeNames();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(jSType0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      // Undeclared exception!
      try { 
        indexedType0.toMaybeUnionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      assertNotNull(templateType1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isStringValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = templateType1.isImplicitPrototype(templateType0);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isStringValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = templateType0.hasDisplayName();
      assertFalse(boolean1 == boolean0);
      assertSame(templateType0, templateType1);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = templateType1.matchesInt32Context();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertTrue(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isStringValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType2 = templateType1.toMaybeTemplateType();
      assertNotNull(templateType2);
      assertSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType2);
      assertSame(templateType1, templateType0);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isStringValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isNominalConstructor());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isParameterizedType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertTrue(templateType2.hasAnyTemplateInternal());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isRecordType());
      assertEquals("", templateType2.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean3 = jSTypeRegistry0.canPropertyBeDefined(templateType2, "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType2);
      assertSame(templateType1, templateType0);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
      assertFalse(boolean3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isStringValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isNominalConstructor());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isParameterizedType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertTrue(templateType2.hasAnyTemplateInternal());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isRecordType());
      assertEquals("", templateType2.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType((JSTypeNative[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      String string0 = parameterizedType0.toAnnotationString();
      assertNotNull(string0);
      assertEquals("?.<?>", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNominalType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noResolvedType0.detectImplicitPrototypeCycle();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve(simpleErrorReporter0, noResolvedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isStringValueType());
      assertTrue(parameterizedType1.isResolved());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isTemplateType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType2 = (ParameterizedType)parameterizedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertNotNull(parameterizedType2);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType0, parameterizedType2);
      assertSame(parameterizedType2, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType2.isTemplateType());
      assertTrue(parameterizedType2.isObject());
      assertFalse(parameterizedType2.isFunctionType());
      assertTrue(parameterizedType2.isResolved());
      assertFalse(parameterizedType2.hasCachedValues());
      assertFalse(parameterizedType2.isUnionType());
      assertTrue(parameterizedType2.isParameterizedType());
      assertFalse(parameterizedType2.isBooleanValueType());
      assertFalse(parameterizedType2.isRecordType());
      assertFalse(parameterizedType2.isFunctionPrototypeType());
      assertFalse(parameterizedType2.isNumberValueType());
      assertFalse(parameterizedType2.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType2.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType2.isVoidType());
      assertFalse(parameterizedType2.isEnumType());
      assertFalse(parameterizedType2.isEnumElementType());
      assertFalse(parameterizedType2.isNullType());
      assertFalse(parameterizedType2.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = noResolvedType0.hasImplementedInterfaces();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      String string0 = nullType0.getDisplayName();
      assertNotNull(string0);
      assertEquals("null", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.getOwnerFunction();
      assertNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = parameterizedType1.isParameterizedType();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType0, parameterizedType2);
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType1, parameterizedType2);
      assertTrue(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isStringValueType());
      assertTrue(parameterizedType1.isResolved());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isTemplateType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = noResolvedType0.getImplicitPrototype();
      assertNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        noResolvedType0.canTestForShallowEqualityWith((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve(simpleErrorReporter0, parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertTrue(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isEnumElementType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isStringValueType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType2 = (ParameterizedType)parameterizedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertNotNull(parameterizedType2);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType0, parameterizedType2);
      assertSame(parameterizedType2, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType2.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType2.hasCachedValues());
      assertFalse(parameterizedType2.isNominalConstructor());
      assertFalse(parameterizedType2.isEnumElementType());
      assertFalse(parameterizedType2.isVoidType());
      assertFalse(parameterizedType2.isFunctionType());
      assertFalse(parameterizedType2.isNumberValueType());
      assertFalse(parameterizedType2.isFunctionPrototypeType());
      assertFalse(parameterizedType2.isEnumType());
      assertFalse(parameterizedType2.isRecordType());
      assertFalse(parameterizedType2.isUnionType());
      assertTrue(parameterizedType2.isParameterizedType());
      assertFalse(parameterizedType2.isTemplateType());
      assertFalse(parameterizedType2.isBooleanValueType());
      assertFalse(parameterizedType2.isStringValueType());
      assertTrue(parameterizedType2.isResolved());
      assertTrue(parameterizedType2.isObject());
      assertFalse(parameterizedType2.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isNamedType();
      assertTrue(boolean1 == boolean0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType0, parameterizedType2);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        parameterizedType0.getTypesUnderShallowEquality((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve(simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertNotNull(parameterizedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType2 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType2.isNoType());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isEnumType());
      assertFalse(noResolvedType2.isNullType());
      assertFalse(noResolvedType2.isAllType());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertFalse(noResolvedType2.isEnumElementType());
      assertFalse(noResolvedType2.isVoidType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.isObject());
      assertFalse(noResolvedType2.isUnionType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertTrue(noResolvedType2.isNullable());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertTrue(noResolvedType2.hasInstanceType());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.hasCachedValues());
      assertFalse(noResolvedType2.isRecordType());
      assertTrue(noResolvedType2.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType2.getReferenceName());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isFunctionType());
      assertFalse(noResolvedType2.isStringValueType());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isTemplateType());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertFalse(noResolvedType2.isParameterizedType());
      assertFalse(noResolvedType2.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(noResolvedType2);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertNotSame(noResolvedType2, noResolvedType1);
      assertNotSame(noResolvedType2, noResolvedType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType2.isNoType());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isEnumType());
      assertFalse(noResolvedType2.isNullType());
      assertFalse(noResolvedType2.isAllType());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertFalse(noResolvedType2.isEnumElementType());
      assertFalse(noResolvedType2.isVoidType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.isObject());
      assertFalse(noResolvedType2.isUnionType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertTrue(noResolvedType2.isNullable());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertTrue(noResolvedType2.hasInstanceType());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.isRecordType());
      assertTrue(noResolvedType2.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType2.getReferenceName());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isFunctionType());
      assertFalse(noResolvedType2.isStringValueType());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isTemplateType());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertFalse(noResolvedType2.isParameterizedType());
      assertTrue(noResolvedType2.hasCachedValues());
      assertFalse(noResolvedType2.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "kp,{SLf^I~x~m:zNm";
      JSType[] jSTypeArray0 = new JSType[2];
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(instanceObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, instanceObjectType0, instanceObjectType0);
      assertNotNull(indexedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType0 = indexedType0.toMaybeEnumType();
      assertNull(enumType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertNull(jSType0);
      
      // Undeclared exception!
      try { 
        JSType.getGreatestSubtype((JSType) null, (JSType) instanceObjectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(instanceObjectType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = parameterizedType0.toMaybeParameterizedType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isRecordType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry1.createOptionalType(parameterizedType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isRecordType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType1 = JSType.getLeastSupertype((JSType) parameterizedType0, jSType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(jSType1.equals((Object)jSType0));
      assertNotNull(jSType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isRecordType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isAllType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype(jSType1, (JSType) parameterizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(jSType0.equals((Object)jSType1));
      assertTrue(jSType1.equals((Object)jSType0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isRecordType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isAllType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isSubtypeHelper(parameterizedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(parameterizedType0, parameterizedType1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Iterable<ObjectType> iterable0 = instanceObjectType0.getCtorExtendedInterfaces();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(iterable0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(numberType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isParameterizedType());
      assertTrue(numberType0.matchesStringContext());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      EnumType enumType0 = jSTypeRegistry1.createEnumType((String) null, (Node) null, instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(enumType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(enumElementType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertNull(enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)modificationVisitor0.caseEnumElementType(enumElementType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(enumElementType0, enumElementType1);
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isVoidType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertNull(enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isResolved());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertNull(enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      numberType0.testForEquality(enumElementType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertSame(enumElementType1, enumElementType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(enumElementType0, enumElementType1);
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isVoidType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertTrue(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertNull(enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isResolved());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isParameterizedType());
      assertTrue(numberType0.matchesStringContext());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertNull(enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.DATE_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanLiteralSet booleanLiteralSet0 = allType0.getPossibleToBooleanOutcomes();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoType noType0 = new NoType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType0.matchesUint32Context();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      node0.setJSType(booleanType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node1 = new Node((-1658), node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1658), node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean1 = noType0.defineInferredProperty("Named type with empty name component", jSType0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertTrue(boolean1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isUnionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Visitor<FunctionType> visitor0 = (Visitor<FunctionType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseNoType();
      FunctionType functionType0 = noResolvedType0.visit(visitor0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(functionType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType1 = (NoType)noResolvedType1.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(noType1.equals((Object)noType0));
      assertNotNull(noType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertNotSame(noType1, noType0);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.canBeCalled());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isReturnTypeInferred());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isInterface());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isAllType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isTemplateType());
      assertTrue(noType1.canBeCalled());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isNoObjectType());
      assertTrue(noType1.hasCachedValues());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isVoidType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isEnumElementType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isEnumType());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isOrdinaryFunction());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node2 = Node.newNumber((-1567.4929101269));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertNotSame(node2, node0);
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourceOffset());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isTemplateType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType2 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noResolvedType1);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType2);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertNotSame(noResolvedType1, noResolvedType2);
      assertNotSame(noResolvedType2, noResolvedType1);
      assertNotSame(noResolvedType2, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType2.isUnionType());
      assertFalse(noResolvedType2.isStringValueType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.isObject());
      assertTrue(noResolvedType2.matchesStringContext());
      assertFalse(noResolvedType2.isNoObjectType());
      assertFalse(noResolvedType2.isParameterizedType());
      assertTrue(noResolvedType2.isNullable());
      assertTrue(noResolvedType2.hasInstanceType());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertFalse(noResolvedType2.isRecordType());
      assertFalse(noResolvedType2.hasCachedValues());
      assertFalse(noResolvedType2.isEnumType());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertFalse(noResolvedType2.isResolved());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isVoidType());
      assertFalse(noResolvedType2.isTemplateType());
      assertFalse(noResolvedType2.isFunctionType());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertFalse(noResolvedType2.isEnumElementType());
      assertFalse(noResolvedType2.isNoType());
      assertTrue(noResolvedType2.canBeCalled());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertFalse(noResolvedType2.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType2.isAllType());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertTrue(noResolvedType2.isConstructor());
      assertNull(noResolvedType2.getReferenceName());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.toMaybeFunctionType();
      assertNotNull(functionType0);
      assertSame(errorFunctionType0, functionType0);
      assertSame(functionType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType_TypePair0.typeA.canTestForEqualityWith(functionType0);
      assertSame(errorFunctionType0, functionType0);
      assertSame(functionType0, errorFunctionType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSType_TypePair0.typeB.findPropertyType("Not declared as a type name");
      assertNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.hasReferenceName());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(enumElementType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(errorFunctionType0, functionType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.hasReferenceName());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType1.isAllType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isStringValueType());
      assertEquals("Not declared as a constructor", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.hasCachedValues());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noType0.matchesUint32Context();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = noType0.isStringObjectType();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = nullType0.collapseUnion();
      assertNotNull(jSType0);
      assertSame(nullType0, jSType0);
      assertSame(jSType0, nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertEquals("null", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertTrue(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertSame(nullType0, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.isGlobalThisType();
      assertSame(nullType0, jSType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = noResolvedType0.autoboxesTo();
      assertNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isAllType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType2 = (NoResolvedType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType2);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertSame(parameterizedType0, parameterizedType1);
      assertNotSame(noResolvedType2, noResolvedType1);
      assertNotSame(noResolvedType2, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(noResolvedType2.isTemplateType());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isNullType());
      assertFalse(noResolvedType2.isResolved());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertTrue(noResolvedType2.hasInstanceType());
      assertFalse(noResolvedType2.isEnumType());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertFalse(noResolvedType2.isRecordType());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertFalse(noResolvedType2.isVoidType());
      assertFalse(noResolvedType2.isUnionType());
      assertFalse(noResolvedType2.isParameterizedType());
      assertTrue(noResolvedType2.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType2.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isNumberValueType());
      assertTrue(noResolvedType2.isNullable());
      assertFalse(noResolvedType2.isNoObjectType());
      assertFalse(noResolvedType2.hasCachedValues());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertFalse(noResolvedType2.isEnumElementType());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertNull(noResolvedType2.getReferenceName());
      assertTrue(noResolvedType2.canBeCalled());
      assertFalse(noResolvedType2.isAllType());
      assertFalse(noResolvedType2.isFunctionType());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = allType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(jSType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, jSType_TypePair0.typeB);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNominalType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isUnknownType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isEnumType();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = booleanType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
      assertNotNull(jSType0);
      assertSame(booleanType0, jSType0);
      assertSame(jSType0, booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullable());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType1 = jSType0.getLeastSupertype(noResolvedType0);
      assertNotNull(jSType1);
      assertSame(booleanType0, jSType1);
      assertSame(booleanType0, jSType0);
      assertSame(jSType0, booleanType0);
      assertSame(jSType0, jSType1);
      assertSame(jSType1, jSType0);
      assertSame(jSType1, booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullable());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isInterface());
      assertEquals("boolean", jSType1.getDisplayName());
      assertFalse(jSType1.isOrdinaryFunction());
      assertTrue(jSType1.matchesNumberContext());
      assertTrue(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullable());
      assertTrue(jSType1.matchesObjectContext());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, jSType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertSame(booleanType0, jSType1);
      assertSame(booleanType0, jSType0);
      assertSame(jSType0, booleanType0);
      assertSame(jSType0, jSType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullable());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isRecordType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertNotNull(stringType0);
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(stringType0, stringType0);
      assertTrue(boolean0);
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = stringType0.canBeCalled();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumType enumType0 = stringType0.toMaybeEnumType();
      assertNull(enumType0);
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertTrue(stringType0.isStringValueType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      NoResolvedType noResolvedType0 = null;
      try {
        noResolvedType0 = new NoResolvedType((JSTypeRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NoObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(parameterizedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isConstructor();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = voidType0.isDateType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = voidType0.matchesStringContext();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) parameterizedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isRecordType());
      assertTrue(noResolvedType1.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kEa");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) objectType0);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      JSTypeNative jSTypeNative2 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative0;
      simpleErrorReporter0.warning("", "", (-1025), 92);
      jSTypeNativeArray0[1] = jSTypeNative2;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(4, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(jSType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(4, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType0.hasDisplayName();
      assertFalse(boolean0);
      assertEquals(4, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(noType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry1, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = unknownType0.isNominalConstructor();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isCheckedUnknownType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = unknownType0.matchesNumberContext();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertTrue(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      assertNotNull(jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = jSType0.isObject();
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(jSType0);
      assertNotNull(jSType_TypePair0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.canBeCalled());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getTypeOfThis();
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType1.getTypesUnderInequality(noResolvedType0);
      assertNotNull(jSType_TypePair0);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, (JSType) nullType0, jSType_TypePair0.typeB, (JSType) nullType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(immutableList0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(4, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(4, immutableList0.size());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair1 = unionType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
      assertNotNull(jSType_TypePair1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(4, immutableList0.size());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "TwM>@Ug");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) instanceObjectType0, (JSType) errorFunctionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noObjectType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry1, "Not declared as a constructor", "Not declared as a type name", 1, 1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)namedType0.resolveInternal(simpleErrorReporter0, instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isResolved());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isObject());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isString();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = noResolvedType0.isConstructor();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnionType unionType0 = jSType0.toMaybeUnionType();
      assertNotNull(unionType0);
      assertSame(jSType0, unionType0);
      assertSame(unionType0, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry1, "&;", "&;", 2088, 2088);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertEquals("&;", namedType0.getReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = namedType0.isGlobalThisType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertEquals("&;", namedType0.getReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = errorFunctionType0.isOrdinaryFunction();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean2 = allType0.matchesStringContext();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertTrue(boolean2);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) namedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertEquals("&;", namedType0.getReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean3 = JSType.isSubtypeHelper(allType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean4 = allType0.isStringValueType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean4);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isStringObjectType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isGlobalThisType();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = booleanType0.dereference();
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(nullType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.toMaybeTemplateType((JSType) parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(noType0);
      assertEquals(0, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".>DRSf1J<Gg;f%2{");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) errorFunctionType0);
      assertNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) instanceObjectType0, (JSType) noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      String string0 = nullType0.toDebugHashCodeString();
      assertNotNull(string0);
      assertEquals("{269}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Y:bLEx1*N?yn]x|x");
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.equals("Y:bLEx1*N?yn]x|x");
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(proxyObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertTrue(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isResolved());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isEnumType());
      assertTrue(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertTrue(proxyObjectType0.hasReferenceName());
      assertTrue(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = proxyObjectType0.canAssignTo(jSType_TypePair0.typeA);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertTrue(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isResolved());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isEnumType());
      assertTrue(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertTrue(proxyObjectType0.hasReferenceName());
      assertTrue(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      JSTypeNative jSTypeNative1 = JSTypeNative.DATE_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative1;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      JSTypeNative jSTypeNative2 = JSTypeNative.ALL_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative2;
      jSTypeNativeArray0[5] = jSTypeNative0;
      jSTypeNativeArray0[6] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry1.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(7, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = jSType0.hasAnyTemplate();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean0);
      assertEquals(7, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(allType0.equals((Object)jSType0));
      assertNotNull(allType0);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = allType0.matchesUint32Context();
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(allType0.equals((Object)jSType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(allType0, jSType0);
      assertFalse(boolean1);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(allType0.equals((Object)jSType0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSType0.equals((Object)allType0));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(allType0, jSType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSType0, allType0);
      assertEquals(7, jSTypeNativeArray0.length);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.canBeCalled());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kEa");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) parameterizedType0);
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isFunctionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isResolved());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isAllType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      assertNotNull(objectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, errorFunctionType0);
      assertNotNull(arrowType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(objectType0);
      assertNotNull(jSType_TypePair0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = objectType0.isNumberValueType();
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(noObjectType0);
      assertNotNull(jSType_TypePair0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noObjectType0.isEmptyType();
      assertTrue(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = jSType_TypePair0.typeA.isGlobalThisType();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean2 = jSType_TypePair0.typeA.isConstructor();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType1 = new AllType(jSTypeRegistry0);
      assertFalse(allType1.equals((Object)allType0));
      assertNotNull(allType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType1.isEnumType());
      assertFalse(allType1.isNominalConstructor());
      assertFalse(allType1.isEnumElementType());
      assertFalse(allType1.isFunctionPrototypeType());
      assertTrue(allType1.hasDisplayName());
      assertFalse(allType1.isVoidType());
      assertFalse(allType1.isBooleanValueType());
      assertFalse(allType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertFalse(allType1.isUnionType());
      assertTrue(allType1.isAllType());
      assertFalse(allType1.isFunctionType());
      assertFalse(allType1.isNominalType());
      assertFalse(allType1.isCheckedUnknownType());
      assertFalse(allType1.isNoType());
      assertFalse(allType1.isNoObjectType());
      assertFalse(allType1.isNullType());
      assertFalse(allType1.isConstructor());
      assertFalse(allType1.isInterface());
      assertFalse(allType1.canBeCalled());
      assertTrue(allType1.matchesObjectContext());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertFalse(allType1.isRecordType());
      assertFalse(allType1.isTemplateType());
      assertFalse(allType1.isParameterizedType());
      assertFalse(allType1.isNoResolvedType());
      assertTrue(allType1.matchesStringContext());
      assertFalse(allType1.isOrdinaryFunction());
      assertFalse(allType1.isStringValueType());
      assertFalse(allType1.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSType_TypePair0.typeB.matchConstraint(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(nullType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSDocInfo jSDocInfo0 = noType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(nullType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(nullType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) booleanType0);
      assertNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, (ObjectType) null, booleanType0);
      assertNotNull(parameterizedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType1.isGlobalThisType();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMt`%ahj");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(1048576);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        functionType0.visit((Visitor<EnumElementType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isNumber();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isEnumType();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.DATE_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.BOOLEAN_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      jSTypeNativeArray0[5] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      jSTypeNativeArray0[7] = jSTypeNative6;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(8, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative7 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry1.getNativeType(jSTypeNative7);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative5));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative3));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative4));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative2));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative6));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative1));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative0));
      assertNotNull(errorFunctionType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeNative7, jSTypeNative5);
      assertNotSame(jSTypeNative7, jSTypeNative3);
      assertNotSame(jSTypeNative7, jSTypeNative4);
      assertNotSame(jSTypeNative7, jSTypeNative2);
      assertNotSame(jSTypeNative7, jSTypeNative6);
      assertNotSame(jSTypeNative7, jSTypeNative1);
      assertNotSame(jSTypeNative7, jSTypeNative0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnionType unionType0 = (UnionType)JSType.getGreatestSubtype(jSType0, jSTypeArray0[0]);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(jSType0, unionType0);
      assertSame(unionType0, jSType0);
      assertEquals(8, jSTypeNativeArray0.length);
      assertEquals(1, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowEquality(booleanType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(jSType0, unionType0);
      assertEquals(8, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isSubtypeHelper(jSType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative5));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative3));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative4));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative2));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative6));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative1));
      assertFalse(jSTypeNative7.equals((Object)jSTypeNative0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(jSType0, unionType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeNative7, jSTypeNative5);
      assertNotSame(jSTypeNative7, jSTypeNative3);
      assertNotSame(jSTypeNative7, jSTypeNative4);
      assertNotSame(jSTypeNative7, jSTypeNative2);
      assertNotSame(jSTypeNative7, jSTypeNative6);
      assertNotSame(jSTypeNative7, jSTypeNative1);
      assertNotSame(jSTypeNative7, jSTypeNative0);
      assertFalse(boolean0);
      assertEquals(8, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType1 = jSType0.findPropertyType("1KRBte@Fa@GVa");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(jSType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(jSType0, unionType0);
      assertEquals(8, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) noResolvedType0);
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotNull(voidType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isParameterizedType());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = voidType1.canAssignTo(voidType0);
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isParameterizedType());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = voidType1.isInstanceType();
      assertFalse(voidType1.equals((Object)voidType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(voidType1, voidType0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isParameterizedType());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[3] = (JSType) voidType1;
      jSTypeArray0[4] = (JSType) allType0;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry1, "{", "{", 2088, 2088);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = namedType0.isGlobalThisType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = namedType0.isConstructor();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry1.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(functionType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = booleanType0.canTestForShallowEqualityWith(functionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean2);
      assertEquals(1, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NamedType namedType1 = (NamedType)JSType.getLeastSupertype((JSType) namedType0, (JSType) namedType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(namedType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType1.isStringValueType());
      assertFalse(namedType1.isUnionType());
      assertFalse(namedType1.isNoResolvedType());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isNoType());
      assertFalse(namedType1.isParameterizedType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.isEnumElementType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.isCheckedUnknownType());
      assertFalse(namedType1.isNullType());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isFunctionType());
      assertEquals("{", namedType1.getReferenceName());
      assertTrue(namedType1.hasReferenceName());
      assertFalse(namedType1.hasCachedValues());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertFalse(namedType1.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(namedType0, namedType1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)JSType.getGreatestSubtype((JSType) namedType0, (JSType) booleanType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(namedType0, namedType1);
      assertSame(unknownType1, unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isConstructor());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isResolved());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isParameterizedType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.hasReferenceName());
      assertTrue(unknownType1.hasDisplayName());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isNominalConstructor());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isNullable());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean3 = JSType.isSubtypeHelper(errorFunctionType0, unknownType0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(namedType0, namedType1);
      assertSame(unknownType0, unknownType1);
      assertTrue(boolean3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "kEa");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) objectType0, (JSType) errorFunctionType0);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType0 = (NoType)noResolvedType0.getLeastSupertype(parameterizedType0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve(simpleErrorReporter0, parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isObject());
      assertTrue(parameterizedType1.isResolved());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType2 = (ParameterizedType)parameterizedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertNotNull(parameterizedType2);
      assertSame(parameterizedType0, parameterizedType2);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType2.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType2.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType2.isEnumType());
      assertFalse(parameterizedType2.isNominalConstructor());
      assertFalse(parameterizedType2.hasCachedValues());
      assertFalse(parameterizedType2.isRecordType());
      assertFalse(parameterizedType2.isFunctionPrototypeType());
      assertFalse(parameterizedType2.isStringValueType());
      assertTrue(parameterizedType2.isResolved());
      assertTrue(parameterizedType2.isObject());
      assertFalse(parameterizedType2.isNullType());
      assertFalse(parameterizedType2.isTemplateType());
      assertTrue(parameterizedType2.isParameterizedType());
      assertFalse(parameterizedType2.isNumberValueType());
      assertFalse(parameterizedType2.isBooleanValueType());
      assertFalse(parameterizedType2.isFunctionType());
      assertFalse(parameterizedType2.isUnionType());
      assertFalse(parameterizedType2.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(parameterizedType2);
      assertNotNull(jSType_TypePair0);
      assertSame(parameterizedType0, parameterizedType2);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType1);
      assertSame(parameterizedType2, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType2.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType2.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType2.isEnumType());
      assertFalse(parameterizedType2.isNominalConstructor());
      assertFalse(parameterizedType2.hasCachedValues());
      assertFalse(parameterizedType2.isRecordType());
      assertFalse(parameterizedType2.isFunctionPrototypeType());
      assertFalse(parameterizedType2.isStringValueType());
      assertTrue(parameterizedType2.isResolved());
      assertTrue(parameterizedType2.isObject());
      assertFalse(parameterizedType2.isNullType());
      assertFalse(parameterizedType2.isTemplateType());
      assertTrue(parameterizedType2.isParameterizedType());
      assertFalse(parameterizedType2.isNumberValueType());
      assertFalse(parameterizedType2.isBooleanValueType());
      assertFalse(parameterizedType2.isFunctionType());
      assertFalse(parameterizedType2.isUnionType());
      assertFalse(parameterizedType2.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNative0;
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.differsFrom(nullType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      String string0 = jSType0.toAnnotationString();
      assertNotNull(string0);
      assertEquals("(?|null)", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      simpleErrorReporter0.warning("Not declared as a constructor", "Unknown class name", 2669, 0);
      boolean boolean0 = jSType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      int int0 = JSType.NOT_ENUMDECL;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) instanceObjectType0, (JSType) noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.matchesInt32Context();
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = nullType0.isGlobalThisType();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noType0.isTheObjectType();
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.dereference();
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(instanceObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumType enumType0 = noType0.toMaybeEnumType();
      assertNull(enumType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoType noType1 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(noType1.equals((Object)noType0));
      assertNotNull(noType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isStringValueType());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isResolved());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isNoObjectType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isOrdinaryFunction());
      assertTrue(noType1.isNullable());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(noResolvedType0, noResolvedType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType2 = new NoResolvedType(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertNotNull(noResolvedType2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType2.isEnumType());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertFalse(noResolvedType2.isEnumElementType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertTrue(noResolvedType2.isNullable());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertFalse(noResolvedType2.isParameterizedType());
      assertTrue(noResolvedType2.isObject());
      assertFalse(noResolvedType2.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType2.isTemplateType());
      assertNull(noResolvedType2.getReferenceName());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.isNoType());
      assertFalse(noResolvedType2.isAllType());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isFunctionType());
      assertTrue(noResolvedType2.canBeCalled());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertFalse(noResolvedType2.isRecordType());
      assertFalse(noResolvedType2.isResolved());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertFalse(noResolvedType2.hasCachedValues());
      assertTrue(noResolvedType2.hasInstanceType());
      assertFalse(noResolvedType2.isNoObjectType());
      assertFalse(noResolvedType2.isStringValueType());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isUnionType());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry2.createDefaultObjectUnion(jSType_TypePair0.typeB);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertSame(noResolvedType0, noResolvedType1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertNotNull(allType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertNotNull(stringType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isConstructor());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      StringType stringType1 = new StringType(jSTypeRegistry1);
      assertFalse(stringType1.equals((Object)stringType0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(stringType1);
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertFalse(stringType1.isNoResolvedType());
      assertFalse(stringType1.isConstructor());
      assertFalse(stringType1.isUnionType());
      assertFalse(stringType1.isParameterizedType());
      assertFalse(stringType1.isRecordType());
      assertFalse(stringType1.isNumberValueType());
      assertFalse(stringType1.isOrdinaryFunction());
      assertFalse(stringType1.isResolved());
      assertFalse(stringType1.isVoidType());
      assertFalse(stringType1.isFunctionPrototypeType());
      assertEquals("string", stringType1.getDisplayName());
      assertFalse(stringType1.isInterface());
      assertTrue(stringType1.matchesObjectContext());
      assertTrue(stringType1.matchesStringContext());
      assertFalse(stringType1.isNullType());
      assertTrue(stringType1.matchesNumberContext());
      assertFalse(stringType1.isAllType());
      assertFalse(stringType1.isTemplateType());
      assertFalse(stringType1.isEnumType());
      assertFalse(stringType1.isBooleanValueType());
      assertFalse(stringType1.isFunctionType());
      assertFalse(stringType1.isCheckedUnknownType());
      assertFalse(stringType1.isEnumElementType());
      assertFalse(stringType1.isNominalConstructor());
      assertTrue(stringType1.isStringValueType());
      assertFalse(stringType1.isNoObjectType());
      assertFalse(stringType1.isNominalType());
      assertFalse(stringType1.isNoType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)stringType1.autoboxesTo();
      assertFalse(stringType1.equals((Object)stringType0));
      assertFalse(instanceObjectType1.equals((Object)instanceObjectType0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(instanceObjectType1);
      assertNotSame(stringType1, stringType0);
      assertNotSame(instanceObjectType1, instanceObjectType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertFalse(stringType1.isNoResolvedType());
      assertFalse(stringType1.isConstructor());
      assertFalse(stringType1.isUnionType());
      assertFalse(stringType1.isParameterizedType());
      assertFalse(stringType1.isRecordType());
      assertFalse(stringType1.isNumberValueType());
      assertFalse(stringType1.isOrdinaryFunction());
      assertFalse(stringType1.isResolved());
      assertFalse(stringType1.isVoidType());
      assertFalse(stringType1.isFunctionPrototypeType());
      assertEquals("string", stringType1.getDisplayName());
      assertFalse(stringType1.isInterface());
      assertTrue(stringType1.matchesObjectContext());
      assertTrue(stringType1.matchesStringContext());
      assertFalse(stringType1.isNullType());
      assertTrue(stringType1.matchesNumberContext());
      assertFalse(stringType1.isAllType());
      assertFalse(stringType1.isTemplateType());
      assertFalse(stringType1.isEnumType());
      assertFalse(stringType1.isBooleanValueType());
      assertFalse(stringType1.isFunctionType());
      assertFalse(stringType1.isCheckedUnknownType());
      assertFalse(stringType1.isEnumElementType());
      assertFalse(stringType1.isNominalConstructor());
      assertTrue(stringType1.isStringValueType());
      assertFalse(stringType1.isNoObjectType());
      assertFalse(stringType1.isNominalType());
      assertFalse(stringType1.isNoType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertTrue(instanceObjectType1.isObject());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isNominalType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertTrue(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      JSType.TypePair jSType_TypePair1 = noResolvedType2.getTypesUnderInequality(jSType_TypePair0.typeA);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(instanceObjectType0.equals((Object)instanceObjectType1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertNotNull(jSType_TypePair1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertSame(noResolvedType0, noResolvedType1);
      assertNotSame(instanceObjectType0, instanceObjectType1);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(noResolvedType2, noResolvedType0);
      assertNotSame(noResolvedType2, noResolvedType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType2.isEnumType());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertFalse(noResolvedType2.isEnumElementType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertTrue(noResolvedType2.isNullable());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertFalse(noResolvedType2.isParameterizedType());
      assertTrue(noResolvedType2.isObject());
      assertFalse(noResolvedType2.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType2.isTemplateType());
      assertNull(noResolvedType2.getReferenceName());
      assertFalse(noResolvedType2.isInterface());
      assertFalse(noResolvedType2.isNominalType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.isNoType());
      assertFalse(noResolvedType2.isAllType());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isFunctionType());
      assertTrue(noResolvedType2.canBeCalled());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertFalse(noResolvedType2.isRecordType());
      assertFalse(noResolvedType2.isResolved());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertFalse(noResolvedType2.hasCachedValues());
      assertTrue(noResolvedType2.hasInstanceType());
      assertFalse(noResolvedType2.isNoObjectType());
      assertFalse(noResolvedType2.isStringValueType());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isUnionType());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry1, node0, "?DG|Son.CU7l0pl");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = unresolvedTypeExpression0.getPropertiesCount();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair2 = unionType0.getTypesUnderEquality(instanceObjectType1);
      assertFalse(stringType1.equals((Object)stringType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(instanceObjectType1.equals((Object)instanceObjectType0));
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(instanceObjectType0.equals((Object)instanceObjectType1));
      assertFalse(jSType_TypePair2.equals((Object)jSType_TypePair0));
      assertFalse(jSType_TypePair2.equals((Object)jSType_TypePair1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSType_TypePair0.equals((Object)jSType_TypePair1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair2);
      assertNotSame(stringType1, stringType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(instanceObjectType1, instanceObjectType0);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertSame(noResolvedType0, noResolvedType1);
      assertNotSame(instanceObjectType0, instanceObjectType1);
      assertNotSame(jSType_TypePair2, jSType_TypePair0);
      assertNotSame(jSType_TypePair2, jSType_TypePair1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSType_TypePair0, jSType_TypePair2);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertFalse(stringType1.isNoResolvedType());
      assertFalse(stringType1.isConstructor());
      assertFalse(stringType1.isUnionType());
      assertFalse(stringType1.isParameterizedType());
      assertFalse(stringType1.isRecordType());
      assertFalse(stringType1.isNumberValueType());
      assertFalse(stringType1.isOrdinaryFunction());
      assertFalse(stringType1.isResolved());
      assertFalse(stringType1.isVoidType());
      assertFalse(stringType1.isFunctionPrototypeType());
      assertEquals("string", stringType1.getDisplayName());
      assertFalse(stringType1.isInterface());
      assertTrue(stringType1.matchesObjectContext());
      assertTrue(stringType1.matchesStringContext());
      assertFalse(stringType1.isNullType());
      assertTrue(stringType1.matchesNumberContext());
      assertFalse(stringType1.isAllType());
      assertFalse(stringType1.isTemplateType());
      assertFalse(stringType1.isEnumType());
      assertFalse(stringType1.isBooleanValueType());
      assertFalse(stringType1.isFunctionType());
      assertFalse(stringType1.isCheckedUnknownType());
      assertFalse(stringType1.isEnumElementType());
      assertFalse(stringType1.isNominalConstructor());
      assertTrue(stringType1.isStringValueType());
      assertFalse(stringType1.isNoObjectType());
      assertFalse(stringType1.isNominalType());
      assertFalse(stringType1.isNoType());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertTrue(instanceObjectType1.isObject());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isNominalType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertTrue(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = noResolvedType1.hasDisplayName();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(noResolvedType1.equals((Object)noResolvedType2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertNotSame(noResolvedType1, noResolvedType2);
      assertFalse(boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(noType0.equals((Object)noType1));
      assertNull(functionType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(noType0, noType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.differsFrom(instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(unknownType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.hasCachedValues());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isResolved());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isAllType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isSubtypeHelper(unknownType1, unknownType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.hasCachedValues());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isResolved());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isAllType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = parameterizedType0.canTestForEqualityWith(noResolvedType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isEnumType();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean2 = noResolvedType0.isGlobalThisType();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "TwM>@Ug");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.toMaybeFunctionType();
      assertNotNull(functionType0);
      assertSame(errorFunctionType0, functionType0);
      assertSame(functionType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
      assertNotNull(functionType1);
      assertSame(errorFunctionType0, functionType0);
      assertSame(errorFunctionType0, functionType1);
      assertSame(functionType1, errorFunctionType0);
      assertSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isConstructor());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionType1);
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, functionType0);
      assertSame(errorFunctionType0, functionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(functionType1, errorFunctionType0);
      assertSame(functionType1, errorFunctionType1);
      assertSame(functionType1, functionType0);
      assertSame(errorFunctionType1, functionType0);
      assertSame(errorFunctionType1, functionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.canBeCalled());
      assertTrue(functionType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isConstructor());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C)c'kqhV+");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(instanceObjectType0, instanceObjectType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(parameterizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)instanceObjectType0.getGreatestSubtype(jSType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(instanceObjectType0, instanceObjectType1);
      assertSame(instanceObjectType1, instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.isNominalType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertTrue(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = parameterizedType0.isInstanceType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(instanceObjectType0, instanceObjectType1);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumType enumType0 = instanceObjectType0.toMaybeEnumType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(enumType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(instanceObjectType0, instanceObjectType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertNotNull(jSTypeRegistry3);
      assertFalse(jSTypeRegistry3.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry3);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry3.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry3);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertNotNull(allType0);
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(jSTypeRegistry3.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      StringType stringType0 = new StringType(jSTypeRegistry1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry3));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(stringType0);
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      StringType stringType1 = new StringType(jSTypeRegistry3);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(stringType1.equals((Object)stringType0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertNotNull(stringType1);
      assertFalse(stringType1.isNominalType());
      assertFalse(stringType1.isCheckedUnknownType());
      assertFalse(stringType1.isNumberValueType());
      assertFalse(stringType1.isUnionType());
      assertFalse(stringType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertTrue(stringType1.matchesNumberContext());
      assertFalse(stringType1.isBooleanValueType());
      assertFalse(stringType1.isInterface());
      assertFalse(stringType1.isEnumType());
      assertTrue(stringType1.matchesObjectContext());
      assertFalse(stringType1.isNoResolvedType());
      assertFalse(stringType1.isVoidType());
      assertFalse(stringType1.isFunctionPrototypeType());
      assertFalse(stringType1.isResolved());
      assertFalse(stringType1.isRecordType());
      assertEquals("string", stringType1.getDisplayName());
      assertFalse(stringType1.isConstructor());
      assertFalse(stringType1.isOrdinaryFunction());
      assertTrue(stringType1.matchesStringContext());
      assertFalse(stringType1.isNoType());
      assertFalse(stringType1.isNoObjectType());
      assertFalse(stringType1.isNullType());
      assertFalse(stringType1.isTemplateType());
      assertFalse(stringType1.isEnumElementType());
      assertTrue(stringType1.isStringValueType());
      assertFalse(stringType1.isNominalConstructor());
      assertFalse(stringType1.isAllType());
      assertFalse(stringType1.isFunctionType());
      assertFalse(jSTypeRegistry3.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType2 = (InstanceObjectType)stringType1.autoboxesTo();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(stringType1.equals((Object)stringType0));
      assertFalse(instanceObjectType2.equals((Object)instanceObjectType1));
      assertFalse(instanceObjectType2.equals((Object)instanceObjectType0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertNotNull(instanceObjectType2);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(stringType1, stringType0);
      assertNotSame(instanceObjectType2, instanceObjectType1);
      assertNotSame(instanceObjectType2, instanceObjectType0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry2);
      assertFalse(stringType1.isNominalType());
      assertFalse(stringType1.isCheckedUnknownType());
      assertFalse(stringType1.isNumberValueType());
      assertFalse(stringType1.isUnionType());
      assertFalse(stringType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertTrue(stringType1.matchesNumberContext());
      assertFalse(stringType1.isBooleanValueType());
      assertFalse(stringType1.isInterface());
      assertFalse(stringType1.isEnumType());
      assertTrue(stringType1.matchesObjectContext());
      assertFalse(stringType1.isNoResolvedType());
      assertFalse(stringType1.isVoidType());
      assertFalse(stringType1.isFunctionPrototypeType());
      assertFalse(stringType1.isResolved());
      assertFalse(stringType1.isRecordType());
      assertEquals("string", stringType1.getDisplayName());
      assertFalse(stringType1.isConstructor());
      assertFalse(stringType1.isOrdinaryFunction());
      assertTrue(stringType1.matchesStringContext());
      assertFalse(stringType1.isNoType());
      assertFalse(stringType1.isNoObjectType());
      assertFalse(stringType1.isNullType());
      assertFalse(stringType1.isTemplateType());
      assertFalse(stringType1.isEnumElementType());
      assertTrue(stringType1.isStringValueType());
      assertFalse(stringType1.isNominalConstructor());
      assertFalse(stringType1.isAllType());
      assertFalse(stringType1.isFunctionType());
      assertTrue(instanceObjectType2.isNominalType());
      assertFalse(instanceObjectType2.isEnumElementType());
      assertFalse(instanceObjectType2.isNominalConstructor());
      assertTrue(instanceObjectType2.hasCachedValues());
      assertFalse(instanceObjectType2.isVoidType());
      assertFalse(instanceObjectType2.isAllType());
      assertFalse(instanceObjectType2.isBooleanValueType());
      assertFalse(instanceObjectType2.isTemplateType());
      assertFalse(instanceObjectType2.isEnumType());
      assertFalse(instanceObjectType2.isOrdinaryFunction());
      assertFalse(instanceObjectType2.isStringValueType());
      assertFalse(instanceObjectType2.isParameterizedType());
      assertTrue(instanceObjectType2.isNativeObjectType());
      assertFalse(instanceObjectType2.isInterface());
      assertTrue(instanceObjectType2.hasReferenceName());
      assertFalse(instanceObjectType2.isResolved());
      assertFalse(instanceObjectType2.isFunctionPrototypeType());
      assertFalse(instanceObjectType2.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType2.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType2.isRecordType());
      assertTrue(instanceObjectType2.matchesObjectContext());
      assertFalse(instanceObjectType2.isUnionType());
      assertFalse(instanceObjectType2.isNoResolvedType());
      assertFalse(instanceObjectType2.isFunctionType());
      assertFalse(instanceObjectType2.isCheckedUnknownType());
      assertFalse(instanceObjectType2.isNumberValueType());
      assertTrue(instanceObjectType2.isInstanceType());
      assertFalse(instanceObjectType2.isNoObjectType());
      assertFalse(instanceObjectType2.isNoType());
      assertFalse(instanceObjectType2.isNullType());
      assertTrue(instanceObjectType2.isObject());
      assertFalse(jSTypeRegistry3.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = errorFunctionType0.isBooleanValueType();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry3);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      int int0 = errorFunctionType0.getExtendedInterfacesCount();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry3));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry3);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean2 = noType0.isPropertyInExterns("Not declared as a type name");
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry3));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry3);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean2);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayList0);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) unionType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertNotNull(jSType0);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertSame(unionType0, jSType0);
      assertSame(jSType0, unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      nullType0.testForEquality(unionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) unionType0;
      jSTypeArray0[1] = (JSType) nullType0;
      jSTypeArray0[2] = (JSType) unionType0;
      jSTypeArray0[3] = (JSType) nullType0;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getPrototype();
      assertNotNull(objectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, jSTypeArray0[2], jSTypeArray0[3], (JSType) unionType0);
      assertNotNull(immutableList0);
      assertEquals(6, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(4, immutableList0.size());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType(objectType0, jSTypeArray0[0], (List<JSType>) immutableList0);
      assertNotNull(functionType0);
      assertEquals(6, jSTypeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertEquals(4, immutableList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) unionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) unionType0, true, jSTypeArray0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(6, jSTypeArray0.length);
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isUnionType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      int int0 = functionType1.getMinArguments();
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotSame(functionType1, functionType0);
      assertEquals(5, int0);
      assertEquals(6, jSTypeArray0.length);
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.isConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isUnionType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertTrue(parameterizedType0.isObject());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = nullType0.differsFrom(noResolvedType0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(nullType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = noResolvedType0.unboxesTo();
      assertNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        noResolvedType0.isSubtype((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) noResolvedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isTemplateType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.hasCachedValues());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isNominalType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isObject());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
      assertNotNull(jSType_TypePair0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(jSType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(3, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.dereference();
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType2 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType2.equals((Object)noResolvedType0));
      assertFalse(noResolvedType2.equals((Object)noResolvedType1));
      assertNotNull(noResolvedType2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType2.hasCachedValues());
      assertTrue(noResolvedType2.isConstructor());
      assertFalse(noResolvedType2.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType2.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType2.isCheckedUnknownType());
      assertTrue(noResolvedType2.isNullable());
      assertNull(noResolvedType2.getReferenceName());
      assertFalse(noResolvedType2.isUnionType());
      assertFalse(noResolvedType2.isNumberValueType());
      assertFalse(noResolvedType2.isNominalType());
      assertTrue(noResolvedType2.matchesStringContext());
      assertFalse(noResolvedType2.isRecordType());
      assertTrue(noResolvedType2.isObject());
      assertTrue(noResolvedType2.hasInstanceType());
      assertTrue(noResolvedType2.matchesObjectContext());
      assertTrue(noResolvedType2.isNoResolvedType());
      assertFalse(noResolvedType2.isOrdinaryFunction());
      assertFalse(noResolvedType2.isNullType());
      assertFalse(noResolvedType2.isBooleanValueType());
      assertEquals(0, noResolvedType2.getExtendedInterfacesCount());
      assertFalse(noResolvedType2.isEnumType());
      assertFalse(noResolvedType2.isNominalConstructor());
      assertFalse(noResolvedType2.isFunctionType());
      assertFalse(noResolvedType2.isVoidType());
      assertFalse(noResolvedType2.isEnumElementType());
      assertFalse(noResolvedType2.isNoType());
      assertFalse(noResolvedType2.isAllType());
      assertTrue(noResolvedType2.matchesNumberContext());
      assertFalse(noResolvedType2.isInterface());
      assertTrue(noResolvedType2.canBeCalled());
      assertFalse(noResolvedType2.isResolved());
      assertFalse(noResolvedType2.isTemplateType());
      assertFalse(noResolvedType2.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType2.getPropertiesCount());
      assertFalse(noResolvedType2.isParameterizedType());
      assertFalse(noResolvedType2.isNoObjectType());
      assertFalse(noResolvedType2.isReturnTypeInferred());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType1.hasDisplayName();
      assertFalse(noResolvedType0.equals((Object)noResolvedType2));
      assertFalse(noResolvedType1.equals((Object)noResolvedType2));
      assertSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType2);
      assertNotSame(noResolvedType1, noResolvedType2);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      noResolvedType0.testForEqualityHelper(booleanType0, booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(parameterizedType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{[N$^|L0f|=2");
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = errorFunctionType0.isParameterizedType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = errorFunctionType0.hasAnyTemplateInternal();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotNull(voidType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType1.matchesStringContext());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = voidType0.isVoidType();
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(voidType0, voidType1);
      assertTrue(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      NoType noType0 = (NoType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) voidType0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(voidType0.equals((Object)voidType1));
      assertNotNull(noType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(voidType0, voidType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean3 = instanceObjectType0.detectImplicitPrototypeCycle();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertFalse(boolean3);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.resolve(simpleErrorReporter0, noResolvedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertTrue(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = parameterizedType1.isNominalConstructor();
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertTrue(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = allType0.canBeCalled();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      parameterizedType1.setReferencedType(noResolvedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType1.isObject());
      assertFalse(parameterizedType1.isTemplateType());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isNullType());
      assertFalse(parameterizedType1.isUnionType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertFalse(parameterizedType1.hasCachedValues());
      assertTrue(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.safeResolve(noResolvedType0, simpleErrorReporter0, noResolvedType0);
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType1.isRecordType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.hasCachedValues());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isObject());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.isGlobalThisType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, false);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(functionType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry1, functionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry1, hashMap0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      RecordType recordType1 = recordType0.toMaybeRecordType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(recordType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isEnumType());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNominalType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isVoidType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType1 = (FunctionType)JSType.getGreatestSubtype((JSType) recordType1, (JSType) functionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(functionType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(functionType0, functionType1);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isEnumType());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNominalType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isVoidType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isNominalConstructor());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      noResolvedType0.clearResolved();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isNoType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = parameterizedType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) parameterizedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isRecordType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isInterface());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNullType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, jSType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNullType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType1 = jSType0.getLeastSupertype(parameterizedType0);
      assertNotNull(jSType1);
      assertSame(jSType0, jSType1);
      assertSame(jSType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNullType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(jSType1.isNullable());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isBooleanValueType());
      assertEquals("null", jSType1.getDisplayName());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.matchesObjectContext());
      assertTrue(jSType1.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isInterface());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isNominalConstructor());
      assertTrue(jSType1.matchesNumberContext());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType2 = booleanType0.findPropertyType("Named type with empty name component");
      assertNull(jSType2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
      assertSame(jSType0, jSType1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNullType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = noResolvedType0.hasDisplayName();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = noType0.getSource();
      assertNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isInterface());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = noResolvedType1.hasDisplayName();
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isInterface());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(functionType0);
      assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(parameterizedType0.isStringValueType());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.getGreatestSubtype((JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = unionType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = unionType0.isConstructor();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = parameterizedType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = parameterizedType0.isGlobalThisType();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry1.createParameterizedType((ObjectType) null, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(parameterizedType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry1, "", "Unknown class name", (-1525), 2612);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = (AllType)modificationVisitor0.caseAllType();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(allType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(0, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noType0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertTrue(boolean0);
      assertEquals(0, jSTypeNativeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)JSType.getLeastSupertype((JSType) instanceObjectType0, (JSType) unknownType0);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType1);
      assertNotSame(unknownType1, unknownType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(unknownType0, unknownType1);
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isBooleanValueType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.isTemplateType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isNativeObjectType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isConstructor());
      assertTrue(unknownType1.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNoResolvedType());
      assertTrue(unknownType1.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isParameterizedType());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertTrue(unknownType1.canBeCalled());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType2 = (UnknownType)namedType0.getReferencedType();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(unknownType2.equals((Object)unknownType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType2);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(unknownType2, unknownType1);
      assertSame(unknownType2, unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(unknownType2.isNullType());
      assertFalse(unknownType2.isBooleanValueType());
      assertTrue(unknownType2.canBeCalled());
      assertFalse(unknownType2.isNominalType());
      assertFalse(unknownType2.isNativeObjectType());
      assertFalse(unknownType2.isOrdinaryFunction());
      assertEquals("Unknown", unknownType2.getDisplayName());
      assertFalse(unknownType2.hasReferenceName());
      assertFalse(unknownType2.isNominalConstructor());
      assertTrue(unknownType2.matchesNumberContext());
      assertFalse(unknownType2.isTemplateType());
      assertFalse(unknownType2.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertFalse(unknownType2.isAllType());
      assertFalse(unknownType2.isEnumElementType());
      assertFalse(unknownType2.isNoType());
      assertTrue(unknownType2.isUnknownType());
      assertFalse(unknownType2.isFunctionPrototypeType());
      assertFalse(unknownType2.isNoObjectType());
      assertFalse(unknownType2.isInterface());
      assertTrue(unknownType2.isNullable());
      assertTrue(unknownType2.isObject());
      assertFalse(unknownType2.isParameterizedType());
      assertFalse(unknownType2.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType2.getPropertiesCount());
      assertTrue(unknownType2.matchesStringContext());
      assertEquals("?", unknownType2.getReferenceName());
      assertTrue(unknownType2.matchesObjectContext());
      assertFalse(unknownType2.hasCachedValues());
      assertFalse(unknownType2.isResolved());
      assertFalse(unknownType2.isStringValueType());
      assertFalse(unknownType2.isRecordType());
      assertFalse(unknownType2.isUnionType());
      assertFalse(unknownType2.isCheckedUnknownType());
      assertFalse(unknownType2.isNumberValueType());
      assertFalse(unknownType2.isEnumType());
      assertFalse(unknownType2.isNoResolvedType());
      assertTrue(unknownType2.hasDisplayName());
      assertFalse(unknownType2.isVoidType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType3 = (UnknownType)JSType.getGreatestSubtype((JSType) unknownType2, (JSType) unknownType2);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(unknownType2.equals((Object)unknownType1));
      assertFalse(unknownType3.equals((Object)unknownType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unknownType3);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertSame(unknownType2, unknownType3);
      assertNotSame(unknownType2, unknownType1);
      assertSame(unknownType2, unknownType0);
      assertSame(unknownType3, unknownType2);
      assertNotSame(unknownType3, unknownType1);
      assertSame(unknownType3, unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(unknownType2.isNullType());
      assertFalse(unknownType2.isBooleanValueType());
      assertTrue(unknownType2.canBeCalled());
      assertFalse(unknownType2.isNominalType());
      assertFalse(unknownType2.isNativeObjectType());
      assertFalse(unknownType2.isOrdinaryFunction());
      assertEquals("Unknown", unknownType2.getDisplayName());
      assertFalse(unknownType2.hasReferenceName());
      assertFalse(unknownType2.isNominalConstructor());
      assertTrue(unknownType2.matchesNumberContext());
      assertFalse(unknownType2.isTemplateType());
      assertFalse(unknownType2.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertFalse(unknownType2.isAllType());
      assertFalse(unknownType2.isEnumElementType());
      assertFalse(unknownType2.isNoType());
      assertTrue(unknownType2.isUnknownType());
      assertFalse(unknownType2.isFunctionPrototypeType());
      assertFalse(unknownType2.isNoObjectType());
      assertFalse(unknownType2.isInterface());
      assertTrue(unknownType2.isNullable());
      assertTrue(unknownType2.isObject());
      assertFalse(unknownType2.isParameterizedType());
      assertFalse(unknownType2.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType2.getPropertiesCount());
      assertTrue(unknownType2.matchesStringContext());
      assertEquals("?", unknownType2.getReferenceName());
      assertTrue(unknownType2.matchesObjectContext());
      assertFalse(unknownType2.hasCachedValues());
      assertFalse(unknownType2.isResolved());
      assertFalse(unknownType2.isStringValueType());
      assertFalse(unknownType2.isRecordType());
      assertFalse(unknownType2.isUnionType());
      assertFalse(unknownType2.isCheckedUnknownType());
      assertFalse(unknownType2.isNumberValueType());
      assertFalse(unknownType2.isEnumType());
      assertFalse(unknownType2.isNoResolvedType());
      assertTrue(unknownType2.hasDisplayName());
      assertFalse(unknownType2.isVoidType());
      assertFalse(unknownType3.isNativeObjectType());
      assertFalse(unknownType3.isOrdinaryFunction());
      assertFalse(unknownType3.hasCachedValues());
      assertTrue(unknownType3.matchesNumberContext());
      assertFalse(unknownType3.isTemplateType());
      assertFalse(unknownType3.isResolved());
      assertFalse(unknownType3.isBooleanValueType());
      assertTrue(unknownType3.canBeCalled());
      assertFalse(unknownType3.isConstructor());
      assertTrue(unknownType3.matchesObjectContext());
      assertFalse(unknownType3.isNullType());
      assertFalse(unknownType3.hasReferenceName());
      assertFalse(unknownType3.isNoObjectType());
      assertTrue(unknownType3.isUnknownType());
      assertEquals("Unknown", unknownType3.getDisplayName());
      assertFalse(unknownType3.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType3.getPossibleToBooleanOutcomes());
      assertFalse(unknownType3.isNoType());
      assertFalse(unknownType3.isNominalConstructor());
      assertFalse(unknownType3.isEnumElementType());
      assertFalse(unknownType3.isFunctionType());
      assertTrue(unknownType3.matchesStringContext());
      assertTrue(unknownType3.hasDisplayName());
      assertFalse(unknownType3.isNoResolvedType());
      assertFalse(unknownType3.isNominalType());
      assertTrue(unknownType3.isObject());
      assertFalse(unknownType3.isCheckedUnknownType());
      assertTrue(unknownType3.isNullable());
      assertFalse(unknownType3.isNumberValueType());
      assertFalse(unknownType3.isStringValueType());
      assertFalse(unknownType3.isUnionType());
      assertEquals(Integer.MAX_VALUE, unknownType3.getPropertiesCount());
      assertFalse(unknownType3.isParameterizedType());
      assertEquals("?", unknownType3.getReferenceName());
      assertFalse(unknownType3.isInterface());
      assertFalse(unknownType3.isEnumType());
      assertFalse(unknownType3.isFunctionPrototypeType());
      assertFalse(unknownType3.isRecordType());
      assertFalse(unknownType3.isVoidType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean1 = JSType.isSubtypeHelper(parameterizedType0, instanceObjectType0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType1 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noType1);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(noType1, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noType1.isTemplateType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isOrdinaryFunction());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isNullType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isEnumType());
      assertTrue(noType1.hasInstanceType());
      assertFalse(noType1.isVoidType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isRecordType());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isCheckedUnknownType());
      assertTrue(noType1.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertTrue(noType1.hasCachedValues());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isReturnTypeInferred());
      assertTrue(noType1.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      String string0 = booleanType0.getDisplayName();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(string0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals("boolean", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumElementType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean2 = unknownType2.isOrdinaryFunction();
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(unknownType2.equals((Object)unknownType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertSame(unknownType2, unknownType3);
      assertNotSame(unknownType2, unknownType1);
      assertSame(unknownType2, unknownType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean2);
      assertFalse(unknownType2.isNullType());
      assertFalse(unknownType2.isBooleanValueType());
      assertTrue(unknownType2.canBeCalled());
      assertFalse(unknownType2.isNominalType());
      assertFalse(unknownType2.isNativeObjectType());
      assertFalse(unknownType2.isOrdinaryFunction());
      assertEquals("Unknown", unknownType2.getDisplayName());
      assertFalse(unknownType2.hasReferenceName());
      assertFalse(unknownType2.isNominalConstructor());
      assertTrue(unknownType2.matchesNumberContext());
      assertFalse(unknownType2.isTemplateType());
      assertFalse(unknownType2.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertFalse(unknownType2.isAllType());
      assertFalse(unknownType2.isEnumElementType());
      assertFalse(unknownType2.isNoType());
      assertTrue(unknownType2.isUnknownType());
      assertFalse(unknownType2.isFunctionPrototypeType());
      assertFalse(unknownType2.isNoObjectType());
      assertFalse(unknownType2.isInterface());
      assertTrue(unknownType2.isNullable());
      assertTrue(unknownType2.isObject());
      assertFalse(unknownType2.isParameterizedType());
      assertFalse(unknownType2.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType2.getPropertiesCount());
      assertTrue(unknownType2.matchesStringContext());
      assertEquals("?", unknownType2.getReferenceName());
      assertTrue(unknownType2.matchesObjectContext());
      assertFalse(unknownType2.hasCachedValues());
      assertFalse(unknownType2.isResolved());
      assertFalse(unknownType2.isStringValueType());
      assertFalse(unknownType2.isRecordType());
      assertFalse(unknownType2.isUnionType());
      assertFalse(unknownType2.isCheckedUnknownType());
      assertFalse(unknownType2.isNumberValueType());
      assertFalse(unknownType2.isEnumType());
      assertFalse(unknownType2.isNoResolvedType());
      assertTrue(unknownType2.hasDisplayName());
      assertFalse(unknownType2.isVoidType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(booleanType0);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) instanceObjectType0, (JSType) noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = nullType0.equals(instanceObjectType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Visitor<StringType> visitor0 = (Visitor<StringType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseNullType();
      StringType stringType0 = nullType0.visit(visitor0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(stringType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isNoType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertNotNull(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = unknownType0.isParameterizedType();
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(instanceObjectType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType1 = parameterizedType0.toMaybeParameterizedType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(parameterizedType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = jSTypeRegistry1.createOptionalType(parameterizedType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType1 = JSType.getLeastSupertype((JSType) parameterizedType0, jSType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(jSType1.equals((Object)jSType0));
      assertNotNull(jSType1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isNoResolvedType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = jSType1.isNullable();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(jSType0.equals((Object)jSType1));
      assertTrue(jSType1.equals((Object)jSType0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isNoResolvedType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype(jSType1, (JSType) parameterizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(jSType0.equals((Object)jSType1));
      assertTrue(jSType1.equals((Object)jSType0));
      assertNotNull(unknownType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType1.hasCachedValues());
      assertFalse(parameterizedType1.isResolved());
      assertFalse(parameterizedType1.isStringValueType());
      assertFalse(parameterizedType1.isUnionType());
      assertFalse(parameterizedType1.isRecordType());
      assertFalse(parameterizedType1.isNumberValueType());
      assertFalse(parameterizedType1.isEnumType());
      assertFalse(parameterizedType1.isNominalConstructor());
      assertFalse(parameterizedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType1.isVoidType());
      assertFalse(parameterizedType1.isFunctionType());
      assertFalse(parameterizedType1.isEnumElementType());
      assertFalse(parameterizedType1.isNullType());
      assertTrue(parameterizedType1.isParameterizedType());
      assertFalse(parameterizedType1.isFunctionPrototypeType());
      assertFalse(parameterizedType1.isBooleanValueType());
      assertTrue(parameterizedType1.isObject());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isNoResolvedType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean1 = JSType.isSubtypeHelper(parameterizedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(parameterizedType0, parameterizedType1);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry1, "n0]F28m?");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      templateType1.isImplicitPrototype(templateType0);
      boolean boolean0 = templateType0.hasDisplayName();
      assertTrue(boolean0);
      
      templateType1.matchesInt32Context();
      TemplateType templateType2 = templateType0.toMaybeTemplateType();
      jSTypeRegistry0.canPropertyBeDefined(templateType0, "Not declared as a constructor");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry2);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) templateType0, (JSType) templateType2, (JSType) templateType2, (JSType) instanceObjectType0, jSType0, (JSType) templateType1, (JSType) templateType0, (JSType) noType0, (JSType) templateType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      unionType0.isUnknownType();
      assertTrue(templateType2.isTemplateType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry1, noResolvedType0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry1);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry1, false);
      unknownType0.getConstructor();
      ParameterizedType parameterizedType0 = jSTypeRegistry1.createParameterizedType(noResolvedType1, (JSType) null);
      ParameterizedType parameterizedType1 = parameterizedType0.toMaybeParameterizedType();
      jSTypeRegistry0.createOptionalType(parameterizedType0);
      jSTypeRegistry0.getType((String) null);
      JSType.isEquivalent((JSType) null, booleanType0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) booleanType0, (JSType) parameterizedType1);
      boolean boolean0 = JSType.isSubtypeHelper(unknownType0, jSType0);
      assertTrue(noResolvedType1.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.getGreatestSubtype((JSType) noResolvedType0, (JSType) instanceObjectType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.canTestForShallowEqualityWith(nullType0);
      noType0.getTypesUnderInequality(booleanType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry1);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry1);
      JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(jSType0);
      noObjectType0.isNoObjectType();
      jSType_TypePair0.typeB.isConstructor();
      assertTrue(noObjectType0.hasCachedValues());
      
      AllType allType1 = new AllType(jSTypeRegistry1);
      assertFalse(allType1.isConstructor());
  }
}

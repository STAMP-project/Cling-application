/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:42:46 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DormandPrince54StepInterpolator;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.HighamHall54StepInterpolator;
import org.apache.commons.math.ode.MidpointStepInterpolator;
import org.apache.commons.math.ode.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      classicalRungeKuttaStepInterpolator0.previousTime = 697.749307794;
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3285.272582566552);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-3284.786748660124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][4];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.append(continuousOutputModel0);
      continuousOutputModel1.append(continuousOutputModel0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      continuousOutputModel0.handleStep(highamHall54StepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-2316.825844));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      highamHall54StepInterpolator0.shift();
      continuousOutputModel0.handleStep(highamHall54StepInterpolator0, true);
      continuousOutputModel0.handleStep(highamHall54StepInterpolator0, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-271.76240177));
      doubleArray0[6] = (-271.76240177);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3285.272582566552);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-1060.433000879893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.handleStep(highamHall54StepInterpolator0, true);
      continuousOutputModel0.append(continuousOutputModel1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3284.00580735);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-1087.8819860581573));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      continuousOutputModel0.handleStep(highamHall54StepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.getFinalTime();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][4];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(1752.2654);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][4];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-513.676238));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-663.02));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][4];
      classicalRungeKuttaStepInterpolator0.shift();
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-513.676238));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-1064.3351288));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1064.3351288);
      doubleArray2[1] = (-1064.3351288);
      doubleArray2[2] = (-513.676238);
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray2, doubleArray1, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.append(continuousOutputModel0);
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // state vector dimension mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      classicalRungeKuttaStepInterpolator0.previousTime = 697.749307794;
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3285.272582566552);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-3193.689092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      double[][] doubleArray1 = new double[0][4];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, true);
      classicalRungeKuttaStepInterpolator0.storeTime((-513.676238));
      classicalRungeKuttaStepInterpolator0.shift();
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      classicalRungeKuttaStepInterpolator0.storeTime((-1063.255402012975));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hole between time ranges
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      StepInterpolator stepInterpolator0 = dummyStepInterpolator0.doCopy();
      continuousOutputModel0.handleStep(stepInterpolator0, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propagation direction mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      classicalRungeKuttaStepInterpolator0.previousTime = 697.749307794;
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3285.272582566552);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.interpolatedState = doubleArray0;
      classicalRungeKuttaStepInterpolator0.storeTime((-3285.272582566552));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-3284.786748660124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[6];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, true);
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(909.854475);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      continuousOutputModel0.handleStep(midpointStepInterpolator0, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      assertNull(firstOrderDifferentialEquations0);
      
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      
      classicalRungeKuttaStepInterpolator0.previousTime = 697.749307794;
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(697.749307794, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(697.749307794, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(697.749307794, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel0.append(continuousOutputModel1);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(697.749307794, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(697.749307794, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      classicalRungeKuttaStepInterpolator0.previousTime = (-3285.272582566552);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3285.272582566552), classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3285.272582566552), classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      continuousOutputModel1.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3285.272582566552), classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals((-97.54), continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals((-3285.272582566552), continuousOutputModel1.getInitialTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertNotNull(dormandPrince54StepInterpolator0);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertNotNull(dormandPrince54StepInterpolator1);
      
      StepInterpolator stepInterpolator0 = dormandPrince54StepInterpolator1.doCopy();
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator0, stepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator1, stepInterpolator0);
      assertNotSame(stepInterpolator0, dormandPrince54StepInterpolator0);
      assertNotSame(stepInterpolator0, dormandPrince54StepInterpolator1);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(stepInterpolator0.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(stepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(stepInterpolator0);
      
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator0, stepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator1, stepInterpolator0);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(stepInterpolator0, dormandPrince54StepInterpolator0);
      assertNotSame(stepInterpolator0, dormandPrince54StepInterpolator1);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)stepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)stepInterpolator0));
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(stepInterpolator0.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(stepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-97.54), classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-3285.272582566552), classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(classicalRungeKuttaStepInterpolator0.isForward());
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(697.749307794, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-366.9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertTrue(boolean0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[10];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, false);
      classicalRungeKuttaStepInterpolator0.storeTime((-97.54));
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      classicalRungeKuttaStepInterpolator0.previousTime = (-3284.00580735);
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-1060.433000879893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = classicalRungeKuttaStepInterpolator0.equations;
      double[] doubleArray0 = new double[8];
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[][] doubleArray1 = new double[0][0];
      classicalRungeKuttaStepInterpolator0.reinitialize((FirstOrderDifferentialEquations) null, doubleArray0, doubleArray1, true);
      classicalRungeKuttaStepInterpolator0.previousTime = 16.0;
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-1087.8819860581573));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }
}

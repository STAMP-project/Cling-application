import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay9.monthOfYear();
        java.util.Locale locale16 = null;
        int int17 = property15.getMaximumTextLength(locale16);
        java.lang.String str18 = property15.getAsText();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone34);
        int int36 = property15.compareTo((org.joda.time.ReadableInstant) dateTime35);
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DurationField durationField38 = property7.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay40 = property7.addToCopy(1970);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay40.minus(readablePeriod42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "January" + "'", str18, "January");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay43);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int18 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay20 = property2.addWrapFieldToCopy(2);
        java.lang.String str21 = property2.getAsText();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale25 = null;
        java.lang.String str26 = yearMonthDay23.toString("1970-01-01", locale25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        java.lang.String str30 = property27.toString();
        boolean boolean31 = property2.equals((java.lang.Object) property27);
        int int32 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[dayOfMonth]" + "'", str30, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTime(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = yearMonthDay13.get(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = property2.addToCopy((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay10 = property2.withMaximumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = yearMonthDay10.getFields();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        java.lang.String str33 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonthDay35.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.minusYears((int) 'a');
        org.joda.time.DateTime dateTime40 = yearMonthDay35.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay35.withPeriodAdded(readablePeriod41, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minus(readablePeriod46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay50.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay52 = property51.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField53 = property51.getField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property51.getAsText(locale54);
        org.joda.time.YearMonthDay yearMonthDay57 = property51.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay58 = property51.withMaximumValue();
        boolean boolean59 = yearMonthDay47.equals((java.lang.Object) property51);
        org.joda.time.YearMonthDay yearMonthDay60 = property51.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property51.getFieldType();
        boolean boolean62 = yearMonthDay9.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay15.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) 2, chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology31);
        boolean boolean38 = yearMonthDay9.equals((java.lang.Object) yearMonthDay37);
        int int39 = yearMonthDay9.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = property5.setCopy("1", locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = property5.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property5.withMaximumValue();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withPeriodAdded(readablePeriod4, (int) (short) -1);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumShortTextLength(locale8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = yearMonthDay4.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = yearMonthDay13.toString("1970-01-01", locale15);
        java.lang.String str17 = yearMonthDay13.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate20 = yearMonthDay13.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay13.withChronologyRetainFields(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay4.withChronologyRetainFields(chronology36);
        boolean boolean41 = property2.equals((java.lang.Object) yearMonthDay4);
        java.lang.String str42 = property2.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.withDayOfMonth(1);
        boolean boolean21 = yearMonthDay17.equals((java.lang.Object) (short) -1);
        boolean boolean22 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight();
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay17.minusYears(1970);
        int int27 = yearMonthDay17.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay29.toDateMidnight();
        java.lang.String str35 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonthDay29.get(dateTimeFieldType43);
        int int45 = yearMonthDay9.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay9.withDayOfMonth(25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.minus(readablePeriod27);
        org.joda.time.LocalDate localDate29 = yearMonthDay19.toLocalDate();
        boolean boolean30 = yearMonthDay13.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTime dateTime31 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.dayOfMonth();
        java.lang.String str37 = property36.toString();
        java.lang.String str38 = property36.getName();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property36.getAsText(locale39);
        org.joda.time.YearMonthDay yearMonthDay42 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = yearMonthDay58.toInterval(dateTimeZone59);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay58.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay58.withYear((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay58.toDateTime(timeOfDay65);
        org.joda.time.DateTime dateTime67 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[dayOfMonth]" + "'", str37, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayOfMonth" + "'", str38, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTime(readableInstant29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1, chronology46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay25, chronology46);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale53 = null;
        java.lang.String str54 = yearMonthDay51.toString("1970-01-01", locale53);
        java.lang.String str55 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate58 = yearMonthDay51.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay51.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay48.withChronologyRetainFields(chronology74);
        int int79 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay78);
        java.lang.Class<?> wildcardClass80 = yearMonthDay78.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property20.getAsText(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property20.getFieldType();
        boolean boolean26 = yearMonthDay17.isSupported(dateTimeFieldType25);
        int int27 = yearMonthDay9.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay44.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay46 = property45.withMinimumValue();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property45.getAsShortText(locale47);
        org.joda.time.DateTimeField dateTimeField49 = property45.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay41.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay9.withField(dateTimeFieldType50, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.util.Locale locale30 = null;
        java.lang.String str31 = property7.getAsText(locale30);
        int int32 = property7.getMinimumValueOverall();
        int int33 = property7.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "January" + "'", str31, "January");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        int int14 = property7.getMinimumValue();
        java.lang.String str15 = property7.toString();
        org.joda.time.DurationField durationField16 = property7.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withMonthOfYear(9);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusYears(2020);
        int[] intArray15 = yearMonthDay14.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3998, 9, 1]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay1.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.addWrapFieldToCopy(100);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonthDay19.toString("1970-01-01", locale21);
        java.lang.String str23 = yearMonthDay19.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay19.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        java.lang.String str34 = yearMonthDay30.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay30.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate37 = yearMonthDay30.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology53 = yearMonthDay52.getChronology();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) -1, chronology53);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay30.withChronologyRetainFields(chronology53);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology53);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay19.withChronologyRetainFields(chronology53);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonthDay59.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay59.minusYears((int) 'a');
        org.joda.time.DateTime dateTime64 = yearMonthDay59.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay59.withPeriodAdded(readablePeriod65, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.dayOfMonth();
        boolean boolean72 = property70.equals((java.lang.Object) '4');
        java.lang.String str73 = property70.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property70.getFieldType();
        boolean boolean75 = yearMonthDay59.isSupported(dateTimeFieldType74);
        boolean boolean76 = yearMonthDay57.isSupported(dateTimeFieldType74);
        boolean boolean77 = yearMonthDay17.isSupported(dateTimeFieldType74);
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonthDay79.indexOf(dateTimeFieldType80);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay79.minusYears((int) 'a');
        org.joda.time.DateTime dateTime84 = yearMonthDay79.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay79.withPeriodAdded(readablePeriod85, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay87.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay89.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology92 = yearMonthDay91.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = yearMonthDay91.getFieldType(0);
        org.joda.time.YearMonthDay.Property property95 = yearMonthDay17.property(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withPeriodAdded(readablePeriod28, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minus(readablePeriod33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.YearMonthDay yearMonthDay44 = property38.setCopy((int) (short) 1);
        java.util.Locale locale45 = null;
        java.lang.String str46 = property38.getAsShortText(locale45);
        java.lang.String str47 = property38.getName();
        boolean boolean48 = yearMonthDay30.equals((java.lang.Object) str47);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonthDay50.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay50.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay50.toDateMidnight();
        java.lang.String str56 = yearMonthDay50.toString();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay58.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsText(locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        int int65 = yearMonthDay50.get(dateTimeFieldType64);
        int int66 = yearMonthDay30.indexOf(dateTimeFieldType64);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonthDay68.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minusYears((int) 'a');
        org.joda.time.DateTime dateTime73 = yearMonthDay68.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay68.withPeriodAdded(readablePeriod74, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay78.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology81 = yearMonthDay80.getChronology();
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay30, chronology81);
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime20, chronology81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay13.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeField[] dateTimeFieldArray85 = yearMonthDay13.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dayOfMonth" + "'", str47, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldArray85);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) 10, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = yearMonthDay28.getValue(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        boolean boolean13 = yearMonthDay9.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        boolean boolean21 = property19.equals((java.lang.Object) '4');
        java.lang.String str22 = property19.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property19.getFieldType();
        boolean boolean24 = yearMonthDay9.equals((java.lang.Object) property19);
        org.joda.time.DateTimeField dateTimeField25 = property19.getField();
        java.util.Locale locale26 = null;
        int int27 = property19.getMaximumShortTextLength(locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property19.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay30 = property19.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = yearMonthDay13.toString("1970-01-01", locale15);
        java.lang.String str17 = yearMonthDay13.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate20 = yearMonthDay13.toLocalDate();
        boolean boolean21 = yearMonthDay9.equals((java.lang.Object) localDate20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay9.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = yearMonthDay12.toString("1970-01-01", locale14);
        java.lang.String str16 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = yearMonthDay12.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withPeriodAdded(readablePeriod28, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1, chronology35);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay12.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay1.withChronologyRetainFields(chronology35);
        java.lang.String str40 = yearMonthDay39.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay39.withDayOfMonth((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01" + "'", str40, "1970-01-01");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 0);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay15.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) 2, chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology31);
        boolean boolean38 = yearMonthDay9.equals((java.lang.Object) yearMonthDay37);
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay9.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay9.plusDays((-1));
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonthDay36.indexOf(dateTimeFieldType37);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minusYears((int) 'a');
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay36.withPeriodAdded(readablePeriod42, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withDayOfMonth(1);
        boolean boolean48 = yearMonthDay44.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate49 = yearMonthDay44.toLocalDate();
        int int50 = yearMonthDay44.getYear();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay44.plusYears((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = yearMonthDay54.indexOf(dateTimeFieldType55);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minusYears((int) 'a');
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay54.withPeriodAdded(readablePeriod60, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = yearMonthDay66.toInterval(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = yearMonthDay66.getFields();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay66.plusMonths(1970);
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonthDay74.indexOf(dateTimeFieldType75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.minusYears((int) 'a');
        org.joda.time.DateTime dateTime79 = yearMonthDay74.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay74.withPeriodAdded(readablePeriod80, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay82.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay84.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology87 = yearMonthDay86.getChronology();
        org.joda.time.YearMonthDay yearMonthDay89 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property90 = yearMonthDay89.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay91 = property90.withMinimumValue();
        java.util.Locale locale92 = null;
        java.lang.String str93 = property90.getAsShortText(locale92);
        org.joda.time.DateTimeField dateTimeField94 = property90.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property90.getFieldType();
        org.joda.time.YearMonthDay.Property property96 = yearMonthDay86.property(dateTimeFieldType95);
        org.joda.time.YearMonthDay.Property property97 = yearMonthDay66.property(dateTimeFieldType95);
        int int98 = yearMonthDay52.indexOf(dateTimeFieldType95);
        boolean boolean99 = yearMonthDay34.isSupported(dateTimeFieldType95);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldArray70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1" + "'", str93, "1");
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.lang.String str5 = property2.getName();
        int int6 = property2.getMinimumValueOverall();
        java.lang.String str7 = property2.getAsText();
        org.joda.time.DurationField durationField8 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "dayOfMonth" + "'", str5, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths((int) (short) 1);
        int[] intArray18 = yearMonthDay15.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = yearMonthDay15.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 12, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(11, 292278993, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = property2.addToCopy((int) (short) 100);
        java.lang.String str10 = property2.getAsText();
        org.joda.time.YearMonthDay yearMonthDay11 = property2.withMinimumValue();
        int int12 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonthDay34.indexOf(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusYears((int) 'a');
        org.joda.time.DateTime dateTime39 = yearMonthDay34.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay34.withPeriodAdded(readablePeriod40, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minus(readablePeriod45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTimeAtCurrentTime(dateTimeZone48);
        int int50 = property32.compareTo((org.joda.time.ReadableInstant) dateTime49);
        int int51 = property32.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property32.getFieldType();
        int int53 = yearMonthDay13.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay13.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay13.withPeriodAdded(readablePeriod55, (int) (short) -1);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = yearMonthDay13.toString("Property[year]", locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        int int4 = property3.getMaximumValue();
        int int5 = property3.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay7 = property3.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.YearMonthDay yearMonthDay16 = property10.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay17 = property10.withMaximumValue();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay7.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(0L, chronology18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay22.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = property23.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        org.joda.time.YearMonthDay yearMonthDay26 = property23.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay27 = property23.getYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay27.withPeriodAdded(readablePeriod28, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateTime dateTime37 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay32.withPeriodAdded(readablePeriod38, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay44.year();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonthDay48.indexOf(dateTimeFieldType49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay48.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay48.minus(readablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = property45.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property45.getFieldType();
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay27.property(dateTimeFieldType59);
        int int61 = yearMonthDay20.indexOf(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addWrapFieldToCopy((int) (short) 10);
        int int9 = property2.getMinimumValue();
        java.util.Locale locale10 = null;
        int int11 = property2.getMaximumShortTextLength(locale10);
        org.joda.time.DateTimeField dateTimeField12 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay14 = property2.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.withPeriodAdded(readablePeriod33, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay42.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay44 = property43.withMinimumValue();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property43.getAsShortText(locale45);
        org.joda.time.DateTimeField dateTimeField47 = property43.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay39.property(dateTimeFieldType48);
        int int50 = yearMonthDay1.get(dateTimeFieldType48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay1.withPeriodAdded(readablePeriod51, 1970);
        org.joda.time.Interval interval54 = yearMonthDay1.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay24 = property23.getYearMonthDay();
        java.lang.String str25 = property23.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = property23.getYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.minus(readablePeriod27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[dayOfMonth]" + "'", str25, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay11.monthOfYear();
        int int18 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        int[] intArray19 = yearMonthDay11.getValues();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay21.monthOfYear();
        java.util.Locale locale28 = null;
        int int29 = property27.getMaximumShortTextLength(locale28);
        org.joda.time.YearMonthDay yearMonthDay31 = property27.setCopy(2);
        int int32 = property27.getMaximumValueOverall();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property27.getAsText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property27.getFieldType();
        int int36 = yearMonthDay11.get(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay11.minusDays(12);
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology39);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = yearMonthDay32.isAfter((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonthDay53.getFields();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay62.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        boolean boolean69 = yearMonthDay53.isSupported(dateTimeFieldType68);
        boolean boolean70 = yearMonthDay32.isSupported(dateTimeFieldType68);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay28.withField(dateTimeFieldType68, 31);
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale76 = null;
        java.lang.String str77 = yearMonthDay74.toString("1970-01-01", locale76);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay74.dayOfMonth();
        java.util.Locale locale80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = property78.setCopy("1", locale80);
        boolean boolean82 = yearMonthDay72.isEqual((org.joda.time.ReadablePartial) yearMonthDay81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = yearMonthDay72.toDateMidnight(dateTimeZone83);
        int[] intArray85 = yearMonthDay72.getValues();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 31]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale19 = null;
        java.lang.String str20 = yearMonthDay17.toString("1970-01-01", locale19);
        java.lang.String str21 = yearMonthDay17.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate24 = yearMonthDay17.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.withPeriodAdded(readablePeriod33, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1, chronology40);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay17.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(0L, chronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight52 = yearMonthDay47.toDateMidnight();
        java.lang.String str53 = yearMonthDay47.toString();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonthDay55.indexOf(dateTimeFieldType56);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minusYears((int) 'a');
        org.joda.time.DateTime dateTime60 = yearMonthDay55.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay55.withPeriodAdded(readablePeriod61, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTimeAtMidnight(dateTimeZone64);
        boolean boolean66 = yearMonthDay47.isAfter((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonthDay68.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay68.toDateMidnight();
        java.lang.String str74 = yearMonthDay68.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = yearMonthDay68.getFields();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay77.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay79 = property78.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField80 = property78.getField();
        java.util.Locale locale81 = null;
        java.lang.String str82 = property78.getAsText(locale81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property78.getFieldType();
        boolean boolean84 = yearMonthDay68.isSupported(dateTimeFieldType83);
        boolean boolean85 = yearMonthDay47.isSupported(dateTimeFieldType83);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay43.withField(dateTimeFieldType83, 31);
        org.joda.time.Chronology chronology88 = yearMonthDay87.getChronology();
        boolean boolean89 = yearMonthDay9.isAfter((org.joda.time.ReadablePartial) yearMonthDay87);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay87, chronology90);
        org.joda.time.YearMonthDay.Property property92 = yearMonthDay87.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01" + "'", str53, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-01" + "'", str74, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1" + "'", str82, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1, chronology16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withPeriodAdded(readablePeriod13, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.monthOfYear();
        boolean boolean21 = property2.equals((java.lang.Object) yearMonthDay19);
        int int22 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DurationField durationField8 = property5.getRangeDurationField();
        java.lang.String str9 = property5.getAsString();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property5.getAsShortText(locale10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        java.util.Locale locale10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy("1", locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withYear((int) (short) 1);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay32.toString("1970-01-01", locale34);
        java.lang.String str36 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay32.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = yearMonthDay32.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonthDay42.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusYears((int) 'a');
        org.joda.time.DateTime dateTime47 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay11, chronology55);
        boolean boolean60 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay62 = property61.getYearMonthDay();
        java.lang.String str63 = yearMonthDay62.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale67 = null;
        java.lang.String str68 = yearMonthDay65.toString("1970-01-01", locale67);
        java.lang.String str69 = yearMonthDay65.toString();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay65.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay65.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale77 = null;
        java.lang.String str78 = yearMonthDay75.toString("1970-01-01", locale77);
        org.joda.time.YearMonthDay.Property property79 = yearMonthDay75.dayOfMonth();
        org.joda.time.Interval interval80 = yearMonthDay75.toInterval();
        int int81 = yearMonthDay73.compareTo((org.joda.time.ReadablePartial) yearMonthDay75);
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        int int85 = yearMonthDay83.indexOf(dateTimeFieldType84);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay83.minusYears((int) 'a');
        org.joda.time.DateTime dateTime88 = yearMonthDay83.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay83.withPeriodAdded(readablePeriod89, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay91.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay91.plusDays(1);
        boolean boolean96 = yearMonthDay73.isEqual((org.joda.time.ReadablePartial) yearMonthDay91);
        org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay73.plusDays((-1));
        boolean boolean99 = yearMonthDay62.isEqual((org.joda.time.ReadablePartial) yearMonthDay73);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01" + "'", str68, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01" + "'", str69, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-01" + "'", str78, "1970-01-01");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertNotNull(yearMonthDay95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(yearMonthDay98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = yearMonthDay1.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withPeriodAdded(readablePeriod12, (int) ' ');
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonthDay14.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale19 = null;
        java.lang.String str20 = yearMonthDay17.toString("1970-01-01", locale19);
        java.lang.String str21 = yearMonthDay17.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay27 = property26.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = yearMonthDay27.toString(dateTimeFormatter28);
        boolean boolean30 = yearMonthDay17.isBefore((org.joda.time.ReadablePartial) yearMonthDay27);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay27.toString("1", locale32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonthDay35.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.minusYears((int) 'a');
        org.joda.time.DateTime dateTime40 = yearMonthDay35.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay35.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonthDay43.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight48 = yearMonthDay43.toDateMidnight();
        java.lang.String str49 = yearMonthDay43.toString();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay51.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay53 = property52.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField54 = property52.getField();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property52.getAsText(locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property52.getFieldType();
        int int58 = yearMonthDay43.get(dateTimeFieldType57);
        int int59 = yearMonthDay43.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight66 = yearMonthDay61.toDateMidnight();
        java.lang.String str67 = yearMonthDay61.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = yearMonthDay61.getFields();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property71 = yearMonthDay70.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay72 = property71.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField73 = property71.getField();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        boolean boolean77 = yearMonthDay61.isSupported(dateTimeFieldType76);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay43.property(dateTimeFieldType76);
        int int79 = yearMonthDay35.indexOf(dateTimeFieldType76);
        int int80 = yearMonthDay27.get(dateTimeFieldType76);
        org.joda.time.Chronology chronology81 = yearMonthDay27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(chronology81);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay14.withChronologyRetainFields(chronology81);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01" + "'", str49, "1970-01-01");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01" + "'", str67, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.Chronology chronology15 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonthDay17.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property26.getAsText(locale29);
        org.joda.time.YearMonthDay yearMonthDay31 = property26.withMinimumValue();
        int int32 = property26.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property26.getFieldType();
        boolean boolean34 = yearMonthDay23.isSupported(dateTimeFieldType33);
        int int35 = yearMonthDay13.get(dateTimeFieldType33);
        java.lang.Class<?> wildcardClass36 = dateTimeFieldType33.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.Locale locale16 = null;
        java.lang.String str17 = yearMonthDay11.toString("1", locale16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay28.toString("1970-01-01", locale34);
        boolean boolean36 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay28);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay28.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay39.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        org.joda.time.YearMonthDay yearMonthDay43 = property40.getYearMonthDay();
        java.lang.String str44 = property40.getAsString();
        java.lang.String str45 = property40.getAsString();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateTime dateTime52 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay47.withPeriodAdded(readablePeriod53, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = property40.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = property37.compareTo((org.joda.time.ReadableInstant) dateTime57);
        java.util.Locale locale60 = null;
        int int61 = property37.getMaximumShortTextLength(locale60);
        org.joda.time.YearMonthDay yearMonthDay62 = property37.withMinimumValue();
        java.util.Locale locale63 = null;
        int int64 = property37.getMaximumTextLength(locale63);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusDays(10);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = yearMonthDay1.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale24 = null;
        java.lang.String str25 = yearMonthDay22.toString("1970-01-01", locale24);
        java.lang.String str26 = yearMonthDay22.toString();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay22.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate29 = yearMonthDay22.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateTime dateTime37 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay32.withPeriodAdded(readablePeriod38, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) -1, chronology45);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay22.withChronologyRetainFields(chronology45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) 10, chronology45);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay1.withChronologyRetainFields(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = yearMonthDay1.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        int[] intArray9 = yearMonthDay1.getValues();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        java.util.Locale locale13 = null;
        int int14 = property12.getMaximumTextLength(locale13);
        org.joda.time.DurationField durationField15 = property12.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonthDay17.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) 'a');
        org.joda.time.DateTime dateTime22 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay17.withPeriodAdded(readablePeriod23, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minus(readablePeriod28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay29.monthOfYear();
        boolean boolean31 = property12.equals((java.lang.Object) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay33.monthOfYear();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property39.getAsText(locale40);
        java.lang.String str42 = property39.getAsText();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale46 = null;
        java.lang.String str47 = yearMonthDay44.toString("1970-01-01", locale46);
        java.lang.String str48 = yearMonthDay44.toString();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay44.minusYears((int) (byte) -1);
        boolean boolean51 = property39.equals((java.lang.Object) yearMonthDay50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay61.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay63 = property62.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField64 = property62.getField();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property62.getAsText(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property62.getFieldType();
        int int68 = yearMonthDay53.get(dateTimeFieldType67);
        int int69 = yearMonthDay53.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonthDay71.indexOf(dateTimeFieldType72);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay71.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight76 = yearMonthDay71.toDateMidnight();
        java.lang.String str77 = yearMonthDay71.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray78 = yearMonthDay71.getFields();
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property81 = yearMonthDay80.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay82 = property81.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField83 = property81.getField();
        java.util.Locale locale84 = null;
        java.lang.String str85 = property81.getAsText(locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property81.getFieldType();
        boolean boolean87 = yearMonthDay71.isSupported(dateTimeFieldType86);
        org.joda.time.YearMonthDay.Property property88 = yearMonthDay53.property(dateTimeFieldType86);
        org.joda.time.YearMonthDay.Property property89 = yearMonthDay50.property(dateTimeFieldType86);
        int int90 = yearMonthDay29.compareTo((org.joda.time.ReadablePartial) yearMonthDay50);
        boolean boolean91 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay1.minusDays(25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "January" + "'", str41, "January");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "January" + "'", str42, "January");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(yearMonthDay93);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        java.lang.String str15 = yearMonthDay11.toString();
        boolean boolean16 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property19.getAsText(locale22);
        org.joda.time.YearMonthDay yearMonthDay25 = property19.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay26 = property19.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay28.toDateMidnight();
        java.lang.String str34 = yearMonthDay28.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = yearMonthDay28.getFields();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        boolean boolean44 = yearMonthDay28.isSupported(dateTimeFieldType43);
        int int45 = yearMonthDay26.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay11.withField(dateTimeFieldType43, (int) (short) 10);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay11.year();
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay11.toDateTime(timeOfDay49, dateTimeZone50);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        java.lang.String str11 = property7.getAsText();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale17 = null;
        java.lang.String str18 = yearMonthDay15.toString("1970-01-01", locale17);
        java.lang.String str19 = yearMonthDay15.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay15.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate22 = yearMonthDay15.toLocalDate();
        boolean boolean23 = property7.equals((java.lang.Object) localDate22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        org.joda.time.Interval interval9 = yearMonthDay4.toInterval();
        int[] intArray10 = yearMonthDay4.getValues();
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) intArray10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay13.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay13.minus(readablePeriod19);
        int int21 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withMonthOfYear(1971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1971 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusYears((int) '4');
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay7.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minusDays((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addWrapFieldToCopy(10);
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumShortTextLength(locale3);
        int int5 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property9.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = property9.withMaximumValue();
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withChronologyRetainFields(chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay18.dayOfMonth();
        boolean boolean22 = property20.equals((java.lang.Object) "1970-10-01");
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay32 = property31.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        boolean boolean37 = yearMonthDay28.isSupported(dateTimeFieldType36);
        int int38 = property20.compareTo((org.joda.time.ReadablePartial) yearMonthDay28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType40 = yearMonthDay28.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.withFieldAdded(durationFieldType17, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property2.getFieldType();
        int int8 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay10.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay10.minus(readablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(1970);
        int int34 = yearMonthDay10.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.DateTime dateTime35 = yearMonthDay10.toDateTimeAtMidnight();
        boolean boolean36 = property2.equals((java.lang.Object) dateTime35);
        java.lang.String str37 = property2.getName();
        org.joda.time.YearMonthDay yearMonthDay38 = property2.withMaximumValue();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property2.getAsText(locale39);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "dayOfMonth" + "'", str37, "dayOfMonth");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property8.getAsText(locale9);
        org.joda.time.YearMonthDay yearMonthDay11 = property8.getYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = yearMonthDay11.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsText(locale8);
        java.lang.String str10 = property5.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfMonth]" + "'", str10, "Property[dayOfMonth]");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay24 = property23.withMaximumValue();
        org.joda.time.DurationField durationField25 = property23.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.withMonthOfYear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minus(readablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonthDay33.toInterval(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay33.toDateMidnight(dateTimeZone36);
        int int38 = property23.compareTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusMonths((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay16.toDateTime(timeOfDay19);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = yearMonthDay12.toString("1970-01-01", locale14);
        java.lang.String str16 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears((int) (byte) -1);
        boolean boolean19 = property7.equals((java.lang.Object) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay21 = property7.addToCopy(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = yearMonthDay21.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        java.lang.Object obj17 = null;
        boolean boolean18 = property16.equals(obj17);
        org.joda.time.DurationField durationField19 = property16.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = yearMonthDay1.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withPeriodAdded(readablePeriod12, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology8 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = yearMonthDay10.toString("1970-01-01", locale12);
        java.lang.String str14 = yearMonthDay10.toString();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay10.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate17 = yearMonthDay10.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay10.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withPeriodAdded(readablePeriod43, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minus(readablePeriod48);
        int int50 = yearMonthDay49.getMonthOfYear();
        int[] intArray51 = yearMonthDay49.getValues();
        boolean boolean52 = yearMonthDay10.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        boolean boolean53 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        int[] intArray54 = yearMonthDay49.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = yearMonthDay49.getField(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1]");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.DurationField durationField12 = property7.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay14 = property7.setCopy("1969-09-23");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-09-23\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(11, (int) (short) 1, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        java.lang.String str11 = property2.getName();
        java.lang.String str12 = property2.getAsText();
        org.joda.time.YearMonthDay yearMonthDay14 = property2.addWrapFieldToCopy(1969);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int18 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay20 = property2.addWrapFieldToCopy(2);
        java.lang.String str21 = property2.getAsText();
        java.lang.String str22 = property2.getAsShortText();
        int int23 = property2.getMaximumValueOverall();
        java.util.Locale locale24 = null;
        int int25 = property2.getMaximumTextLength(locale24);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.plusMonths(1970);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.minusYears(3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay1.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths(31);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minus(readablePeriod34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay31.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.YearMonthDay yearMonthDay45 = property39.setCopy((int) (short) 1);
        java.util.Locale locale46 = null;
        java.lang.String str47 = property39.getAsShortText(locale46);
        java.lang.String str48 = property39.getName();
        boolean boolean49 = yearMonthDay31.equals((java.lang.Object) str48);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonthDay51.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay51.toDateMidnight();
        java.lang.String str57 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay59.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay61 = property60.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        java.util.Locale locale63 = null;
        java.lang.String str64 = property60.getAsText(locale63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property60.getFieldType();
        int int66 = yearMonthDay51.get(dateTimeFieldType65);
        int int67 = yearMonthDay31.indexOf(dateTimeFieldType65);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay31.minusYears(10);
        int int70 = yearMonthDay19.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "dayOfMonth" + "'", str48, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01" + "'", str57, "1970-01-01");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        int int29 = property28.getMaximumValue();
        int int30 = property28.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay32 = property28.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay1.property(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = yearMonthDay1.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay15.toDateMidnight();
        java.lang.String str21 = yearMonthDay15.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay25 = property24.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property24.getAsText(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        int int30 = yearMonthDay15.get(dateTimeFieldType29);
        int int31 = yearMonthDay15.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay33.toDateMidnight();
        java.lang.String str39 = yearMonthDay33.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = yearMonthDay33.getFields();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay42.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay44 = property43.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField45 = property43.getField();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property43.getAsText(locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        boolean boolean49 = yearMonthDay33.isSupported(dateTimeFieldType48);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay15.property(dateTimeFieldType48);
        int int51 = yearMonthDay11.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay11.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        java.lang.String str15 = property7.getAsText();
        org.joda.time.DurationField durationField16 = property7.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay18 = property7.addToCopy((-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.Interval interval6 = yearMonthDay1.toInterval();
        int[] intArray7 = yearMonthDay1.getValues();
        int int8 = yearMonthDay1.getYear();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay1.monthOfYear();
        int int10 = yearMonthDay1.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = yearMonthDay1.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.lang.String str30 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay31 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay32 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusYears(1969);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonthDay41.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusYears((int) 'a');
        org.joda.time.DateTime dateTime46 = yearMonthDay41.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay41.withPeriodAdded(readablePeriod47, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay49.minus(readablePeriod52);
        org.joda.time.Chronology chronology54 = yearMonthDay49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay38.withChronologyRetainFields(chronology54);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay34, chronology54);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusDays((int) '4');
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.minus(readablePeriod59);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withPeriodAdded(readablePeriod13, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.monthOfYear();
        boolean boolean21 = property2.equals((java.lang.Object) yearMonthDay19);
        java.lang.String str22 = property2.getAsShortText();
        java.lang.String str23 = property2.getAsString();
        int int24 = property2.getMaximumValueOverall();
        java.util.Locale locale25 = null;
        int int26 = property2.getMaximumShortTextLength(locale25);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate14 = yearMonthDay11.toLocalDate();
        org.joda.time.DateTime dateTime15 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay11.toDateMidnight();
        java.lang.String str17 = yearMonthDay11.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = yearMonthDay11.getFields();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property21.getAsText(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        boolean boolean27 = yearMonthDay11.isSupported(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay11.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusMonths(31);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight52 = yearMonthDay47.toDateMidnight();
        java.lang.String str53 = yearMonthDay47.toString();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay55.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay57 = property56.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property56.getAsText(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property56.getFieldType();
        int int62 = yearMonthDay47.get(dateTimeFieldType61);
        int int63 = yearMonthDay47.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = yearMonthDay65.indexOf(dateTimeFieldType66);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay65.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay65.toDateMidnight();
        java.lang.String str71 = yearMonthDay65.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = yearMonthDay65.getFields();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property75 = yearMonthDay74.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay76 = property75.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField77 = property75.getField();
        java.util.Locale locale78 = null;
        java.lang.String str79 = property75.getAsText(locale78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property75.getFieldType();
        boolean boolean81 = yearMonthDay65.isSupported(dateTimeFieldType80);
        org.joda.time.YearMonthDay.Property property82 = yearMonthDay47.property(dateTimeFieldType80);
        int int83 = yearMonthDay43.indexOf(dateTimeFieldType80);
        int int84 = yearMonthDay29.get(dateTimeFieldType80);
        int int85 = yearMonthDay9.get(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01" + "'", str53, "1970-01-01");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01" + "'", str71, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 31 + "'", int85 == 31);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean20 = yearMonthDay1.isAfter((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay17.plus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay17.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay24.withPeriodAdded(readablePeriod27, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withMonthOfYear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = yearMonthDay9.toString("1970-01-01", locale11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay9.dayOfMonth();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = property13.setCopy("1", locale15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonthDay30.toInterval(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.withYear((int) (short) 1);
        boolean boolean35 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) yearMonthDay34);
        boolean boolean36 = yearMonthDay7.isBefore((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay16.withMonthOfYear(3);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay38.toDateMidnight(dateTimeZone39);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minus(readablePeriod16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay29.toDateMidnight();
        java.lang.String str35 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonthDay29.get(dateTimeFieldType43);
        int int45 = yearMonthDay9.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay9.minusYears(1);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay49.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property50.getAsText(locale53);
        org.joda.time.YearMonthDay yearMonthDay56 = property50.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay57 = property50.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale61 = null;
        java.lang.String str62 = yearMonthDay59.toString("1970-01-01", locale61);
        java.lang.String str63 = yearMonthDay59.toString();
        boolean boolean64 = yearMonthDay57.isBefore((org.joda.time.ReadablePartial) yearMonthDay59);
        boolean boolean65 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay59);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay9.minusDays(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.minus(readablePeriod27);
        org.joda.time.LocalDate localDate29 = yearMonthDay19.toLocalDate();
        boolean boolean30 = yearMonthDay13.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTime dateTime31 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.dayOfMonth();
        java.lang.String str37 = property36.toString();
        java.lang.String str38 = property36.getName();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property36.getAsText(locale39);
        org.joda.time.YearMonthDay yearMonthDay42 = property36.addToCopy(100);
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = yearMonthDay13.toString("1970-04-11", locale46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[dayOfMonth]" + "'", str37, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayOfMonth" + "'", str38, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-04-11" + "'", str47, "1970-04-11");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        java.lang.String str6 = property2.getAsString();
        java.lang.String str7 = property2.getAsString();
        java.lang.String str8 = property2.getAsString();
        org.joda.time.YearMonthDay yearMonthDay9 = property2.getYearMonthDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.Locale locale16 = null;
        java.lang.String str17 = yearMonthDay11.toString("1", locale16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay28.toString("1970-01-01", locale34);
        boolean boolean36 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay28);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.YearMonthDay yearMonthDay44 = property39.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay46 = property39.addToCopy((int) (short) 100);
        java.lang.String str47 = property39.getAsText();
        org.joda.time.YearMonthDay yearMonthDay48 = property39.withMinimumValue();
        int int49 = yearMonthDay11.compareTo((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay11.minusMonths(0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        int int14 = property7.getMinimumValue();
        java.lang.String str15 = property7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay17 = property7.setCopy(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusYears((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay7.monthOfYear();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsText(locale14);
        java.lang.String str16 = property13.getAsText();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        boolean boolean25 = property13.equals((java.lang.Object) yearMonthDay24);
        org.joda.time.YearMonthDay yearMonthDay26 = property13.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay26.withPeriodAdded(readablePeriod27, 12);
        boolean boolean30 = yearMonthDay3.isBefore((org.joda.time.ReadablePartial) yearMonthDay26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay26.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "January" + "'", str16, "January");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsShortText(locale12);
        org.joda.time.YearMonthDay yearMonthDay14 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay15 = property7.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property7.getField();
        org.joda.time.YearMonthDay yearMonthDay18 = property7.addToCopy((-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan" + "'", str13, "Jan");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.withDayOfMonth(1);
        boolean boolean21 = yearMonthDay17.equals((java.lang.Object) (short) -1);
        boolean boolean22 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight();
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        int int6 = property5.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = property5.addToCopy((int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property2.getAsShortText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property2.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay9.monthOfYear();
        java.util.Locale locale16 = null;
        int int17 = property15.getMaximumTextLength(locale16);
        java.lang.String str18 = property15.getAsText();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone34);
        int int36 = property15.compareTo((org.joda.time.ReadableInstant) dateTime35);
        int int37 = property15.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay39 = property15.addToCopy((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale43 = null;
        java.lang.String str44 = yearMonthDay41.toString("1970-01-01", locale43);
        java.lang.String str45 = yearMonthDay41.toString();
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay41.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay49.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay51 = property50.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = yearMonthDay51.toString(dateTimeFormatter52);
        boolean boolean54 = yearMonthDay41.isBefore((org.joda.time.ReadablePartial) yearMonthDay51);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonthDay56.indexOf(dateTimeFieldType57);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay56.minusYears((int) 'a');
        org.joda.time.DateTime dateTime61 = yearMonthDay56.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay56.monthOfYear();
        java.util.Locale locale63 = null;
        int int64 = property62.getMaximumTextLength(locale63);
        java.lang.String str65 = property62.getAsText();
        org.joda.time.YearMonthDay yearMonthDay67 = property62.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay69 = property62.addToCopy(0);
        boolean boolean70 = yearMonthDay51.isEqual((org.joda.time.ReadablePartial) yearMonthDay69);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        int int74 = yearMonthDay72.indexOf(dateTimeFieldType73);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay72.minusYears((int) 'a');
        org.joda.time.DateTime dateTime77 = yearMonthDay72.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay72.withPeriodAdded(readablePeriod78, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay80.withDayOfMonth(1);
        boolean boolean84 = yearMonthDay80.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay80.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime87 = yearMonthDay80.toDateTimeAtCurrentTime();
        boolean boolean88 = yearMonthDay51.equals((java.lang.Object) dateTime87);
        org.joda.time.DateTime dateTime89 = yearMonthDay39.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int int90 = property2.compareTo((org.joda.time.ReadableInstant) dateTime87);
        java.util.Locale locale91 = null;
        int int92 = property2.getMaximumTextLength(locale91);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "January" + "'", str18, "January");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01" + "'", str53, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "January" + "'", str65, "January");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.plusMonths(1970);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology34 = yearMonthDay33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = property37.withMinimumValue();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property37.getAsShortText(locale39);
        org.joda.time.DateTimeField dateTimeField41 = property37.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay33.property(dateTimeFieldType42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay13.property(dateTimeFieldType42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay13.withPeriodAdded(readablePeriod45, 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay7 = property5.addToCopy((int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withMonthOfYear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plus(readablePeriod6);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate6 = yearMonthDay5.toLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay31 = property7.addToCopy((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay33 = property7.addToCopy(10);
        java.util.Locale locale34 = null;
        int int35 = property7.getMaximumShortTextLength(locale34);
        java.util.Locale locale36 = null;
        java.lang.String str37 = property7.getAsText(locale36);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "January" + "'", str37, "January");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withPeriodAdded(readablePeriod13, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.monthOfYear();
        boolean boolean21 = property2.equals((java.lang.Object) yearMonthDay19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay23.toDateMidnight(dateTimeZone24);
        int int26 = yearMonthDay23.getYear();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.year();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay23.withMonthOfYear(3);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.minusMonths((int) 'a');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.plusYears((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay18.toDateMidnight();
        java.lang.String str24 = yearMonthDay18.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = yearMonthDay18.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay18.minus(readablePeriod26);
        org.joda.time.LocalDate localDate28 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonthDay30.indexOf(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay30.toDateMidnight();
        java.lang.String str36 = yearMonthDay30.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = yearMonthDay30.get(dateTimeFieldType44);
        int int46 = yearMonthDay30.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonthDay48.indexOf(dateTimeFieldType49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay48.toDateMidnight();
        java.lang.String str54 = yearMonthDay48.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = yearMonthDay48.getFields();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay57.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay59 = property58.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        java.util.Locale locale61 = null;
        java.lang.String str62 = property58.getAsText(locale61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property58.getFieldType();
        boolean boolean64 = yearMonthDay48.isSupported(dateTimeFieldType63);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay30.property(dateTimeFieldType63);
        int int66 = localDate28.get(dateTimeFieldType63);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay16.property(dateTimeFieldType63);
        org.joda.time.YearMonthDay yearMonthDay69 = property67.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonthDay74.indexOf(dateTimeFieldType75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.minusYears((int) 'a');
        org.joda.time.DateTime dateTime79 = yearMonthDay74.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay74.withPeriodAdded(readablePeriod80, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay82.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay84.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology87 = yearMonthDay86.getChronology();
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((long) (short) -1, chronology87);
        org.joda.time.YearMonthDay yearMonthDay89 = new org.joda.time.YearMonthDay((long) 9, chronology87);
        org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay(chronology87);
        boolean boolean91 = property70.equals((java.lang.Object) yearMonthDay90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(25, 1, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonthDay14.toInterval(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay20.toDateMidnight();
        java.lang.String str26 = yearMonthDay20.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = yearMonthDay20.getFields();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay20.minus(readablePeriod28);
        org.joda.time.LocalDate localDate30 = yearMonthDay20.toLocalDate();
        boolean boolean31 = yearMonthDay14.isBefore((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTime dateTime32 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime33 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale38 = null;
        java.lang.String str39 = yearMonthDay36.toString("1970-01-01", locale38);
        java.lang.String str40 = yearMonthDay36.toString();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay36.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate43 = yearMonthDay36.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology59 = yearMonthDay58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) -1, chronology59);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay36.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) 10, chronology59);
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay14, chronology59);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) 1, chronology59);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.minusDays((int) '#');
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay64.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay64.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01" + "'", str40, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusMonths(1873);
        org.joda.time.LocalDate localDate16 = yearMonthDay15.toLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minus(readablePeriod39);
        int int41 = yearMonthDay40.getMonthOfYear();
        int[] intArray42 = yearMonthDay40.getValues();
        boolean boolean43 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay40);
        org.joda.time.Chronology chronology44 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology44);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusDays(100);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay1.withDayOfMonth(31);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = yearMonthDay12.toString("1970-01-01", locale14);
        java.lang.String str16 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears((int) (byte) -1);
        boolean boolean19 = property7.equals((java.lang.Object) yearMonthDay18);
        java.util.Locale locale21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = property7.setCopy("Jan", locale21);
        java.lang.String str23 = property7.getAsString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        int int7 = yearMonthDay5.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay5.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        boolean boolean23 = yearMonthDay19.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonthDay25.indexOf(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay25.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay25.minus(readablePeriod31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonthDay34.indexOf(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusYears((int) 'a');
        org.joda.time.DateTime dateTime39 = yearMonthDay34.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay34.withPeriodAdded(readablePeriod40, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minus(readablePeriod45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusYears(1970);
        int int49 = yearMonthDay25.compareTo((org.joda.time.ReadablePartial) yearMonthDay46);
        boolean boolean50 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay46);
        int int51 = yearMonthDay5.compareTo((org.joda.time.ReadablePartial) yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1873 + "'", int7 == 1873);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay26 = property17.withMinimumValue();
        int int27 = property17.getMinimumValue();
        org.joda.time.DurationField durationField28 = property17.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.lang.Object obj0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minus(readablePeriod13);
        int int15 = yearMonthDay14.getMonthOfYear();
        org.joda.time.Chronology chronology16 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(obj0, chronology16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        int int23 = yearMonthDay13.get(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonthDay25.indexOf(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusYears((int) 'a');
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay25.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.minusMonths(1873);
        boolean boolean40 = yearMonthDay13.isAfter((org.joda.time.ReadablePartial) yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.plusMonths(1969);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        int int26 = yearMonthDay22.getMonthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay22.toDateTime(timeOfDay27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay5.toDateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay9.toDateMidnight();
        java.lang.String str15 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property18.getAsText(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        int int24 = yearMonthDay9.get(dateTimeFieldType23);
        int int25 = yearMonthDay9.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay27.toDateMidnight();
        java.lang.String str33 = yearMonthDay27.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = yearMonthDay27.getFields();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = property37.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        boolean boolean43 = yearMonthDay27.isSupported(dateTimeFieldType42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay9.property(dateTimeFieldType42);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay5.property(dateTimeFieldType42);
        int int46 = property45.getMaximumValueOverall();
        java.lang.String str47 = property45.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dayOfMonth" + "'", str47, "dayOfMonth");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        java.lang.String str11 = property7.getAsText();
        int int12 = property7.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.plusDays(1970);
        int[] intArray20 = yearMonthDay11.getValues();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withYear(100);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.LocalDate localDate17 = yearMonthDay16.toLocalDate();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.dayOfMonth();
        java.lang.String str19 = property18.getAsText();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1, chronology15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale22 = null;
        java.lang.String str23 = yearMonthDay20.toString("1970-01-01", locale22);
        java.lang.String str24 = yearMonthDay20.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.dayOfMonth();
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        int int36 = yearMonthDay28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.plusDays(1);
        boolean boolean51 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateTime dateTime58 = yearMonthDay53.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay53.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.plusDays(1);
        boolean boolean66 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        boolean boolean67 = yearMonthDay18.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay18.minusDays(9);
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonthDay71.indexOf(dateTimeFieldType72);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay71.minusYears((int) 'a');
        org.joda.time.DateTime dateTime76 = yearMonthDay71.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay71.withPeriodAdded(readablePeriod77, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay79.minus(readablePeriod82);
        int int84 = yearMonthDay83.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay83.plusYears((int) (short) 0);
        boolean boolean87 = yearMonthDay69.isAfter((org.joda.time.ReadablePartial) yearMonthDay86);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = yearMonthDay5.indexOf(dateTimeFieldType6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.minusYears((int) 'a');
        org.joda.time.DateTime dateTime10 = yearMonthDay5.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.withPeriodAdded(readablePeriod11, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay2.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = property5.setCopy("1", locale7);
        java.lang.String str9 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfMonth" + "'", str9, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = yearMonthDay13.getField((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay13.plusDays((int) '4');
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay21 = property19.addToCopy(97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusYears((int) '4');
        int int8 = yearMonthDay1.getMonthOfYear();
        org.joda.time.Chronology chronology9 = yearMonthDay1.getChronology();
        int int11 = yearMonthDay1.getValue(2);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay1.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.monthOfYear();
        org.joda.time.Chronology chronology30 = yearMonthDay28.getChronology();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology30);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay1.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minusMonths(22);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = yearMonthDay9.toInterval(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withPeriodAdded(readablePeriod28, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minus(readablePeriod33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.YearMonthDay yearMonthDay44 = property38.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay45 = property38.withMaximumValue();
        boolean boolean46 = yearMonthDay34.equals((java.lang.Object) property38);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay50 = property49.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = yearMonthDay50.toString(dateTimeFormatter51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay50.toDateMidnight(dateTimeZone53);
        int int55 = yearMonthDay34.compareTo((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonthDay57.indexOf(dateTimeFieldType58);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay57.minusYears((int) 'a');
        org.joda.time.DateTime dateTime62 = yearMonthDay57.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay65.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay65.minus(readablePeriod68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.minusYears(1970);
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = yearMonthDay73.indexOf(dateTimeFieldType74);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay73.minusYears((int) 'a');
        org.joda.time.DateTime dateTime78 = yearMonthDay73.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay73.withPeriodAdded(readablePeriod79, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay81.withDayOfMonth(1);
        boolean boolean85 = yearMonthDay81.equals((java.lang.Object) (short) -1);
        int int86 = yearMonthDay69.compareTo((org.joda.time.ReadablePartial) yearMonthDay81);
        boolean boolean87 = yearMonthDay50.isEqual((org.joda.time.ReadablePartial) yearMonthDay69);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = yearMonthDay50.toDateMidnight(dateTimeZone88);
        boolean boolean90 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        int int23 = yearMonthDay13.get(dateTimeFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay13.minus(readablePeriod24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.minusDays((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = yearMonthDay5.toString("1970-01-01", locale7);
        java.lang.String str9 = yearMonthDay5.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = yearMonthDay15.toString(dateTimeFormatter16);
        boolean boolean18 = yearMonthDay5.isBefore((org.joda.time.ReadablePartial) yearMonthDay15);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay15.toString("1", locale20);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay15.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minus(readablePeriod35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = yearMonthDay32.toString("1970-01-01", locale38);
        boolean boolean40 = yearMonthDay15.isEqual((org.joda.time.ReadablePartial) yearMonthDay32);
        boolean boolean41 = yearMonthDay1.isAfter((org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay43.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay45 = property44.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsText(locale47);
        org.joda.time.YearMonthDay yearMonthDay50 = property44.setCopy((int) (short) 1);
        java.util.Locale locale51 = null;
        java.lang.String str52 = property44.getAsShortText(locale51);
        org.joda.time.YearMonthDay yearMonthDay54 = property44.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay56 = property44.addToCopy(3);
        boolean boolean57 = yearMonthDay15.isBefore((org.joda.time.ReadablePartial) yearMonthDay56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTimeAtMidnight(dateTimeZone58);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = yearMonthDay20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay10.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minus(readablePeriod29);
        boolean boolean31 = yearMonthDay16.isBefore((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay30.withChronologyRetainFields(chronology38);
        int int40 = yearMonthDay30.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withPeriodAdded(readablePeriod13, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.monthOfYear();
        boolean boolean21 = property2.equals((java.lang.Object) yearMonthDay19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone24);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        java.lang.String str4 = property2.getName();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addToCopy(100);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.getYearMonthDay();
        int int10 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "dayOfMonth" + "'", str4, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = yearMonthDay32.isAfter((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonthDay53.getFields();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay62.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        boolean boolean69 = yearMonthDay53.isSupported(dateTimeFieldType68);
        boolean boolean70 = yearMonthDay32.isSupported(dateTimeFieldType68);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay28.withField(dateTimeFieldType68, 31);
        java.lang.Class<?> wildcardClass73 = dateTimeFieldType68.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonthDay14.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay14.toDateMidnight();
        java.lang.String str20 = yearMonthDay14.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = yearMonthDay14.getFields();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay25 = property24.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property24.getAsText(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        boolean boolean30 = yearMonthDay14.isSupported(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay14.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusMonths(31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minus(readablePeriod35);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = yearMonthDay40.toString(dateTimeFormatter41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTime(timeOfDay43, dateTimeZone44);
        org.joda.time.DateTime dateTime46 = yearMonthDay36.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonthDay48.indexOf(dateTimeFieldType49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.minusYears((int) 'a');
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay48.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonthDay56.indexOf(dateTimeFieldType57);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay56.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight61 = yearMonthDay56.toDateMidnight();
        java.lang.String str62 = yearMonthDay56.toString();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay64.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay66 = property65.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property65.getAsText(locale68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property65.getFieldType();
        int int71 = yearMonthDay56.get(dateTimeFieldType70);
        int int72 = yearMonthDay56.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonthDay74.indexOf(dateTimeFieldType75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight79 = yearMonthDay74.toDateMidnight();
        java.lang.String str80 = yearMonthDay74.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray81 = yearMonthDay74.getFields();
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property84 = yearMonthDay83.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay85 = property84.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField86 = property84.getField();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsText(locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        boolean boolean90 = yearMonthDay74.isSupported(dateTimeFieldType89);
        org.joda.time.YearMonthDay.Property property91 = yearMonthDay56.property(dateTimeFieldType89);
        int int92 = yearMonthDay48.indexOf(dateTimeFieldType89);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay36.withField(dateTimeFieldType89, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay12.withField(dateTimeFieldType89, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01" + "'", str42, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01" + "'", str80, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay94);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay13 = property7.addToCopy((int) (short) 10);
        java.lang.String str14 = property7.getName();
        java.util.Locale locale15 = null;
        int int16 = property7.getMaximumTextLength(locale15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        java.lang.String str11 = property2.getName();
        java.lang.String str12 = property2.getAsText();
        org.joda.time.YearMonthDay yearMonthDay13 = property2.withMinimumValue();
        java.util.Locale locale14 = null;
        int int15 = property2.getMaximumTextLength(locale14);
        java.util.Locale locale16 = null;
        java.lang.String str17 = property2.getAsShortText(locale16);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.Chronology chronology15 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay13.minus(readablePeriod17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = yearMonthDay9.toString("1970-01-01", locale11);
        java.lang.String str13 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate16 = yearMonthDay9.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1, chronology32);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay9.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) 10, chronology32);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology32);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) 1, chronology32);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((int) (short) 0, 9, (int) (byte) 0, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay3.minus(readablePeriod8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withMonthOfYear((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property18.getAsShortText(locale20);
        org.joda.time.DateTimeField dateTimeField22 = property18.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        int int24 = yearMonthDay11.get(dateTimeFieldType23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay3.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = yearMonthDay3.toLocalDate();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.withDayOfMonth(1);
        boolean boolean21 = yearMonthDay17.equals((java.lang.Object) (short) -1);
        boolean boolean22 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight();
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        java.lang.Class<?> wildcardClass25 = chronology24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        java.lang.String str15 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay16 = property7.withMaximumValue();
        int int17 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay18 = property7.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        int int29 = property28.getMaximumValue();
        int int30 = property28.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay32 = property28.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay1.property(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = yearMonthDay1.toDateMidnight(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.year();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonthDay17.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay17.minusDays((int) (short) 1);
        int int26 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        int int27 = yearMonthDay17.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        int[] intArray15 = yearMonthDay13.getValues();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.plusMonths(0);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonthDay33.toInterval(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = yearMonthDay33.getFields();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.withPeriodAdded(readablePeriod45, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minus(readablePeriod50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay47.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = yearMonthDay54.indexOf(dateTimeFieldType55);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minusYears((int) 'a');
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay54.withPeriodAdded(readablePeriod60, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay62.minus(readablePeriod65);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay66.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTimeAtCurrentTime(dateTimeZone68);
        int int70 = property52.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int71 = property52.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property52.getFieldType();
        int int73 = yearMonthDay33.indexOf(dateTimeFieldType72);
        int int74 = yearMonthDay19.get(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property9.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = property9.withMaximumValue();
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withChronologyRetainFields(chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.minusDays(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonthDay34.indexOf(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusYears((int) 'a');
        org.joda.time.DateTime dateTime39 = yearMonthDay34.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay34.withPeriodAdded(readablePeriod40, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minus(readablePeriod45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTimeAtCurrentTime(dateTimeZone48);
        int int50 = property32.compareTo((org.joda.time.ReadableInstant) dateTime49);
        int int51 = property32.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property32.getFieldType();
        int int53 = yearMonthDay13.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay13.monthOfYear();
        int int55 = yearMonthDay13.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = property5.setCopy("1", locale7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonthDay22.toInterval(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.withYear((int) (short) 1);
        boolean boolean27 = yearMonthDay8.isEqual((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale31 = null;
        java.lang.String str32 = yearMonthDay29.toString("1970-01-01", locale31);
        java.lang.String str33 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay29.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate36 = yearMonthDay29.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.withPeriodAdded(readablePeriod45, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology52 = yearMonthDay51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1, chronology52);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay29.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay8, chronology52);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusDays((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay58);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay13 = property7.addToCopy((int) (short) 10);
        int int14 = property7.getMinimumValueOverall();
        java.lang.String str15 = property7.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonthDay14.toInterval(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay14.toDateTime(readableInstant18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withPeriodAdded(readablePeriod28, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1, chronology35);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay14, chronology35);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) 1, chronology35);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        int int42 = property41.getMaximumValue();
        int int43 = property41.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay45 = property41.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        boolean boolean47 = yearMonthDay38.equals((java.lang.Object) property41);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 31 + "'", int42 == 31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.minus(readablePeriod27);
        org.joda.time.LocalDate localDate29 = yearMonthDay19.toLocalDate();
        boolean boolean30 = yearMonthDay13.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay42 = property41.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        int int47 = yearMonthDay32.get(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay32.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay32);
        boolean boolean51 = yearMonthDay13.isAfter((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay50.plusYears((-292275054));
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonthDay55.indexOf(dateTimeFieldType56);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minusYears((int) 'a');
        org.joda.time.DateTime dateTime60 = yearMonthDay55.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay55.withPeriodAdded(readablePeriod61, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay63.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay63.plusDays(1);
        int int68 = yearMonthDay63.getYear();
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay63.year();
        org.joda.time.YearMonthDay yearMonthDay71 = property69.addToCopy(0);
        boolean boolean72 = yearMonthDay53.isBefore((org.joda.time.ReadablePartial) yearMonthDay71);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withMonthOfYear((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = yearMonthDay1.getFields();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minus(readablePeriod39);
        int int41 = yearMonthDay40.getMonthOfYear();
        int[] intArray42 = yearMonthDay40.getValues();
        boolean boolean43 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay1.plus(readablePeriod44);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusMonths((int) (short) 10);
        int int50 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsText(locale56);
        org.joda.time.YearMonthDay yearMonthDay59 = property53.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay60 = property53.withMaximumValue();
        org.joda.time.Chronology chronology61 = yearMonthDay60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay49, chronology61);
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(chronology61);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology61);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = yearMonthDay32.isAfter((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonthDay53.getFields();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay62.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        boolean boolean69 = yearMonthDay53.isSupported(dateTimeFieldType68);
        boolean boolean70 = yearMonthDay32.isSupported(dateTimeFieldType68);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay28.withField(dateTimeFieldType68, 31);
        org.joda.time.Chronology chronology73 = yearMonthDay72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay77.dayOfMonth();
        java.util.Locale locale79 = null;
        int int80 = property78.getMaximumTextLength(locale79);
        org.joda.time.DurationField durationField81 = property78.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property84 = yearMonthDay83.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay85 = property84.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField86 = property84.getField();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsText(locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        int int90 = property84.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay92 = property84.addToCopy(97);
        int int93 = property78.compareTo((org.joda.time.ReadablePartial) yearMonthDay92);
        boolean boolean94 = yearMonthDay72.isBefore((org.joda.time.ReadablePartial) yearMonthDay92);
        org.joda.time.DateTimeZone dateTimeZone95 = null;
        org.joda.time.Interval interval96 = yearMonthDay72.toInterval(dateTimeZone95);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 31 + "'", int90 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay13.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay49 = property16.setCopy(3);
        int int50 = property16.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay51 = property16.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property7.getAsShortText(locale11);
        org.joda.time.DurationField durationField13 = property7.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property7.getField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property7.getAsText(locale15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "January" + "'", str16, "January");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay3.minus(readablePeriod8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withMonthOfYear((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property18.getAsShortText(locale20);
        org.joda.time.DateTimeField dateTimeField22 = property18.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        int int24 = yearMonthDay11.get(dateTimeFieldType23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay3.property(dateTimeFieldType23);
        org.joda.time.DurationField durationField26 = property25.getRangeDurationField();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumTextLength(locale27);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minus(readablePeriod29);
        boolean boolean31 = yearMonthDay16.isBefore((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay30.withChronologyRetainFields(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay30.withDayOfMonth(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.LocalDate localDate17 = yearMonthDay16.toLocalDate();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumShortTextLength(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = property7.setCopy(2);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale18 = null;
        java.lang.String str19 = yearMonthDay16.toString("1970-01-01", locale18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        boolean boolean22 = yearMonthDay11.equals((java.lang.Object) property20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property2.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        boolean boolean15 = property2.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay16 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withYear((int) (short) 10);
        java.lang.String str19 = yearMonthDay16.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-31" + "'", str19, "1970-01-31");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears(1970);
        int int25 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay1.toDateMidnight();
        org.joda.time.DateTime dateTime27 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusDays((-1));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = yearMonthDay1.get(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = yearMonthDay1.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay11.monthOfYear();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumTextLength(locale18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay21.monthOfYear();
        int int28 = property17.compareTo((org.joda.time.ReadablePartial) yearMonthDay21);
        int[] intArray29 = yearMonthDay21.getValues();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonthDay31.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minusYears((int) 'a');
        org.joda.time.DateTime dateTime36 = yearMonthDay31.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay31.monthOfYear();
        java.util.Locale locale38 = null;
        int int39 = property37.getMaximumShortTextLength(locale38);
        org.joda.time.YearMonthDay yearMonthDay41 = property37.setCopy(2);
        int int42 = property37.getMaximumValueOverall();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property37.getAsText(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property37.getFieldType();
        int int46 = yearMonthDay21.get(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay9.withField(dateTimeFieldType45, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "January" + "'", str44, "January");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        java.lang.String str24 = property23.getAsText();
        java.lang.String str25 = property23.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        int int12 = yearMonthDay8.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = yearMonthDay20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay10.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonthDay26.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay26.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonthDay31.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight36 = yearMonthDay31.toDateMidnight();
        java.lang.String str37 = yearMonthDay31.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = yearMonthDay31.getFields();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay42 = property41.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        boolean boolean47 = yearMonthDay31.isSupported(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay31.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay31.dayOfMonth();
        boolean boolean51 = yearMonthDay26.equals((java.lang.Object) property50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale55 = null;
        java.lang.String str56 = yearMonthDay53.toString("1970-01-01", locale55);
        java.lang.String str57 = yearMonthDay53.toString();
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay53.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay61.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay63 = property62.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = yearMonthDay63.toString(dateTimeFormatter64);
        boolean boolean66 = yearMonthDay53.isBefore((org.joda.time.ReadablePartial) yearMonthDay63);
        java.util.Locale locale68 = null;
        java.lang.String str69 = yearMonthDay63.toString("1", locale68);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay63.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay63.plusYears((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay63.plusMonths(1970);
        int int75 = yearMonthDay26.compareTo((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay26.minusDays((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01" + "'", str57, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay77);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        boolean boolean13 = yearMonthDay9.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        boolean boolean21 = property19.equals((java.lang.Object) '4');
        java.lang.String str22 = property19.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property19.getFieldType();
        boolean boolean24 = yearMonthDay9.equals((java.lang.Object) property19);
        org.joda.time.DateTimeField dateTimeField25 = property19.getField();
        java.lang.Class<?> wildcardClass26 = property19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.Chronology chronology14 = yearMonthDay9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.minusDays(0);
        int int17 = yearMonthDay9.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.withDayOfMonth(1);
        boolean boolean21 = yearMonthDay17.equals((java.lang.Object) (short) -1);
        boolean boolean22 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight();
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay17.dayOfMonth();
        int int26 = property25.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plus(readablePeriod18);
        int int20 = yearMonthDay19.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        int int16 = yearMonthDay13.getYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtMidnight(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1, chronology15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology15);
        java.lang.Class<?> wildcardClass19 = yearMonthDay18.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.lang.String str4 = property2.getAsText();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumShortTextLength(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property2.getMaximumTextLength(locale6);
        java.lang.String str8 = property2.toString();
        org.joda.time.YearMonthDay yearMonthDay10 = property2.addWrapFieldToCopy(1970);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay14.toDateMidnight(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonthDay45.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minusYears((int) 'a');
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay45.withPeriodAdded(readablePeriod51, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minus(readablePeriod56);
        int int58 = yearMonthDay57.getMonthOfYear();
        int[] intArray59 = yearMonthDay57.getValues();
        boolean boolean60 = yearMonthDay18.isBefore((org.joda.time.ReadablePartial) yearMonthDay57);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay18.plus(readablePeriod61);
        boolean boolean63 = yearMonthDay14.isBefore((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay18.withYear((int) 'a');
        int int66 = yearMonthDay65.size();
        int int67 = yearMonthDay65.getDayOfMonth();
        java.lang.Class<?> wildcardClass68 = yearMonthDay65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay7 = property2.setCopy("2002-01-01", locale6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2002-01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = yearMonthDay1.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withPeriodAdded(readablePeriod12, (int) ' ');
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonthDay17.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) 'a');
        org.joda.time.DateTime dateTime22 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay17.monthOfYear();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property23.getAsText(locale24);
        org.joda.time.YearMonthDay yearMonthDay26 = property23.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        boolean boolean41 = property23.equals((java.lang.Object) yearMonthDay40);
        int int42 = yearMonthDay40.size();
        java.lang.String str43 = yearMonthDay40.toString();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay40.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay45.toDateTimeAtMidnight(dateTimeZone48);
        int int50 = property15.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "January" + "'", str25, "January");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property14.compareTo((org.joda.time.ReadableInstant) dateTime31);
        java.lang.String str33 = property14.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        java.lang.String str11 = property7.getAsShortText();
        int int12 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay13 = property7.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = property7.setCopy("1970-01-31");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-31\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay16.monthOfYear();
        java.util.Locale locale23 = null;
        int int24 = property22.getMaximumTextLength(locale23);
        java.lang.String str25 = property22.getAsText();
        org.joda.time.YearMonthDay yearMonthDay27 = property22.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay29 = property22.addToCopy(0);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateTime dateTime37 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay32.withPeriodAdded(readablePeriod38, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minus(readablePeriod43);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay49 = property48.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property48.getAsText(locale51);
        org.joda.time.YearMonthDay yearMonthDay54 = property48.setCopy((int) (short) 1);
        java.util.Locale locale55 = null;
        java.lang.String str56 = property48.getAsShortText(locale55);
        java.lang.String str57 = property48.getName();
        boolean boolean58 = yearMonthDay40.equals((java.lang.Object) str57);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = yearMonthDay60.indexOf(dateTimeFieldType61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay60.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay60.toDateMidnight();
        java.lang.String str66 = yearMonthDay60.toString();
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay68.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay70 = property69.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField71 = property69.getField();
        java.util.Locale locale72 = null;
        java.lang.String str73 = property69.getAsText(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        int int75 = yearMonthDay60.get(dateTimeFieldType74);
        int int76 = yearMonthDay40.indexOf(dateTimeFieldType74);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = yearMonthDay78.indexOf(dateTimeFieldType79);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay78.minusYears((int) 'a');
        org.joda.time.DateTime dateTime83 = yearMonthDay78.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay78.withPeriodAdded(readablePeriod84, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay86.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay88.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology91 = yearMonthDay90.getChronology();
        org.joda.time.YearMonthDay yearMonthDay92 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay40, chronology91);
        boolean boolean93 = yearMonthDay11.equals((java.lang.Object) chronology91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay11.withDayOfMonth((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "January" + "'", str25, "January");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "dayOfMonth" + "'", str57, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01" + "'", str66, "1970-01-01");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        boolean boolean13 = yearMonthDay9.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay9.year();
        java.lang.String str19 = yearMonthDay9.toString("1813-12-02");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1813-12-02" + "'", str19, "1813-12-02");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property8.getAsText(locale9);
        org.joda.time.YearMonthDay yearMonthDay11 = property8.getYearMonthDay();
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        int int14 = property8.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.lang.String str4 = property2.getAsText();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumShortTextLength(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = yearMonthDay7.getDayOfMonth();
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((int) (short) 100, (int) (short) 1, 11);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = yearMonthDay5.toString("1970-01-01", locale7);
        java.lang.String str9 = yearMonthDay5.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate12 = yearMonthDay5.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay5.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay3.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(chronology28);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay3.minus(readablePeriod8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay11.monthOfYear();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumTextLength(locale18);
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        int int21 = property17.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay23 = property17.addToCopy((int) (short) 10);
        boolean boolean24 = yearMonthDay3.isAfter((org.joda.time.ReadablePartial) yearMonthDay23);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonthDay5.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.plusYears((int) '#');
        boolean boolean15 = yearMonthDay5.isEqual((org.joda.time.ReadablePartial) yearMonthDay8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.minus(readablePeriod7);
        java.lang.String str10 = yearMonthDay8.toString("1970-01-02");
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.minus(readablePeriod11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-02" + "'", str10, "1970-01-02");
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        int int7 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withPeriodAdded(readablePeriod4, (int) (short) -1);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        int int8 = property7.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(1);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property9.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = property9.withMaximumValue();
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withChronologyRetainFields(chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusYears((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay19.toDateMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = yearMonthDay1.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withPeriodAdded(readablePeriod12, (int) ' ');
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.plus(readablePeriod16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(10, 11, (int) (short) 10);
        java.lang.String str4 = yearMonthDay3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0010-11-10" + "'", str4, "0010-11-10");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.lang.String str30 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay31 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay32 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonthDay36.indexOf(dateTimeFieldType37);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minusYears((int) 'a');
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay36.withPeriodAdded(readablePeriod42, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minus(readablePeriod47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.minusYears(1970);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.plusMonths(1873);
        int int53 = yearMonthDay34.compareTo((org.joda.time.ReadablePartial) yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        java.lang.String str4 = property2.getName();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addToCopy(100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.year();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay8.plusYears((int) (byte) 0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "dayOfMonth" + "'", str4, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = yearMonthDay1.get(dateTimeFieldType15);
        int int17 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        boolean boolean35 = yearMonthDay19.isSupported(dateTimeFieldType34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay1.property(dateTimeFieldType34);
        org.joda.time.DurationField durationField37 = property36.getRangeDurationField();
        java.lang.String str38 = property36.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayOfMonth" + "'", str38, "dayOfMonth");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology8 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = yearMonthDay10.toString("1970-01-01", locale12);
        java.lang.String str14 = yearMonthDay10.toString();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay10.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate17 = yearMonthDay10.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay10.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withPeriodAdded(readablePeriod43, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minus(readablePeriod48);
        int int50 = yearMonthDay49.getMonthOfYear();
        int[] intArray51 = yearMonthDay49.getValues();
        boolean boolean52 = yearMonthDay10.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        boolean boolean53 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay49.dayOfMonth();
        int int55 = property54.getMinimumValue();
        java.util.Locale locale56 = null;
        int int57 = property54.getMaximumShortTextLength(locale56);
        int int58 = property54.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean20 = yearMonthDay1.isAfter((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay1.minusDays((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.dayOfMonth();
        int int26 = property25.getMaximumValue();
        int int27 = property25.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay29 = property25.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonthDay31.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight36 = yearMonthDay31.toDateMidnight();
        java.lang.String str37 = yearMonthDay31.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = yearMonthDay31.getFields();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay42 = property41.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        boolean boolean47 = yearMonthDay31.isSupported(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay31.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.plusMonths(31);
        boolean boolean52 = yearMonthDay29.isEqual((org.joda.time.ReadablePartial) yearMonthDay49);
        boolean boolean53 = yearMonthDay22.isEqual((org.joda.time.ReadablePartial) yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.LocalDate localDate12 = yearMonthDay9.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval(dateTimeZone13);
        int int15 = yearMonthDay9.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        java.lang.String str17 = yearMonthDay9.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        org.joda.time.YearMonthDay yearMonthDay12 = property2.addWrapFieldToCopy((int) (short) 100);
        java.util.Locale locale13 = null;
        int int14 = property2.getMaximumShortTextLength(locale13);
        java.util.Locale locale15 = null;
        int int16 = property2.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay31.dayOfMonth();
        int int33 = property32.getMaximumValue();
        boolean boolean34 = property7.equals((java.lang.Object) property32);
        java.lang.String str35 = property32.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay36 = property32.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = yearMonthDay32.isAfter((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonthDay53.getFields();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay62.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        boolean boolean69 = yearMonthDay53.isSupported(dateTimeFieldType68);
        boolean boolean70 = yearMonthDay32.isSupported(dateTimeFieldType68);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay28.withField(dateTimeFieldType68, 31);
        org.joda.time.Chronology chronology73 = yearMonthDay72.getChronology();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay72.withPeriodAdded(readablePeriod74, 12);
        org.joda.time.YearMonthDay.Property property77 = yearMonthDay76.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.util.Locale locale30 = null;
        java.lang.String str31 = property7.getAsText(locale30);
        int int32 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay33 = property7.getYearMonthDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "January" + "'", str31, "January");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        java.lang.String str11 = property2.getName();
        org.joda.time.YearMonthDay yearMonthDay13 = property2.setCopy(10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plus(readablePeriod18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minus(readablePeriod32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay29.dayOfMonth();
        int int35 = yearMonthDay17.compareTo((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.plusDays((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay29.withFieldAdded(durationFieldType38, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay37);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale19 = null;
        java.lang.String str20 = yearMonthDay17.toString("1970-01-01", locale19);
        java.lang.String str21 = yearMonthDay17.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate24 = yearMonthDay17.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.withPeriodAdded(readablePeriod33, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1, chronology40);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay17.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(0L, chronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight52 = yearMonthDay47.toDateMidnight();
        java.lang.String str53 = yearMonthDay47.toString();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonthDay55.indexOf(dateTimeFieldType56);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minusYears((int) 'a');
        org.joda.time.DateTime dateTime60 = yearMonthDay55.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay55.withPeriodAdded(readablePeriod61, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTimeAtMidnight(dateTimeZone64);
        boolean boolean66 = yearMonthDay47.isAfter((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonthDay68.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay68.toDateMidnight();
        java.lang.String str74 = yearMonthDay68.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = yearMonthDay68.getFields();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay77.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay79 = property78.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField80 = property78.getField();
        java.util.Locale locale81 = null;
        java.lang.String str82 = property78.getAsText(locale81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property78.getFieldType();
        boolean boolean84 = yearMonthDay68.isSupported(dateTimeFieldType83);
        boolean boolean85 = yearMonthDay47.isSupported(dateTimeFieldType83);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay43.withField(dateTimeFieldType83, 31);
        org.joda.time.Chronology chronology88 = yearMonthDay87.getChronology();
        boolean boolean89 = yearMonthDay9.isAfter((org.joda.time.ReadablePartial) yearMonthDay87);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay87, chronology90);
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay91.withYear(1873);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01" + "'", str53, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-01" + "'", str74, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1" + "'", str82, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(yearMonthDay93);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = yearMonthDay18.toString(dateTimeFormatter19);
        boolean boolean21 = yearMonthDay8.isBefore((org.joda.time.ReadablePartial) yearMonthDay18);
        java.util.Locale locale23 = null;
        java.lang.String str24 = yearMonthDay18.toString("1", locale23);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight();
        int int26 = property2.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        int int27 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay9.toDateMidnight();
        java.lang.String str15 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property18.getAsText(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        int int24 = yearMonthDay9.get(dateTimeFieldType23);
        int int25 = yearMonthDay9.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay27.toDateMidnight();
        java.lang.String str33 = yearMonthDay27.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = yearMonthDay27.getFields();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = property37.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        boolean boolean43 = yearMonthDay27.isSupported(dateTimeFieldType42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay9.property(dateTimeFieldType42);
        int int45 = yearMonthDay1.indexOf(dateTimeFieldType42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay1.plus(readablePeriod46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property2.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        boolean boolean15 = property2.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay16 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minus(readablePeriod35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.monthOfYear();
        boolean boolean38 = property19.equals((java.lang.Object) yearMonthDay36);
        java.lang.String str39 = property19.getAsShortText();
        java.lang.String str40 = property19.getAsString();
        org.joda.time.DurationField durationField41 = property19.getRangeDurationField();
        boolean boolean42 = yearMonthDay16.equals((java.lang.Object) property19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 9);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minus(readablePeriod14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = yearMonthDay15.getField((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay15.plusDays((int) '4');
        boolean boolean21 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay14.toDateMidnight(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonthDay45.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minusYears((int) 'a');
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay45.withPeriodAdded(readablePeriod51, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minus(readablePeriod56);
        int int58 = yearMonthDay57.getMonthOfYear();
        int[] intArray59 = yearMonthDay57.getValues();
        boolean boolean60 = yearMonthDay18.isBefore((org.joda.time.ReadablePartial) yearMonthDay57);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay18.plus(readablePeriod61);
        boolean boolean63 = yearMonthDay14.isBefore((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay18.withYear((int) 'a');
        int int66 = yearMonthDay65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = yearMonthDay65.getFieldTypes();
        org.joda.time.DateTime dateTime68 = yearMonthDay65.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay26 = property17.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property17.getFieldType();
        java.lang.String str28 = property17.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusYears(1970);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plusMonths(1873);
        org.joda.time.Chronology chronology18 = yearMonthDay13.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay14.toDateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        int int32 = yearMonthDay31.getMonthOfYear();
        org.joda.time.Chronology chronology33 = yearMonthDay31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeZone16, chronology33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay27.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.minus(readablePeriod33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay27.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minus(readablePeriod49);
        org.joda.time.Chronology chronology51 = yearMonthDay46.getChronology();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay36.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = yearMonthDay52.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay52.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonthDay57.indexOf(dateTimeFieldType58);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay57.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay57.toDateMidnight();
        java.lang.String str63 = yearMonthDay57.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = yearMonthDay57.getFields();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay66.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay68 = property67.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        java.util.Locale locale70 = null;
        java.lang.String str71 = property67.getAsText(locale70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property67.getFieldType();
        boolean boolean73 = yearMonthDay57.isSupported(dateTimeFieldType72);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay57.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay57.dayOfMonth();
        boolean boolean77 = yearMonthDay52.equals((java.lang.Object) property76);
        boolean boolean78 = yearMonthDay13.isBefore((org.joda.time.ReadablePartial) yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay14 = property7.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = yearMonthDay3.toInterval(dateTimeZone6);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) '#');
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.plusDays(12);
        int int10 = yearMonthDay7.getMonthOfYear();
        org.joda.time.LocalDate localDate11 = yearMonthDay7.toLocalDate();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1, chronology15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale22 = null;
        java.lang.String str23 = yearMonthDay20.toString("1970-01-01", locale22);
        java.lang.String str24 = yearMonthDay20.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.dayOfMonth();
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        int int36 = yearMonthDay28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.plusDays(1);
        boolean boolean51 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateTime dateTime58 = yearMonthDay53.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay53.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.plusDays(1);
        boolean boolean66 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        boolean boolean67 = yearMonthDay18.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay71 = property70.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = yearMonthDay71.toString(dateTimeFormatter72);
        org.joda.time.TimeOfDay timeOfDay74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = yearMonthDay71.toDateTime(timeOfDay74, dateTimeZone75);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((java.lang.Object) 10L);
        boolean boolean79 = yearMonthDay71.isAfter((org.joda.time.ReadablePartial) yearMonthDay78);
        boolean boolean80 = yearMonthDay65.isAfter((org.joda.time.ReadablePartial) yearMonthDay71);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = yearMonthDay71.toDateTimeAtMidnight(dateTimeZone81);
        int int83 = yearMonthDay71.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01" + "'", str73, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property2.getAsShortText(locale4);
        java.lang.String str6 = property2.getAsString();
        org.joda.time.DurationField durationField7 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonthDay34.indexOf(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusYears((int) 'a');
        org.joda.time.DateTime dateTime39 = yearMonthDay34.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay34.withPeriodAdded(readablePeriod40, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minus(readablePeriod45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTimeAtCurrentTime(dateTimeZone48);
        int int50 = property32.compareTo((org.joda.time.ReadableInstant) dateTime49);
        int int51 = property32.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property32.getFieldType();
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay13.property(dateTimeFieldType52);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = yearMonthDay13.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property2.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        boolean boolean15 = property2.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.DurationField durationField16 = property2.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property2.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTime(readableInstant17);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale22 = null;
        java.lang.String str23 = yearMonthDay20.toString("1970-01-01", locale22);
        java.lang.String str24 = yearMonthDay20.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.dayOfMonth();
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        int int36 = yearMonthDay28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.plusDays(1);
        boolean boolean51 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateTime dateTime58 = yearMonthDay53.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay53.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.plusDays(1);
        boolean boolean66 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        boolean boolean67 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        java.lang.String str68 = yearMonthDay13.toString();
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay13.toDateTime(timeOfDay69);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01" + "'", str68, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = yearMonthDay8.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay8.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) 10, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) (short) 100, (int) (byte) 10, 1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.withPeriodAdded(readablePeriod45, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.plusDays(1);
        int int52 = yearMonthDay47.getYear();
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay47.year();
        org.joda.time.YearMonthDay yearMonthDay55 = property53.addToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property53.getFieldType();
        int int57 = yearMonthDay37.indexOf(dateTimeFieldType56);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plus(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay19.toDateMidnight(dateTimeZone20);
        java.lang.String str23 = yearMonthDay19.toString("1813-12-02");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1813-12-02" + "'", str23, "1813-12-02");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonthDay8.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay8.toDateMidnight();
        java.lang.String str14 = yearMonthDay8.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = yearMonthDay8.getFields();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property18.getAsText(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        boolean boolean24 = yearMonthDay8.isSupported(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay8.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(31);
        boolean boolean29 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay6.minusDays(2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.lang.String str5 = property2.getName();
        int int6 = property2.getMinimumValueOverall();
        java.lang.String str7 = property2.getAsText();
        int int8 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property2.getFieldType();
        int int10 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "dayOfMonth" + "'", str5, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.minus(readablePeriod27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonthDay30.indexOf(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay30.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.YearMonthDay yearMonthDay44 = property39.withMinimumValue();
        int int45 = property39.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonthDay36.isSupported(dateTimeFieldType46);
        int int48 = yearMonthDay26.get(dateTimeFieldType46);
        java.lang.String str49 = yearMonthDay26.toString();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay26.minusMonths(22);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears((int) (short) 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01" + "'", str49, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusDays(100);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        java.lang.String str15 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonthDay21.toString(dateTimeFormatter22);
        boolean boolean24 = yearMonthDay11.isBefore((org.joda.time.ReadablePartial) yearMonthDay21);
        java.util.Locale locale26 = null;
        java.lang.String str27 = yearMonthDay21.toString("1", locale26);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay21.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonthDay30.indexOf(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minusYears((int) 'a');
        org.joda.time.DateTime dateTime35 = yearMonthDay30.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay30.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minus(readablePeriod41);
        java.util.Locale locale44 = null;
        java.lang.String str45 = yearMonthDay38.toString("1970-01-01", locale44);
        boolean boolean46 = yearMonthDay21.isEqual((org.joda.time.ReadablePartial) yearMonthDay38);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay38.dayOfMonth();
        boolean boolean48 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay38);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay9.minusDays(22);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay53.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay55 = property54.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        java.util.Locale locale57 = null;
        java.lang.String str58 = property54.getAsText(locale57);
        org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay61 = property54.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale65 = null;
        java.lang.String str66 = yearMonthDay63.toString("1970-01-01", locale65);
        java.lang.String str67 = yearMonthDay63.toString();
        boolean boolean68 = yearMonthDay61.isBefore((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay63.toDateTimeAtMidnight(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01" + "'", str66, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01" + "'", str67, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay1.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.plusYears(0);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = yearMonthDay18.toInterval(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTime(readableInstant22);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale27 = null;
        java.lang.String str28 = yearMonthDay25.toString("1970-01-01", locale27);
        java.lang.String str29 = yearMonthDay25.toString();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay25.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay25.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale37 = null;
        java.lang.String str38 = yearMonthDay35.toString("1970-01-01", locale37);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay35.dayOfMonth();
        org.joda.time.Interval interval40 = yearMonthDay35.toInterval();
        int int41 = yearMonthDay33.compareTo((org.joda.time.ReadablePartial) yearMonthDay35);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonthDay43.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minusYears((int) 'a');
        org.joda.time.DateTime dateTime48 = yearMonthDay43.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay43.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.plusDays(1);
        boolean boolean56 = yearMonthDay33.isEqual((org.joda.time.ReadablePartial) yearMonthDay51);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = yearMonthDay58.indexOf(dateTimeFieldType59);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay58.minusYears((int) 'a');
        org.joda.time.DateTime dateTime63 = yearMonthDay58.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay58.withPeriodAdded(readablePeriod64, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay66.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay66.plusDays(1);
        boolean boolean71 = yearMonthDay33.isEqual((org.joda.time.ReadablePartial) yearMonthDay70);
        boolean boolean72 = yearMonthDay18.isEqual((org.joda.time.ReadablePartial) yearMonthDay70);
        java.lang.String str73 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay18.plusDays(1);
        int int76 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay1.plusDays(0);
        int[] intArray79 = yearMonthDay78.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01" + "'", str73, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1]");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay13.year();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsShortText(locale19);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay22.monthOfYear();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsText(locale29);
        org.joda.time.DateTimeField dateTimeField31 = property28.getField();
        org.joda.time.DurationField durationField32 = property28.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay33 = property28.withMinimumValue();
        int[] intArray34 = yearMonthDay33.getValues();
        boolean boolean35 = property18.equals((java.lang.Object) yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.lang.String str30 = property7.getAsText();
        int int31 = property7.getMinimumValueOverall();
        java.util.Locale locale32 = null;
        int int33 = property7.getMaximumShortTextLength(locale32);
        org.joda.time.YearMonthDay yearMonthDay34 = property7.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = yearMonthDay12.toString("1970-01-01", locale14);
        java.lang.String str16 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears((int) (byte) -1);
        boolean boolean19 = property7.equals((java.lang.Object) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay21.toDateMidnight();
        java.lang.String str27 = yearMonthDay21.toString();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay29.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay31 = property30.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property30.getAsText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        int int36 = yearMonthDay21.get(dateTimeFieldType35);
        int int37 = yearMonthDay21.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay39.toDateMidnight();
        java.lang.String str45 = yearMonthDay39.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = yearMonthDay39.getFields();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay50 = property49.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property49.getAsText(locale52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        boolean boolean55 = yearMonthDay39.isSupported(dateTimeFieldType54);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay21.property(dateTimeFieldType54);
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay18.property(dateTimeFieldType54);
        org.joda.time.Chronology chronology58 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay18.withYear((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.minus(readablePeriod27);
        org.joda.time.LocalDate localDate29 = yearMonthDay19.toLocalDate();
        boolean boolean30 = yearMonthDay13.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTime dateTime31 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay13.toDateMidnight(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        int int6 = property5.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = property5.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property10.addToCopy((int) '4');
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DurationField durationField15 = property10.getRangeDurationField();
        boolean boolean16 = property5.equals((java.lang.Object) durationField15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay29.toDateMidnight();
        java.lang.String str35 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonthDay29.get(dateTimeFieldType43);
        int int45 = yearMonthDay9.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateTime dateTime52 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay47.withPeriodAdded(readablePeriod53, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay57.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology60 = yearMonthDay59.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay9, chronology60);
        int int62 = yearMonthDay9.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay9.withMonthOfYear(3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay64);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay3.toString(dateTimeFormatter4);
        java.lang.String str6 = yearMonthDay3.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = yearMonthDay3.getFieldType(1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone24);
        int int26 = property11.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay1.plusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay1.minus(readablePeriod30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.plusDays(100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property2.getAsShortText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.addToCopy((int) (byte) 100);
        java.lang.String str8 = property2.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfMonth" + "'", str8, "dayOfMonth");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        java.lang.String str11 = property7.getAsText();
        int int12 = property7.get();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay5.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths((int) (short) 10);
        org.joda.time.Chronology chronology12 = yearMonthDay9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.withChronologyRetainFields(chronology12);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.minusYears((int) (short) 1);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonthDay19.toString("1970-01-01", locale21);
        java.lang.String str23 = yearMonthDay19.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay19.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = yearMonthDay19.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay19.withChronologyRetainFields(chronology42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minus(readablePeriod57);
        int int59 = yearMonthDay58.getMonthOfYear();
        int[] intArray60 = yearMonthDay58.getValues();
        boolean boolean61 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay58.plusYears(1970);
        boolean boolean64 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay16.plus(readablePeriod65);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay66.plusDays(0);
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonthDay70.indexOf(dateTimeFieldType71);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay70.minusYears((int) 'a');
        org.joda.time.DateTime dateTime75 = yearMonthDay70.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay70.withPeriodAdded(readablePeriod76, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        int int82 = yearMonthDay80.indexOf(dateTimeFieldType81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay80.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight85 = yearMonthDay80.toDateMidnight();
        org.joda.time.DateTime dateTime86 = yearMonthDay78.toDateTime((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.DateTime dateTime87 = yearMonthDay66.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        int int48 = yearMonthDay43.size();
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay43.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        boolean boolean25 = property7.equals((java.lang.Object) yearMonthDay24);
        int int26 = yearMonthDay24.size();
        java.lang.String str27 = yearMonthDay24.toString();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay24.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay24.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale35 = null;
        java.lang.String str36 = yearMonthDay33.toString("1970-01-01", locale35);
        java.lang.String str37 = yearMonthDay33.toString();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay33.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate40 = yearMonthDay33.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonthDay43.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minusYears((int) 'a');
        org.joda.time.DateTime dateTime48 = yearMonthDay43.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay43.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology56 = yearMonthDay55.getChronology();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) -1, chronology56);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay33.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.minus(readablePeriod59);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        int int64 = yearMonthDay62.indexOf(dateTimeFieldType63);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay62.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay62.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property71 = yearMonthDay70.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay72 = property71.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField73 = property71.getField();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsText(locale74);
        org.joda.time.YearMonthDay yearMonthDay76 = property71.withMinimumValue();
        int int77 = property71.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property71.getFieldType();
        boolean boolean79 = yearMonthDay68.isSupported(dateTimeFieldType78);
        int int80 = yearMonthDay58.get(dateTimeFieldType78);
        org.joda.time.Chronology chronology81 = yearMonthDay58.getChronology();
        boolean boolean82 = yearMonthDay24.isEqual((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = yearMonthDay58.toDateTimeAtCurrentTime(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 31 + "'", int77 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonthDay8.toInterval(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay29 = property28.withMinimumValue();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property28.getAsShortText(locale30);
        org.joda.time.DateTimeField dateTimeField32 = property28.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay24.property(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay35 = property34.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        int int37 = yearMonthDay8.indexOf(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusYears((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = yearMonthDay21.toString("1970-01-01", locale23);
        boolean boolean25 = yearMonthDay17.isEqual((org.joda.time.ReadablePartial) yearMonthDay21);
        int[] intArray26 = yearMonthDay21.getValues();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay21.plusDays(3);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonthDay30.indexOf(dateTimeFieldType31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay30.withPeriodAdded(readablePeriod33, (int) (short) -1);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay28.withField(dateTimeFieldType37, 25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        java.util.Locale locale10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy("1", locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withYear((int) (short) 1);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay32.toString("1970-01-01", locale34);
        java.lang.String str36 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay32.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = yearMonthDay32.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonthDay42.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusYears((int) 'a');
        org.joda.time.DateTime dateTime47 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay11, chronology55);
        boolean boolean60 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay11.plusMonths((int) (byte) -1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate37 = yearMonthDay36.toLocalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = yearMonthDay36.toString(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1978-04-01" + "'", str39, "1978-04-01");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int18 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay20 = property2.addWrapFieldToCopy(2);
        java.lang.String str21 = property2.getAsText();
        java.lang.String str22 = property2.getAsShortText();
        int int23 = property2.getMaximumValueOverall();
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = property2.compareTo(readablePartial24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        java.lang.String str34 = yearMonthDay30.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay30.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = yearMonthDay36.getFieldTypes();
        int int40 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.DurationField durationField41 = property7.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonthDay43.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minusYears((int) 'a');
        org.joda.time.DateTime dateTime48 = yearMonthDay43.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay43.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.plusMonths(1);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay51.toDateMidnight();
        int int55 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property14.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = property14.getMinimumValue();
        org.joda.time.DurationField durationField34 = property14.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.addToCopy((int) '4');
        int int5 = property2.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.getYearMonthDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusYears((int) '4');
        int int8 = yearMonthDay1.getMonthOfYear();
        org.joda.time.Chronology chronology9 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay1.plusMonths(9);
        org.joda.time.LocalDate localDate12 = yearMonthDay11.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = yearMonthDay4.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minusYears((int) 'a');
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay4.withPeriodAdded(readablePeriod10, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1, chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) 9, chronology17);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) 25, chronology17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.plusYears((int) (short) 0);
        int int17 = yearMonthDay13.size();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone18);
        java.lang.Class<?> wildcardClass20 = dateTime19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay13.withPeriodAdded(readablePeriod16, 2);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.minusDays(1873);
        org.joda.time.Chronology chronology22 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((java.lang.Object) chronology22, chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        int[] intArray15 = yearMonthDay13.getValues();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = yearMonthDay13.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay26.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay28 = property27.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property27.getAsText(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property27.getFieldType();
        boolean boolean33 = yearMonthDay24.isSupported(dateTimeFieldType32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay13.property(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay36 = property34.addToCopy(10);
        int[] intArray37 = yearMonthDay36.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 11]");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = yearMonthDay10.toString("1970-01-01", locale12);
        java.lang.String str14 = yearMonthDay10.toString();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay10.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate17 = yearMonthDay10.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay10.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay1.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay15.toDateMidnight();
        java.lang.String str21 = yearMonthDay15.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay25 = property24.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property24.getAsText(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        int int30 = yearMonthDay15.get(dateTimeFieldType29);
        int int31 = yearMonthDay15.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay33.toDateMidnight();
        java.lang.String str39 = yearMonthDay33.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = yearMonthDay33.getFields();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay42.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay44 = property43.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField45 = property43.getField();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property43.getAsText(locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        boolean boolean49 = yearMonthDay33.isSupported(dateTimeFieldType48);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay15.property(dateTimeFieldType48);
        int int51 = yearMonthDay11.indexOf(dateTimeFieldType48);
        int int52 = yearMonthDay11.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay11.withMonthOfYear((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay54);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonthDay14.toInterval(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minus(readablePeriod34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay31.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsText(locale42);
        org.joda.time.YearMonthDay yearMonthDay45 = property39.setCopy((int) (short) 1);
        java.util.Locale locale46 = null;
        java.lang.String str47 = property39.getAsShortText(locale46);
        java.lang.String str48 = property39.getName();
        boolean boolean49 = yearMonthDay31.equals((java.lang.Object) str48);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonthDay51.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay51.toDateMidnight();
        java.lang.String str57 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay59.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay61 = property60.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        java.util.Locale locale63 = null;
        java.lang.String str64 = property60.getAsText(locale63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property60.getFieldType();
        int int66 = yearMonthDay51.get(dateTimeFieldType65);
        int int67 = yearMonthDay31.indexOf(dateTimeFieldType65);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonthDay69.indexOf(dateTimeFieldType70);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay69.minusYears((int) 'a');
        org.joda.time.DateTime dateTime74 = yearMonthDay69.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay69.withPeriodAdded(readablePeriod75, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology82 = yearMonthDay81.getChronology();
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay31, chronology82);
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime21, chronology82);
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay14.withChronologyRetainFields(chronology82);
        org.joda.time.YearMonthDay yearMonthDay86 = new org.joda.time.YearMonthDay((long) '#', chronology82);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "dayOfMonth" + "'", str48, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01" + "'", str57, "1970-01-01");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(yearMonthDay85);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = property5.setCopy("1", locale7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonthDay22.toInterval(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.withYear((int) (short) 1);
        boolean boolean27 = yearMonthDay8.isEqual((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale31 = null;
        java.lang.String str32 = yearMonthDay29.toString("1970-01-01", locale31);
        java.lang.String str33 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay29.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate36 = yearMonthDay29.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.withPeriodAdded(readablePeriod45, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology52 = yearMonthDay51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1, chronology52);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay29.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay8, chronology52);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay8.plusYears(100);
        int int59 = yearMonthDay58.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        int int6 = property5.getMaximumValue();
        int int7 = property5.get();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        int int5 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = property2.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property2.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1, chronology16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) 9, chronology16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minus(readablePeriod21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minus(readablePeriod4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = yearMonthDay5.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay1.toString(dateTimeFormatter4);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = yearMonthDay8.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay8.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay1.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) 3);
        boolean boolean38 = yearMonthDay1.equals((java.lang.Object) yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 10);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = yearMonthDay5.toString("1970-01-01", locale7);
        java.lang.String str9 = yearMonthDay5.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = yearMonthDay15.toString(dateTimeFormatter16);
        boolean boolean18 = yearMonthDay5.isBefore((org.joda.time.ReadablePartial) yearMonthDay15);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay15.toString("1", locale20);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay15.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minus(readablePeriod35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = yearMonthDay32.toString("1970-01-01", locale38);
        boolean boolean40 = yearMonthDay15.isEqual((org.joda.time.ReadablePartial) yearMonthDay32);
        boolean boolean41 = yearMonthDay1.isAfter((org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay43.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay45 = property44.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsText(locale47);
        org.joda.time.YearMonthDay yearMonthDay50 = property44.setCopy((int) (short) 1);
        java.util.Locale locale51 = null;
        java.lang.String str52 = property44.getAsShortText(locale51);
        org.joda.time.YearMonthDay yearMonthDay54 = property44.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay56 = property44.addToCopy(3);
        boolean boolean57 = yearMonthDay15.isBefore((org.joda.time.ReadablePartial) yearMonthDay56);
        int int58 = yearMonthDay56.size();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.minusYears((int) (short) 1);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonthDay19.toString("1970-01-01", locale21);
        java.lang.String str23 = yearMonthDay19.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay19.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = yearMonthDay19.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay19.withChronologyRetainFields(chronology42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minus(readablePeriod57);
        int int59 = yearMonthDay58.getMonthOfYear();
        int[] intArray60 = yearMonthDay58.getValues();
        boolean boolean61 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay58.plusYears(1970);
        boolean boolean64 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) yearMonthDay63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay16.withMonthOfYear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property2.getFieldType();
        int int8 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property2.addToCopy(9);
        int int11 = property2.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.withYear((int) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = yearMonthDay1.get(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay1.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minus(readablePeriod20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 2);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.withMonthOfYear((int) (byte) 1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        java.lang.String str4 = property2.getName();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.DurationField durationField8 = property2.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay18.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property26.getAsText(locale29);
        org.joda.time.YearMonthDay yearMonthDay32 = property26.setCopy((int) (short) 1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = property26.getAsShortText(locale33);
        java.lang.String str35 = property26.getName();
        boolean boolean36 = yearMonthDay18.equals((java.lang.Object) str35);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay38.toDateMidnight();
        java.lang.String str44 = yearMonthDay38.toString();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay46.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay48 = property47.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField49 = property47.getField();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonthDay38.get(dateTimeFieldType52);
        int int54 = yearMonthDay18.indexOf(dateTimeFieldType52);
        int int55 = yearMonthDay18.getYear();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay18.withMonthOfYear((int) (short) 1);
        boolean boolean58 = property2.equals((java.lang.Object) yearMonthDay18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay18.withDayOfMonth(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "dayOfMonth" + "'", str4, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dayOfMonth" + "'", str35, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusDays(1);
        java.lang.String str16 = yearMonthDay13.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minus(readablePeriod7);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        java.lang.String str15 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate18 = yearMonthDay11.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology34 = yearMonthDay33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay11.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) 10, chronology34);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((int) (short) 100, (int) (byte) 10, 1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology34);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(25, (-1), (int) 'a', chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        int int9 = yearMonthDay1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay1.plus(readablePeriod10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = property2.getMaximumValue();
        int int9 = property2.getMinimumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property2.getAsShortText(locale10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = property5.setCopy("1", locale7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonthDay22.toInterval(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.withYear((int) (short) 1);
        boolean boolean27 = yearMonthDay8.isEqual((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale31 = null;
        java.lang.String str32 = yearMonthDay29.toString("1970-01-01", locale31);
        java.lang.String str33 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay29.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate36 = yearMonthDay29.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonthDay39.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minusYears((int) 'a');
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.withPeriodAdded(readablePeriod45, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology52 = yearMonthDay51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1, chronology52);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay29.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay8, chronology52);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusYears(31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay58);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusDays(10);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = yearMonthDay21.toString("1970-01-01", locale23);
        java.lang.String str25 = yearMonthDay21.toString();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay21.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate28 = yearMonthDay21.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonthDay31.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minusYears((int) 'a');
        org.joda.time.DateTime dateTime36 = yearMonthDay31.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay31.withPeriodAdded(readablePeriod37, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) -1, chronology44);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay21.withChronologyRetainFields(chronology44);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) 10, chronology44);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology44);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) 1, chronology44);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay50.year();
        int int52 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.YearMonthDay yearMonthDay53 = property14.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay53);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.lang.String str6 = property2.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone24);
        int int26 = property11.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay1.plusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay1.minus(readablePeriod30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        java.lang.String str15 = yearMonthDay11.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate18 = yearMonthDay11.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology34 = yearMonthDay33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay11.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) 10, chronology34);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((int) (short) 100, (int) (byte) 10, 1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology34);
        boolean boolean41 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay40);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        int int6 = property2.get();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay9.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.minus(readablePeriod15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay9.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        org.joda.time.Chronology chronology33 = yearMonthDay28.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay18.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonthDay34.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay34.minusDays((int) (short) 10);
        boolean boolean38 = property2.equals((java.lang.Object) yearMonthDay37);
        int int39 = yearMonthDay37.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology8 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = yearMonthDay10.toString("1970-01-01", locale12);
        java.lang.String str14 = yearMonthDay10.toString();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay10.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate17 = yearMonthDay10.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay10.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withPeriodAdded(readablePeriod43, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minus(readablePeriod48);
        int int50 = yearMonthDay49.getMonthOfYear();
        int[] intArray51 = yearMonthDay49.getValues();
        boolean boolean52 = yearMonthDay10.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        boolean boolean53 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay49.plusYears(1);
        java.util.Locale locale57 = null;
        java.lang.String str58 = yearMonthDay49.toString("0010-11-10", locale57);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0010-11-10" + "'", str58, "0010-11-10");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.Chronology chronology15 = yearMonthDay9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.minusMonths(9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTime(readableInstant29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1, chronology46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay25, chronology46);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale53 = null;
        java.lang.String str54 = yearMonthDay51.toString("1970-01-01", locale53);
        java.lang.String str55 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate58 = yearMonthDay51.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay51.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay48.withChronologyRetainFields(chronology74);
        int int79 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay1.minus(readablePeriod80);
        org.joda.time.DateMidnight dateMidnight82 = yearMonthDay81.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(dateMidnight82);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonthDay41.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusYears((int) 'a');
        org.joda.time.DateTime dateTime46 = yearMonthDay41.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay41.withPeriodAdded(readablePeriod47, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay49.minus(readablePeriod52);
        org.joda.time.Chronology chronology54 = yearMonthDay49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay38.withChronologyRetainFields(chronology54);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay34, chronology54);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTime(timeOfDay57, dateTimeZone58);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay56.year();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = yearMonthDay56.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        boolean boolean25 = property7.equals((java.lang.Object) yearMonthDay24);
        int int26 = yearMonthDay24.size();
        java.lang.String str27 = yearMonthDay24.toString();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay24.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay29.toDateTimeAtMidnight(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = yearMonthDay29.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.addToCopy((int) '4');
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) 9);
        int int7 = yearMonthDay4.compareTo((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = yearMonthDay4.toString(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-02-22" + "'", str9, "1970-02-22");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.Locale locale16 = null;
        java.lang.String str17 = yearMonthDay11.toString("1", locale16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay11.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone25);
        int int27 = property7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = property7.addToCopy(31);
        java.lang.String str30 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay31 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay32 = property7.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        java.lang.String str33 = yearMonthDay9.toString();
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay9.toDateTime(timeOfDay34);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withPeriodAdded(readablePeriod43, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = yearMonthDay49.toInterval(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay49.withPeriodAdded(readablePeriod52, 2);
        org.joda.time.Interval interval55 = yearMonthDay54.toInterval();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay54.minusDays(1873);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay59.year();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay59.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = yearMonthDay64.indexOf(dateTimeFieldType65);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay64.minusYears((int) 'a');
        org.joda.time.DateTime dateTime69 = yearMonthDay64.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay64.monthOfYear();
        java.util.Locale locale71 = null;
        int int72 = property70.getMaximumTextLength(locale71);
        org.joda.time.DurationField durationField73 = property70.getDurationField();
        int int74 = property70.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property70.getFieldType();
        int int76 = yearMonthDay59.indexOf(dateTimeFieldType75);
        boolean boolean77 = yearMonthDay57.isSupported(dateTimeFieldType75);
        boolean boolean78 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay57.withMonthOfYear(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        java.lang.String str11 = property7.getAsText();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property7.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        java.lang.String str6 = property2.getAsString();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property2.getAsText(locale7);
        java.lang.String str9 = property2.getAsString();
        java.lang.String str10 = property2.getAsString();
        int int11 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay1.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay1.dayOfMonth();
        java.lang.String str21 = property20.getAsText();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addWrapFieldToCopy((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        int int15 = yearMonthDay13.size();
        org.joda.time.Chronology chronology16 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonthDay30.toInterval(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay30.withPeriodAdded(readablePeriod33, 2);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay35.toDateMidnight();
        int int41 = yearMonthDay13.compareTo((org.joda.time.ReadablePartial) yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = yearMonthDay1.get(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay1.plusYears(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = yearMonthDay18.getFields();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay18.plusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay11.toDateMidnight();
        java.lang.String str17 = yearMonthDay11.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = yearMonthDay11.getFields();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property21.getAsText(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        boolean boolean27 = yearMonthDay11.isSupported(dateTimeFieldType26);
        int int28 = yearMonthDay9.indexOf(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay32 = property31.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsText(locale34);
        org.joda.time.YearMonthDay yearMonthDay36 = property31.withMinimumValue();
        int int37 = property31.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property31.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay42 = property41.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.YearMonthDay yearMonthDay44 = property41.getYearMonthDay();
        int int45 = property41.get();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateTime dateTime52 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay47.withPeriodAdded(readablePeriod53, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minus(readablePeriod58);
        int int60 = yearMonthDay59.getMonthOfYear();
        int[] intArray61 = yearMonthDay59.getValues();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay59.toDateTimeAtCurrentTime(dateTimeZone62);
        int int64 = property41.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int65 = property31.compareTo((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = yearMonthDay9.equals((java.lang.Object) property31);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay9.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTime(readableInstant29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1, chronology46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay25, chronology46);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale53 = null;
        java.lang.String str54 = yearMonthDay51.toString("1970-01-01", locale53);
        java.lang.String str55 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate58 = yearMonthDay51.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay51.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay48.withChronologyRetainFields(chronology74);
        int int79 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay1.minus(readablePeriod80);
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay81);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withPeriodAdded(readablePeriod15, (int) 'a');
        boolean boolean19 = yearMonthDay9.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonthDay21.indexOf(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.minusYears((int) 'a');
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonthDay33.toInterval(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTime(readableInstant37);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonthDay41.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusYears((int) 'a');
        org.joda.time.DateTime dateTime46 = yearMonthDay41.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay41.withPeriodAdded(readablePeriod47, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) -1, chronology54);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay33, chronology54);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale61 = null;
        java.lang.String str62 = yearMonthDay59.toString("1970-01-01", locale61);
        java.lang.String str63 = yearMonthDay59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay59.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate66 = yearMonthDay59.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonthDay69.indexOf(dateTimeFieldType70);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay69.minusYears((int) 'a');
        org.joda.time.DateTime dateTime74 = yearMonthDay69.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay69.withPeriodAdded(readablePeriod75, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology82 = yearMonthDay81.getChronology();
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((long) (short) -1, chronology82);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay59.withChronologyRetainFields(chronology82);
        org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology82);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay56.withChronologyRetainFields(chronology82);
        int int87 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay86);
        boolean boolean88 = yearMonthDay1.isEqual((org.joda.time.ReadablePartial) yearMonthDay86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateTime dateTime90 = yearMonthDay86.toDateTimeAtCurrentTime(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        java.util.Locale locale10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy("1", locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withYear((int) (short) 1);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay32.toString("1970-01-01", locale34);
        java.lang.String str36 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay32.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = yearMonthDay32.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonthDay42.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusYears((int) 'a');
        org.joda.time.DateTime dateTime47 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay11, chronology55);
        boolean boolean60 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        int int64 = yearMonthDay62.indexOf(dateTimeFieldType63);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay62.minusYears((int) 'a');
        org.joda.time.DateTime dateTime67 = yearMonthDay62.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay62.withPeriodAdded(readablePeriod68, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay72.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Interval interval76 = yearMonthDay74.toInterval(dateTimeZone75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        int int82 = yearMonthDay80.indexOf(dateTimeFieldType81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay80.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight85 = yearMonthDay80.toDateMidnight();
        java.lang.String str86 = yearMonthDay80.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = yearMonthDay80.getFields();
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay80.minus(readablePeriod88);
        org.joda.time.LocalDate localDate90 = yearMonthDay80.toLocalDate();
        boolean boolean91 = yearMonthDay74.isBefore((org.joda.time.ReadablePartial) localDate90);
        org.joda.time.DateTime dateTime92 = yearMonthDay74.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime93 = yearMonthDay74.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime94 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.YearMonthDay.Property property95 = yearMonthDay1.dayOfMonth();
        java.lang.String str96 = property95.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970-01-01" + "'", str86, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Property[dayOfMonth]" + "'", str96, "Property[dayOfMonth]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addToCopy((-1));
        int int7 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minus(readablePeriod21);
        int int23 = yearMonthDay22.getMonthOfYear();
        int[] intArray24 = yearMonthDay22.getValues();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay22.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay22.plusMonths(0);
        boolean boolean29 = yearMonthDay8.isEqual((org.joda.time.ReadablePartial) yearMonthDay28);
        int int31 = yearMonthDay28.getValue(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addToCopy(12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.plusDays(1971);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay14 = property13.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property13.getAsText(locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = property13.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay20 = property13.withMaximumValue();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay10.withChronologyRetainFields(chronology21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minus(readablePeriod39);
        int int41 = yearMonthDay40.getMonthOfYear();
        int[] intArray42 = yearMonthDay40.getValues();
        boolean boolean43 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay1.plus(readablePeriod44);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusMonths((int) (short) 10);
        int int50 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsText(locale56);
        org.joda.time.YearMonthDay yearMonthDay59 = property53.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay60 = property53.withMaximumValue();
        org.joda.time.Chronology chronology61 = yearMonthDay60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay49, chronology61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.plusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay62.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay62.minusDays(1971);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay62.minusDays(10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = yearMonthDay5.toString("1970-01-01", locale7);
        java.lang.String str9 = yearMonthDay5.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate12 = yearMonthDay5.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay5.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) 10, chronology28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(chronology28);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        int int6 = property5.getMaximumValue();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.DurationField durationField8 = property5.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay9 = property5.getYearMonthDay();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay9.withFieldAdded(durationFieldType10, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.getYearMonthDay();
        int int5 = property2.getMinimumValueOverall();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addToCopy(9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        int int6 = property5.getMaximumValue();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.DurationField durationField8 = property5.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay9 = property5.getYearMonthDay();
        org.joda.time.DurationField durationField10 = property5.getDurationField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.LocalDate localDate17 = yearMonthDay16.toLocalDate();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property9.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = property9.withMaximumValue();
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withChronologyRetainFields(chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusYears((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears(12);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = yearMonthDay14.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = yearMonthDay1.get(dateTimeFieldType15);
        int int17 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay19.toDateMidnight();
        java.lang.String str25 = yearMonthDay19.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay19.getFields();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        boolean boolean35 = yearMonthDay19.isSupported(dateTimeFieldType34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay1.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getName();
        org.joda.time.YearMonthDay yearMonthDay39 = property36.addToCopy(3);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonthDay41.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay41.toDateMidnight();
        java.lang.String str47 = yearMonthDay41.toString();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay49.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property50.getAsText(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        int int56 = yearMonthDay41.get(dateTimeFieldType55);
        int int57 = yearMonthDay41.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonthDay59.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay59.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight64 = yearMonthDay59.toDateMidnight();
        java.lang.String str65 = yearMonthDay59.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = yearMonthDay59.getFields();
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay68.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay70 = property69.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField71 = property69.getField();
        java.util.Locale locale72 = null;
        java.lang.String str73 = property69.getAsText(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        boolean boolean75 = yearMonthDay59.isSupported(dateTimeFieldType74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay41.property(dateTimeFieldType74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay39.withField(dateTimeFieldType74, 9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "dayOfMonth" + "'", str37, "dayOfMonth");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.Interval interval6 = yearMonthDay1.toInterval();
        int[] intArray7 = yearMonthDay1.getValues();
        int int8 = yearMonthDay1.getYear();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay1.monthOfYear();
        int int10 = yearMonthDay1.getYear();
        java.lang.String str11 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = yearMonthDay25.getFields();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay25.plusMonths(1970);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay50 = property49.withMinimumValue();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property49.getAsShortText(locale51);
        org.joda.time.DateTimeField dateTimeField53 = property49.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay45.property(dateTimeFieldType54);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay25.property(dateTimeFieldType54);
        int int57 = yearMonthDay1.get(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        int int6 = property2.get();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property2.getAsShortText(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = property2.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonthDay10.toString(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-31" + "'", str12, "1970-01-31");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay13.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.withPeriodAdded(readablePeriod17, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property14.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = property14.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay35 = property14.addToCopy(1970);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusDays(10);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = yearMonthDay1.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) 9, chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology36);
        boolean boolean40 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) yearMonthDay39);
        int int41 = yearMonthDay13.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        java.util.Locale locale15 = null;
        int int16 = property7.getMaximumTextLength(locale15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusYears((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = yearMonthDay21.toString("1970-01-01", locale23);
        boolean boolean25 = yearMonthDay17.isEqual((org.joda.time.ReadablePartial) yearMonthDay21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = yearMonthDay17.getField(1873);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1873");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay49 = property16.setCopy(3);
        java.util.Locale locale50 = null;
        int int51 = property16.getMaximumTextLength(locale50);
        int int52 = property16.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay54 = property16.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.plusDays(1971);
        java.lang.String str12 = yearMonthDay10.toString("1");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property3.getAsText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = property3.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay10 = property3.withMaximumValue();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) '4', chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plus(readablePeriod13);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addToCopy((-1));
        int int7 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.getYearMonthDay();
        int int9 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = yearMonthDay4.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minusYears((int) 'a');
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay4.withPeriodAdded(readablePeriod10, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth(1);
        boolean boolean16 = yearMonthDay12.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate17 = yearMonthDay12.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonthDay19.toString("1970-01-01", locale21);
        java.lang.String str23 = yearMonthDay19.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay19.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = yearMonthDay19.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay19.withChronologyRetainFields(chronology42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minus(readablePeriod57);
        int int59 = yearMonthDay58.getMonthOfYear();
        int[] intArray60 = yearMonthDay58.getValues();
        boolean boolean61 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.Chronology chronology62 = yearMonthDay58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((java.lang.Object) localDate17, chronology62);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology62);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(2020, (int) (short) 1, 22, chronology62);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMaximumValue();
        org.joda.time.Chronology chronology10 = yearMonthDay9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        int int25 = yearMonthDay24.getMonthOfYear();
        int[] intArray26 = yearMonthDay24.getValues();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = yearMonthDay24.getYear();
        boolean boolean30 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay24);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay49 = property16.setCopy(3);
        java.util.Locale locale50 = null;
        int int51 = property16.getMaximumShortTextLength(locale50);
        java.lang.String str52 = property16.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "monthOfYear" + "'", str52, "monthOfYear");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateTime dateTime17 = yearMonthDay9.toDateTime((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        int int32 = yearMonthDay31.getMonthOfYear();
        int[] intArray33 = yearMonthDay31.getValues();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay31.plusMonths(0);
        int int38 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale42 = null;
        java.lang.String str43 = yearMonthDay40.toString("1970-01-01", locale42);
        java.lang.String str44 = yearMonthDay40.toString();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay40.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay50 = property49.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = yearMonthDay50.toString(dateTimeFormatter51);
        boolean boolean53 = yearMonthDay40.isBefore((org.joda.time.ReadablePartial) yearMonthDay50);
        java.util.Locale locale55 = null;
        java.lang.String str56 = yearMonthDay50.toString("1", locale55);
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay50.toDateMidnight();
        org.joda.time.DateTime dateTime58 = yearMonthDay50.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = yearMonthDay50.getFieldType(0);
        int int61 = yearMonthDay31.indexOf(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.Chronology chronology12 = yearMonthDay9.getChronology();
        int int13 = yearMonthDay9.size();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay15.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minus(readablePeriod29);
        org.joda.time.Chronology chronology31 = yearMonthDay26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay15.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay9, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.plusDays((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = yearMonthDay9.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay1.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = yearMonthDay1.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = yearMonthDay1.getValue(2020);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2020");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property7.getMinimumValueOverall();
        java.lang.String str30 = property7.getAsText();
        java.util.Locale locale31 = null;
        int int32 = property7.getMaximumShortTextLength(locale31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        int int6 = property2.get();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property2.getAsText(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay10 = property2.setCopy("1970-12-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-12-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.LocalDate localDate12 = yearMonthDay9.toLocalDate();
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay9.toDateMidnight();
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay9.toDateTime(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.addToCopy((int) '4');
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsText();
        java.util.Locale locale7 = null;
        int int8 = property2.getMaximumTextLength(locale7);
        int int9 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusDays(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay1.withDayOfMonth(1873);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1873 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int18 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay20 = property2.addWrapFieldToCopy(2);
        java.lang.String str21 = property2.getAsText();
        java.lang.String str22 = property2.getAsShortText();
        int int23 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay25 = property2.addWrapFieldToCopy(1971);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay27 = property2.setCopy("2020-11-25");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11-25\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonthDay13.getFields();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.plusMonths(1970);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        int int25 = yearMonthDay23.getMonthOfYear();
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime27 = yearMonthDay19.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int[] intArray28 = yearMonthDay19.getValues();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        java.util.Locale locale32 = null;
        int int33 = property31.getMaximumTextLength(locale32);
        org.joda.time.DurationField durationField34 = property31.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonthDay36.indexOf(dateTimeFieldType37);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minusYears((int) 'a');
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay36.withPeriodAdded(readablePeriod42, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minus(readablePeriod47);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.monthOfYear();
        boolean boolean50 = property31.equals((java.lang.Object) yearMonthDay48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.minus(readablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay52.toDateMidnight(dateTimeZone53);
        int int55 = yearMonthDay52.getYear();
        int int56 = yearMonthDay19.compareTo((org.joda.time.ReadablePartial) yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2134, 3, 1]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minus(readablePeriod30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay31.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsText(locale38);
        org.joda.time.YearMonthDay yearMonthDay41 = property35.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay42 = property35.withMaximumValue();
        boolean boolean43 = yearMonthDay31.equals((java.lang.Object) property35);
        org.joda.time.YearMonthDay yearMonthDay44 = property35.withMinimumValue();
        int int45 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay44);
        int int46 = yearMonthDay44.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        java.lang.String str6 = property2.getAsString();
        java.lang.String str7 = property2.getAsString();
        java.lang.String str8 = property2.getAsString();
        org.joda.time.YearMonthDay yearMonthDay10 = property2.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay12.toDateMidnight();
        java.lang.String str18 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property21.getAsText(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        int int27 = yearMonthDay12.get(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay12.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonthDay31.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.minusYears((int) 'a');
        org.joda.time.DateTime dateTime36 = yearMonthDay31.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay31.withPeriodAdded(readablePeriod37, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.minus(readablePeriod42);
        int int44 = yearMonthDay43.getMonthOfYear();
        org.joda.time.Chronology chronology45 = yearMonthDay43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay47.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay55.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay57 = property56.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property56.getAsText(locale59);
        org.joda.time.YearMonthDay yearMonthDay61 = property56.withMinimumValue();
        int int62 = property56.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property56.getFieldType();
        boolean boolean64 = yearMonthDay53.isSupported(dateTimeFieldType63);
        int int65 = yearMonthDay43.get(dateTimeFieldType63);
        int int66 = yearMonthDay12.get(dateTimeFieldType63);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay10.property(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = yearMonthDay8.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay8.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) 10, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) 1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(100L, chronology31);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) 1, chronology31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay13 = property7.addToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minus(readablePeriod26);
        int int28 = yearMonthDay27.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay27.plusYears((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateTime dateTime37 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay32.withPeriodAdded(readablePeriod38, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonthDay44.toInterval(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay44.toDateTime(readableInstant48);
        boolean boolean50 = yearMonthDay30.isEqual((org.joda.time.ReadablePartial) yearMonthDay44);
        int int51 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay44.toDateTime(timeOfDay52, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay44.plus(readablePeriod55);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = yearMonthDay2.indexOf(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) 'a');
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withPeriodAdded(readablePeriod8, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1, chronology15);
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.plus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay1.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay1.plusDays((int) (short) -1);
        org.joda.time.Interval interval23 = yearMonthDay1.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        int int5 = property2.get();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        java.lang.String str9 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay13 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property12.getAsText(locale15);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = property12.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = yearMonthDay21.toString("1970-01-01", locale23);
        java.lang.String str25 = yearMonthDay21.toString();
        boolean boolean26 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay21);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.withPeriodAdded(readablePeriod27, (int) '#');
        boolean boolean30 = property8.equals((java.lang.Object) yearMonthDay21);
        boolean boolean31 = property2.equals((java.lang.Object) boolean30);
        java.lang.String str32 = property2.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[dayOfMonth]" + "'", str9, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[dayOfMonth]" + "'", str32, "Property[dayOfMonth]");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay1.toDateTime(timeOfDay3, dateTimeZone4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        java.lang.String str11 = property7.getAsText();
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        java.util.Locale locale10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy("1", locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withYear((int) (short) 1);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay32.toString("1970-01-01", locale34);
        java.lang.String str36 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay32.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = yearMonthDay32.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonthDay42.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusYears((int) 'a');
        org.joda.time.DateTime dateTime47 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay11, chronology55);
        boolean boolean60 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay1.plus(readablePeriod61);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        int int16 = yearMonthDay13.getYear();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonthDay13.toInterval(dateTimeZone18);
        java.lang.String str21 = yearMonthDay13.toString("1970-01-01");
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        boolean boolean34 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonthDay36.indexOf(dateTimeFieldType37);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.minusYears((int) 'a');
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay36.withPeriodAdded(readablePeriod42, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minus(readablePeriod47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.minusYears((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonthDay56.toString("1970-01-01", locale58);
        boolean boolean60 = yearMonthDay52.isEqual((org.joda.time.ReadablePartial) yearMonthDay56);
        boolean boolean61 = yearMonthDay33.equals((java.lang.Object) yearMonthDay56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField63 = yearMonthDay56.getField(1873);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1873");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMinimumValueOverall();
        int int8 = property2.getMaximumValue();
        int int9 = property2.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property2.getAsText(locale10);
        org.joda.time.DurationField durationField12 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale35 = null;
        java.lang.String str36 = yearMonthDay33.toString("1970-01-01", locale35);
        java.lang.String str37 = yearMonthDay33.toString();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay33.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale45 = null;
        java.lang.String str46 = yearMonthDay43.toString("1970-01-01", locale45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay43.dayOfMonth();
        org.joda.time.Interval interval48 = yearMonthDay43.toInterval();
        int int49 = yearMonthDay41.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonthDay51.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minusYears((int) 'a');
        org.joda.time.DateTime dateTime56 = yearMonthDay51.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay51.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay59.plusDays(1);
        boolean boolean64 = yearMonthDay41.isEqual((org.joda.time.ReadablePartial) yearMonthDay59);
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = yearMonthDay66.indexOf(dateTimeFieldType67);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay66.minusYears((int) 'a');
        org.joda.time.DateTime dateTime71 = yearMonthDay66.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay66.withPeriodAdded(readablePeriod72, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay74.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.plusDays(1);
        boolean boolean79 = yearMonthDay41.isEqual((org.joda.time.ReadablePartial) yearMonthDay78);
        boolean boolean80 = yearMonthDay31.isEqual((org.joda.time.ReadablePartial) yearMonthDay78);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay78.minusMonths(1873);
        org.joda.time.TimeOfDay timeOfDay83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = yearMonthDay82.toDateTime(timeOfDay83, dateTimeZone84);
        int int86 = property2.compareTo((org.joda.time.ReadablePartial) yearMonthDay82);
        org.joda.time.DateMidnight dateMidnight87 = yearMonthDay82.toDateMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight87);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay10.toDateTime(timeOfDay13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        int int14 = property7.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay16 = property7.setCopy("1978-05-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1978-05-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.lang.String str5 = property2.getAsString();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addWrapFieldToCopy((int) (byte) 10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay24 = property23.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay26 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay28.monthOfYear();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property34.getAsText(locale35);
        java.lang.String str37 = property34.getAsText();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale41 = null;
        java.lang.String str42 = yearMonthDay39.toString("1970-01-01", locale41);
        java.lang.String str43 = yearMonthDay39.toString();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay39.minusYears((int) (byte) -1);
        boolean boolean46 = property34.equals((java.lang.Object) yearMonthDay45);
        org.joda.time.YearMonthDay yearMonthDay47 = property34.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay47.withPeriodAdded(readablePeriod48, 12);
        int[] intArray51 = yearMonthDay47.getValues();
        int int52 = property23.compareTo((org.joda.time.ReadablePartial) yearMonthDay47);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "January" + "'", str36, "January");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "January" + "'", str37, "January");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01" + "'", str42, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 12, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property8.getAsText(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property8.getFieldType();
        boolean boolean14 = yearMonthDay5.isSupported(dateTimeFieldType13);
        java.lang.String str15 = yearMonthDay5.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1873-01-01" + "'", str15, "1873-01-01");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        boolean boolean14 = property12.equals((java.lang.Object) '4');
        java.lang.String str15 = property12.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property12.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonthDay1.toInterval(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay29.toDateMidnight();
        java.lang.String str35 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonthDay29.get(dateTimeFieldType43);
        int int45 = yearMonthDay9.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateTime dateTime52 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay47.withPeriodAdded(readablePeriod53, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay57.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology60 = yearMonthDay59.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay9, chronology60);
        int int62 = yearMonthDay9.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay9.withYear(9);
        org.joda.time.Chronology chronology65 = yearMonthDay9.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withPeriodAdded(readablePeriod4, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonthDay8.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.minusYears((int) 'a');
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withPeriodAdded(readablePeriod14, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withDayOfMonth(1);
        boolean boolean20 = yearMonthDay16.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate21 = yearMonthDay16.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay37.toDateMidnight();
        java.lang.String str43 = yearMonthDay37.toString();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay45.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay47 = property46.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField48 = property46.getField();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property46.getAsText(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property46.getFieldType();
        int int52 = yearMonthDay37.get(dateTimeFieldType51);
        int int53 = yearMonthDay37.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonthDay55.indexOf(dateTimeFieldType56);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay55.toDateMidnight();
        java.lang.String str61 = yearMonthDay55.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = yearMonthDay55.getFields();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay64.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay66 = property65.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property65.getAsText(locale68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property65.getFieldType();
        boolean boolean71 = yearMonthDay55.isSupported(dateTimeFieldType70);
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay37.property(dateTimeFieldType70);
        int int73 = yearMonthDay33.indexOf(dateTimeFieldType70);
        int int74 = localDate21.indexOf(dateTimeFieldType70);
        boolean boolean75 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay1.plusDays((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01" + "'", str61, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(yearMonthDay77);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property2.getFieldType();
        int int8 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonthDay10.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withPeriodAdded(readablePeriod16, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay22.year();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.plusDays((int) (byte) 1);
        boolean boolean26 = property2.equals((java.lang.Object) yearMonthDay25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonthDay40.toInterval(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = yearMonthDay40.getFields();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay40.plusMonths(1970);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonthDay48.indexOf(dateTimeFieldType49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay48.minusYears((int) 'a');
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay48.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology61 = yearMonthDay60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay63.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay65 = property64.withMinimumValue();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property64.getAsShortText(locale66);
        org.joda.time.DateTimeField dateTimeField68 = property64.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property64.getFieldType();
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay60.property(dateTimeFieldType69);
        org.joda.time.YearMonthDay.Property property71 = yearMonthDay40.property(dateTimeFieldType69);
        int int72 = yearMonthDay25.indexOf(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.monthOfYear();
        java.lang.String str38 = property37.getAsString();
        java.lang.String str39 = property37.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "4" + "'", str38, "4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "monthOfYear" + "'", str39, "monthOfYear");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay1.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay1.plusMonths(97);
        org.joda.time.DateTime dateTime16 = yearMonthDay1.toDateTimeAtMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay24 = property23.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        int int26 = property23.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay1.toString(dateTimeFormatter4);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = yearMonthDay8.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay8.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay1.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonthDay37.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.minusYears((int) 'a');
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay37.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonthDay45.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minusYears((int) 'a');
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay45.monthOfYear();
        java.util.Locale locale52 = null;
        int int53 = property51.getMaximumTextLength(locale52);
        java.lang.String str54 = property51.getAsText();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonthDay56.indexOf(dateTimeFieldType57);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay56.minusYears((int) 'a');
        org.joda.time.DateTime dateTime61 = yearMonthDay56.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay56.withPeriodAdded(readablePeriod62, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay64.minus(readablePeriod67);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay68.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay68.toDateTimeAtCurrentTime(dateTimeZone70);
        int int72 = property51.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property43.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DurationField durationField74 = property43.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay76 = property43.addToCopy(1970);
        boolean boolean77 = yearMonthDay35.isBefore((org.joda.time.ReadablePartial) yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "January" + "'", str54, "January");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumShortTextLength(locale3);
        int int5 = property2.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        int int7 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        org.joda.time.Interval interval9 = yearMonthDay4.toInterval();
        int[] intArray10 = yearMonthDay4.getValues();
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) intArray10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay13.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay13.minus(readablePeriod19);
        int int21 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValueOverall();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property2.getAsText(locale4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay1.toDateMidnight();
        java.lang.String str7 = yearMonthDay1.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonthDay1.getFields();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonthDay1.isSupported(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay1.plusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths(31);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minus(readablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale27 = null;
        java.lang.String str28 = yearMonthDay25.toString("1970-01-01", locale27);
        java.lang.String str29 = yearMonthDay25.toString();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay25.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay33.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay35 = property34.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = yearMonthDay35.toString(dateTimeFormatter36);
        boolean boolean38 = yearMonthDay25.isBefore((org.joda.time.ReadablePartial) yearMonthDay35);
        java.util.Locale locale40 = null;
        java.lang.String str41 = yearMonthDay35.toString("1", locale40);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay35.toDateMidnight();
        org.joda.time.DateTime dateTime43 = yearMonthDay23.toDateTime((org.joda.time.ReadableInstant) dateMidnight42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        java.lang.String str8 = property2.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addToCopy((-1));
        java.util.Locale locale7 = null;
        int int8 = property2.getMaximumTextLength(locale7);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay29 = property28.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = yearMonthDay29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay29.toDateMidnight(dateTimeZone32);
        int int34 = yearMonthDay13.compareTo((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay13.withPeriodAdded(readablePeriod16, 2);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay13.minusDays((int) (short) 1);
        java.lang.Class<?> wildcardClass21 = yearMonthDay13.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        java.lang.String str34 = yearMonthDay30.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay30.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = yearMonthDay36.getFieldTypes();
        int int40 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        java.lang.String str41 = property7.toString();
        java.lang.String str42 = property7.getAsString();
        int int43 = property7.get();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[monthOfYear]" + "'", str41, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusDays((int) (short) 1);
        java.util.Locale locale11 = null;
        java.lang.String str12 = yearMonthDay9.toString("1", locale11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withPeriodAdded(readablePeriod4, (int) (short) -1);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonthDay14.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.minusYears((int) 'a');
        org.joda.time.DateTime dateTime19 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay14.withPeriodAdded(readablePeriod20, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1, chronology27);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay11.withChronologyRetainFields(chronology27);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) 2, chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeFieldType8, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMaximumValue();
        java.lang.String str8 = property2.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfMonth" + "'", str8, "dayOfMonth");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay9.plusYears((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plusDays((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay7.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(0);
        java.lang.Object obj12 = null;
        boolean boolean13 = yearMonthDay9.equals(obj12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minusMonths(22);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = yearMonthDay9.toInterval(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay9.minus(readablePeriod21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay49 = property16.setCopy(3);
        int int50 = property16.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay54 = property53.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = yearMonthDay54.toString(dateTimeFormatter55);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTime(timeOfDay57, dateTimeZone58);
        int int60 = property16.compareTo((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str61 = property16.getAsString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMinimumValueOverall();
        int int8 = property2.getMaximumValue();
        int int9 = property2.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property2.getAsText(locale10);
        org.joda.time.DurationField durationField12 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property2.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonthDay9.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears((int) 'a');
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        boolean boolean15 = property2.equals((java.lang.Object) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property18.getAsText(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        boolean boolean24 = yearMonthDay13.equals((java.lang.Object) property18);
        int int25 = property18.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property17.getAsShortText(locale24);
        java.lang.String str26 = property17.getName();
        boolean boolean27 = yearMonthDay9.equals((java.lang.Object) str26);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay29.toDateMidnight();
        java.lang.String str35 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonthDay29.get(dateTimeFieldType43);
        int int45 = yearMonthDay9.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay9.minusYears(1);
        org.joda.time.DateTime dateTime48 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTime(readableInstant17);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale22 = null;
        java.lang.String str23 = yearMonthDay20.toString("1970-01-01", locale22);
        java.lang.String str24 = yearMonthDay20.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.dayOfMonth();
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        int int36 = yearMonthDay28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.plusDays(1);
        boolean boolean51 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateTime dateTime58 = yearMonthDay53.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay53.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.plusDays(1);
        boolean boolean66 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        boolean boolean67 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((java.lang.Object) boolean67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale4 = null;
        java.lang.String str5 = yearMonthDay2.toString("1970-01-01", locale4);
        java.lang.String str6 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate9 = yearMonthDay2.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay2.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonthDay32.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay32.toDateMidnight();
        java.lang.String str38 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonthDay40.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.minusYears((int) 'a');
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay40.withPeriodAdded(readablePeriod46, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean51 = yearMonthDay32.isAfter((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay53.toDateMidnight();
        java.lang.String str59 = yearMonthDay53.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonthDay53.getFields();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay62.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        boolean boolean69 = yearMonthDay53.isSupported(dateTimeFieldType68);
        boolean boolean70 = yearMonthDay32.isSupported(dateTimeFieldType68);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay28.withField(dateTimeFieldType68, 31);
        org.joda.time.Chronology chronology73 = yearMonthDay72.getChronology();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay72.withPeriodAdded(readablePeriod74, 12);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Interval interval78 = yearMonthDay76.toInterval(dateTimeZone77);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(interval78);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.addToCopy((int) '4');
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumShortTextLength(locale5);
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.getYearMonthDay();
        org.joda.time.DurationField durationField9 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addWrapFieldToCopy(1);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale18 = null;
        java.lang.String str19 = yearMonthDay16.toString("1970-01-01", locale18);
        java.lang.String str20 = yearMonthDay16.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay16.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate23 = yearMonthDay16.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonthDay26.indexOf(dateTimeFieldType27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minusYears((int) 'a');
        org.joda.time.DateTime dateTime31 = yearMonthDay26.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay26.withPeriodAdded(readablePeriod32, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1, chronology39);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonthDay43.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minusYears((int) 'a');
        org.joda.time.DateTime dateTime48 = yearMonthDay43.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay43.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minus(readablePeriod54);
        int int56 = yearMonthDay55.getMonthOfYear();
        int[] intArray57 = yearMonthDay55.getValues();
        boolean boolean58 = yearMonthDay16.isBefore((org.joda.time.ReadablePartial) yearMonthDay55);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay16.plus(readablePeriod59);
        int int61 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay60);
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTimeAtMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumShortTextLength(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = property7.setCopy(2);
        int[] intArray12 = yearMonthDay11.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 2, 1]");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.lang.String str4 = property2.toString();
        int int5 = property2.getMaximumValue();
        int int6 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfMonth]" + "'", str4, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property2.getAsShortText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.addToCopy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = yearMonthDay7.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusDays((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusMonths((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonthDay1.toString(dateTimeFormatter4);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonthDay8.toString("1970-01-01", locale10);
        java.lang.String str12 = yearMonthDay8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = yearMonthDay8.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay8.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay1.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withMonthOfYear(2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay38);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = yearMonthDay4.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = yearMonthDay13.toString("1970-01-01", locale15);
        java.lang.String str17 = yearMonthDay13.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate20 = yearMonthDay13.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonthDay23.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.minusYears((int) 'a');
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withPeriodAdded(readablePeriod29, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay13.withChronologyRetainFields(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay4.withChronologyRetainFields(chronology36);
        boolean boolean41 = property2.equals((java.lang.Object) yearMonthDay4);
        org.joda.time.DateTime dateTime42 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.util.Locale locale3 = null;
        int int4 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = yearMonthDay7.indexOf(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.minusYears((int) 'a');
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withPeriodAdded(readablePeriod13, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.monthOfYear();
        boolean boolean21 = property2.equals((java.lang.Object) yearMonthDay19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property2.getAsShortText(locale22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        boolean boolean13 = yearMonthDay9.equals((java.lang.Object) (short) -1);
        int int14 = yearMonthDay9.getDayOfMonth();
        org.joda.time.DateTime dateTime15 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusDays(1);
        int int14 = yearMonthDay9.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonthDay9.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.plusMonths(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.minusYears((int) (short) 1);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonthDay19.toString("1970-01-01", locale21);
        java.lang.String str23 = yearMonthDay19.toString();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay19.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = yearMonthDay19.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonthDay29.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.minusYears((int) 'a');
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay29.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay19.withChronologyRetainFields(chronology42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonthDay46.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.minusYears((int) 'a');
        org.joda.time.DateTime dateTime51 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minus(readablePeriod57);
        int int59 = yearMonthDay58.getMonthOfYear();
        int[] intArray60 = yearMonthDay58.getValues();
        boolean boolean61 = yearMonthDay19.isBefore((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay58.plusYears(1970);
        boolean boolean64 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) yearMonthDay63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay16.plus(readablePeriod65);
        org.joda.time.DateTime dateTime67 = yearMonthDay16.toDateTimeAtMidnight();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        int int14 = property7.getMaximumValueOverall();
        java.lang.String str15 = property7.getAsText();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property7.getAsText(locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = property7.addToCopy(22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "January" + "'", str17, "January");
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(1);
        org.joda.time.LocalDate localDate12 = yearMonthDay9.toLocalDate();
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonthDay15.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.minusYears((int) 'a');
        org.joda.time.DateTime dateTime20 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withPeriodAdded(readablePeriod21, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonthDay25.indexOf(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay25.toDateMidnight();
        org.joda.time.DateTime dateTime31 = yearMonthDay23.toDateTime((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minus(readablePeriod44);
        int int46 = yearMonthDay45.getMonthOfYear();
        int[] intArray47 = yearMonthDay45.getValues();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay45.plusMonths(0);
        int int52 = yearMonthDay23.compareTo((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = yearMonthDay54.indexOf(dateTimeFieldType55);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.minusYears((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay54.plusYears((int) '4');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay54.minusDays((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay54.withPeriodAdded(readablePeriod63, (-1));
        org.joda.time.LocalDate localDate66 = yearMonthDay54.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonthDay68.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay68.toDateMidnight();
        java.lang.String str74 = yearMonthDay68.toString();
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property77 = yearMonthDay76.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay78 = property77.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField79 = property77.getField();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property77.getAsText(locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property77.getFieldType();
        int int83 = yearMonthDay68.get(dateTimeFieldType82);
        org.joda.time.YearMonthDay.Property property84 = yearMonthDay54.property(dateTimeFieldType82);
        int int85 = yearMonthDay23.indexOf(dateTimeFieldType82);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay9.withField(dateTimeFieldType82, (int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay87.plusDays(9);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay87.withPeriodAdded(readablePeriod90, 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-01" + "'", str74, "1970-01-01");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(yearMonthDay92);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = property14.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((int) (short) 10, 0, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusDays(1970);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.minusYears(2);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonthDay18.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withPeriodAdded(readablePeriod24, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minus(readablePeriod29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusYears(1970);
        boolean boolean33 = yearMonthDay16.isBefore((org.joda.time.ReadablePartial) yearMonthDay32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.withFieldAdded(durationFieldType34, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.dayOfMonth();
        org.joda.time.Interval interval6 = yearMonthDay1.toInterval();
        int[] intArray7 = yearMonthDay1.getValues();
        int int8 = yearMonthDay1.getYear();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale17 = null;
        java.lang.String str18 = yearMonthDay15.toString("1970-01-01", locale17);
        java.lang.String str19 = yearMonthDay15.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay15.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate22 = yearMonthDay15.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonthDay25.indexOf(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusYears((int) 'a');
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay25.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) -1, chronology38);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay15.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) 10, chronology38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology38);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay1, chronology38);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = yearMonthDay43.getFields();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = yearMonthDay13.toString("1970-01-01", locale15);
        java.lang.String str17 = yearMonthDay13.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate20 = yearMonthDay13.toLocalDate();
        boolean boolean21 = yearMonthDay9.equals((java.lang.Object) localDate20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonthDay24.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears((int) 'a');
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = yearMonthDay36.toInterval(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTime(readableInstant40);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonthDay44.indexOf(dateTimeFieldType45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minusYears((int) 'a');
        org.joda.time.DateTime dateTime49 = yearMonthDay44.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay44.withPeriodAdded(readablePeriod50, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology57 = yearMonthDay56.getChronology();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1, chronology57);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay36, chronology57);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay36.withYear(1873);
        boolean boolean62 = yearMonthDay9.isBefore((org.joda.time.ReadablePartial) yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTime(readableInstant17);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale22 = null;
        java.lang.String str23 = yearMonthDay20.toString("1970-01-01", locale22);
        java.lang.String str24 = yearMonthDay20.toString();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = yearMonthDay30.toString("1970-01-01", locale32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.dayOfMonth();
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        int int36 = yearMonthDay28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay38.withPeriodAdded(readablePeriod44, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.plusDays(1);
        boolean boolean51 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonthDay53.indexOf(dateTimeFieldType54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minusYears((int) 'a');
        org.joda.time.DateTime dateTime58 = yearMonthDay53.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay53.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.plusDays(1);
        boolean boolean66 = yearMonthDay28.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        boolean boolean67 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) yearMonthDay65);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay13.plusYears((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addToCopy((-1));
        int int7 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property2.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay10 = property2.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonthDay13.toString(dateTimeFormatter14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale20 = null;
        java.lang.String str21 = yearMonthDay18.toString("1970-01-01", locale20);
        java.lang.String str22 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay18.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = yearMonthDay18.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonthDay28.indexOf(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minusYears((int) 'a');
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.withPeriodAdded(readablePeriod34, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay43.getFieldTypes();
        int int47 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay43.plusDays(10);
        org.joda.time.DateTime dateTime50 = yearMonthDay49.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((int) (short) 100, (int) (short) 1, 11);
        int int4 = yearMonthDay3.size();
        int int5 = yearMonthDay3.getYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        boolean boolean13 = yearMonthDay9.equals((java.lang.Object) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        boolean boolean21 = property19.equals((java.lang.Object) '4');
        java.lang.String str22 = property19.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property19.getFieldType();
        boolean boolean24 = yearMonthDay9.equals((java.lang.Object) property19);
        org.joda.time.DateTimeField dateTimeField25 = property19.getField();
        int int26 = property19.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay28 = property19.setCopy("Jan");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        java.lang.String str4 = property2.getName();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.DurationField durationField8 = property2.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property2.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "dayOfMonth" + "'", str4, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale9 = null;
        java.lang.String str10 = yearMonthDay7.toString("1970-01-01", locale9);
        java.lang.String str11 = yearMonthDay7.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate14 = yearMonthDay7.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonthDay17.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) 'a');
        org.joda.time.DateTime dateTime22 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay17.withPeriodAdded(readablePeriod23, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology30 = yearMonthDay29.getChronology();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1, chronology30);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay7.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) 10, chronology30);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) (byte) 10, 1, (int) (byte) 1, chronology30);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) 1, chronology30);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(100L, chronology30);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonthDay38.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay38.toDateMidnight();
        java.lang.String str44 = yearMonthDay38.toString();
        org.joda.time.Chronology chronology45 = yearMonthDay38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale49 = null;
        java.lang.String str50 = yearMonthDay47.toString("1970-01-01", locale49);
        java.lang.String str51 = yearMonthDay47.toString();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay47.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate54 = yearMonthDay47.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonthDay57.indexOf(dateTimeFieldType58);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay57.minusYears((int) 'a');
        org.joda.time.DateTime dateTime62 = yearMonthDay57.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay65.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology70 = yearMonthDay69.getChronology();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((long) (short) -1, chronology70);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay47.withChronologyRetainFields(chronology70);
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonthDay74.indexOf(dateTimeFieldType75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay74.minusYears((int) 'a');
        org.joda.time.DateTime dateTime79 = yearMonthDay74.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay74.withPeriodAdded(readablePeriod80, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay82.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay82.minus(readablePeriod85);
        int int87 = yearMonthDay86.getMonthOfYear();
        int[] intArray88 = yearMonthDay86.getValues();
        boolean boolean89 = yearMonthDay47.isBefore((org.joda.time.ReadablePartial) yearMonthDay86);
        boolean boolean90 = yearMonthDay38.isBefore((org.joda.time.ReadablePartial) yearMonthDay86);
        boolean boolean91 = yearMonthDay36.isAfter((org.joda.time.ReadablePartial) yearMonthDay86);
        org.joda.time.TimeOfDay timeOfDay92 = null;
        org.joda.time.DateTimeZone dateTimeZone93 = null;
        org.joda.time.DateTime dateTime94 = yearMonthDay36.toDateTime(timeOfDay92, dateTimeZone93);
        org.joda.time.DateTimeZone dateTimeZone95 = null;
        org.joda.time.DateTime dateTime96 = yearMonthDay36.toDateTimeAtMidnight(dateTimeZone95);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01" + "'", str51, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonthDay11.toString(dateTimeFormatter12);
        boolean boolean14 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.Locale locale16 = null;
        java.lang.String str17 = yearMonthDay11.toString("1", locale16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonthDay20.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minusYears((int) 'a');
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withPeriodAdded(readablePeriod26, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.minus(readablePeriod31);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay28.toString("1970-01-01", locale34);
        boolean boolean36 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay28);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay28.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay39.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        org.joda.time.YearMonthDay yearMonthDay43 = property40.getYearMonthDay();
        java.lang.String str44 = property40.getAsString();
        java.lang.String str45 = property40.getAsString();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonthDay47.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusYears((int) 'a');
        org.joda.time.DateTime dateTime52 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay47.withPeriodAdded(readablePeriod53, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = property40.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = property37.compareTo((org.joda.time.ReadableInstant) dateTime57);
        java.util.Locale locale60 = null;
        int int61 = property37.getMaximumShortTextLength(locale60);
        org.joda.time.YearMonthDay yearMonthDay62 = property37.withMinimumValue();
        org.joda.time.DurationField durationField63 = property37.getDurationField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        boolean boolean4 = property2.equals((java.lang.Object) '4');
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay9 = property2.withMaximumValue();
        java.lang.Class<?> wildcardClass10 = property2.getClass();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy("January");
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonthDay14.getFieldTypes();
        org.joda.time.Interval interval16 = yearMonthDay14.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay yearMonthDay24 = property23.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay26 = property23.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay26 = property17.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay28 = property17.addToCopy(10);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withYear(2);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonthDay35.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.minusYears((int) 'a');
        org.joda.time.DateTime dateTime40 = yearMonthDay35.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay35.withPeriodAdded(readablePeriod41, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.minus(readablePeriod46);
        org.joda.time.Chronology chronology48 = yearMonthDay43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay32.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonthDay51.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minusYears((int) 'a');
        org.joda.time.DateTime dateTime56 = yearMonthDay51.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay51.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay59.minus(readablePeriod62);
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay59.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay66.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay68 = property67.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        java.util.Locale locale70 = null;
        java.lang.String str71 = property67.getAsText(locale70);
        org.joda.time.YearMonthDay yearMonthDay73 = property67.setCopy((int) (short) 1);
        java.util.Locale locale74 = null;
        java.lang.String str75 = property67.getAsShortText(locale74);
        java.lang.String str76 = property67.getName();
        boolean boolean77 = yearMonthDay59.equals((java.lang.Object) str76);
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonthDay79.indexOf(dateTimeFieldType80);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay79.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight84 = yearMonthDay79.toDateMidnight();
        java.lang.String str85 = yearMonthDay79.toString();
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property88 = yearMonthDay87.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay89 = property88.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField90 = property88.getField();
        java.util.Locale locale91 = null;
        java.lang.String str92 = property88.getAsText(locale91);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property88.getFieldType();
        int int94 = yearMonthDay79.get(dateTimeFieldType93);
        int int95 = yearMonthDay59.indexOf(dateTimeFieldType93);
        int int96 = yearMonthDay49.get(dateTimeFieldType93);
        int int97 = yearMonthDay28.get(dateTimeFieldType93);
        int[] intArray98 = yearMonthDay28.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "dayOfMonth" + "'", str76, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970-01-01" + "'", str85, "1970-01-01");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 11 + "'", int97 == 11);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[1970, 1, 11]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonthDay11.toString("1970-01-01", locale13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.dayOfMonth();
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        int int17 = yearMonthDay9.compareTo((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(1);
        boolean boolean32 = yearMonthDay9.isEqual((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusMonths((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonthDay41.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusYears((int) 'a');
        org.joda.time.DateTime dateTime46 = yearMonthDay41.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay41.withPeriodAdded(readablePeriod47, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay49.minus(readablePeriod52);
        org.joda.time.Chronology chronology54 = yearMonthDay49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay38.withChronologyRetainFields(chronology54);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay34, chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTimeAtMidnight(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.lang.String str4 = property2.getAsText();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumShortTextLength(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval9 = yearMonthDay7.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay6 = property2.addWrapFieldToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property9.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = property9.withMaximumValue();
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withChronologyRetainFields(chronology17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay18.dayOfMonth();
        boolean boolean22 = property20.equals((java.lang.Object) "1970-10-01");
        org.joda.time.YearMonthDay yearMonthDay23 = property20.getYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.plus(readablePeriod24);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.plus(readablePeriod8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay1.minusMonths(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = yearMonthDay12.toString("1970-01-01", locale14);
        java.lang.String str16 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears((int) (byte) -1);
        boolean boolean19 = property7.equals((java.lang.Object) yearMonthDay18);
        java.util.Locale locale21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = property7.setCopy("Jan", locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property7.getFieldType();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonthDay12.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.minusYears((int) 'a');
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withPeriodAdded(readablePeriod18, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.minus(readablePeriod23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property7.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay31.dayOfMonth();
        int int33 = property32.getMaximumValue();
        boolean boolean34 = property7.equals((java.lang.Object) property32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = property7.getAsShortText(locale35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Jan" + "'", str36, "Jan");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        boolean boolean11 = yearMonthDay1.equals((java.lang.Object) "1");
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTime(readableInstant29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay33.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1, chronology46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay25, chronology46);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale53 = null;
        java.lang.String str54 = yearMonthDay51.toString("1970-01-01", locale53);
        java.lang.String str55 = yearMonthDay51.toString();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate58 = yearMonthDay51.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay51.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay48.withChronologyRetainFields(chronology74);
        int int79 = yearMonthDay1.compareTo((org.joda.time.ReadablePartial) yearMonthDay78);
        org.joda.time.DateMidnight dateMidnight80 = yearMonthDay78.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        int int84 = yearMonthDay82.indexOf(dateTimeFieldType83);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay82.minusYears((int) 'a');
        org.joda.time.DateTime dateTime87 = yearMonthDay82.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property88 = yearMonthDay82.monthOfYear();
        org.joda.time.YearMonthDay.Property property89 = yearMonthDay82.year();
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay82.plusDays(1971);
        org.joda.time.DateTimeField[] dateTimeFieldArray92 = yearMonthDay91.getFields();
        int int93 = yearMonthDay78.compareTo((org.joda.time.ReadablePartial) yearMonthDay91);
        org.joda.time.DateTimeField[] dateTimeFieldArray94 = yearMonthDay91.getFields();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldArray92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray94);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 1873);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = yearMonthDay3.indexOf(dateTimeFieldType4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.DateTime dateTime8 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.withPeriodAdded(readablePeriod9, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = yearMonthDay15.toInterval(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay15.withPeriodAdded(readablePeriod18, 2);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusDays(1873);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay25.withChronologyRetainFields(chronology27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonthDay30.indexOf(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minusYears((int) 'a');
        org.joda.time.DateTime dateTime35 = yearMonthDay30.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay30.monthOfYear();
        java.util.Locale locale37 = null;
        int int38 = property36.getMaximumTextLength(locale37);
        org.joda.time.DurationField durationField39 = property36.getDurationField();
        int int40 = property36.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property36.getFieldType();
        int int42 = yearMonthDay25.indexOf(dateTimeFieldType41);
        boolean boolean43 = yearMonthDay23.isSupported(dateTimeFieldType41);
        int int44 = yearMonthDay1.indexOf(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay13 = property7.addToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay14 = property7.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (byte) 0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale6 = null;
        java.lang.String str7 = yearMonthDay4.toString("1970-01-01", locale6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.dayOfMonth();
        java.util.Locale locale10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy("1", locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonthDay13.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusYears((int) 'a');
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay13.withPeriodAdded(readablePeriod19, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonthDay25.toInterval(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withYear((int) (short) 1);
        boolean boolean30 = yearMonthDay11.isEqual((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale34 = null;
        java.lang.String str35 = yearMonthDay32.toString("1970-01-01", locale34);
        java.lang.String str36 = yearMonthDay32.toString();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay32.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = yearMonthDay32.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonthDay42.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusYears((int) 'a');
        org.joda.time.DateTime dateTime47 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay11, chronology55);
        boolean boolean60 = yearMonthDay1.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay1.plusMonths((int) (short) 10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withDayOfMonth(1);
        boolean boolean31 = yearMonthDay27.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate32 = yearMonthDay27.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale36 = null;
        java.lang.String str37 = yearMonthDay34.toString("1970-01-01", locale36);
        java.lang.String str38 = yearMonthDay34.toString();
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay34.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate41 = yearMonthDay34.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonthDay44.indexOf(dateTimeFieldType45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minusYears((int) 'a');
        org.joda.time.DateTime dateTime49 = yearMonthDay44.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay44.withPeriodAdded(readablePeriod50, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology57 = yearMonthDay56.getChronology();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1, chronology57);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay34.withChronologyRetainFields(chronology57);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonthDay61.indexOf(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.minusYears((int) 'a');
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay69.minus(readablePeriod72);
        int int74 = yearMonthDay73.getMonthOfYear();
        int[] intArray75 = yearMonthDay73.getValues();
        boolean boolean76 = yearMonthDay34.isBefore((org.joda.time.ReadablePartial) yearMonthDay73);
        org.joda.time.Chronology chronology77 = yearMonthDay73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((java.lang.Object) localDate32, chronology77);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay15.withChronologyRetainFields(chronology77);
        java.lang.Object obj80 = null;
        boolean boolean81 = yearMonthDay79.equals(obj80);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withYear((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonthDay19.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears((int) 'a');
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay19.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusMonths(1);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonthDay33.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay33.toDateMidnight();
        java.lang.String str39 = yearMonthDay33.toString();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay41.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay43 = property42.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property42.getAsText(locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property42.getFieldType();
        int int48 = yearMonthDay33.get(dateTimeFieldType47);
        int int49 = yearMonthDay33.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonthDay51.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay51.toDateMidnight();
        java.lang.String str57 = yearMonthDay51.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = yearMonthDay51.getFields();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay60.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay62 = property61.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        java.util.Locale locale64 = null;
        java.lang.String str65 = property61.getAsText(locale64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property61.getFieldType();
        boolean boolean67 = yearMonthDay51.isSupported(dateTimeFieldType66);
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay33.property(dateTimeFieldType66);
        int int69 = yearMonthDay29.indexOf(dateTimeFieldType66);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay13.property(dateTimeFieldType66);
        int int71 = property70.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01" + "'", str57, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property7.getAsShortText(locale11);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property7.getAsText(locale13);
        org.joda.time.YearMonthDay yearMonthDay16 = property7.addToCopy((-1));
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay19 = property7.setCopy("2020-11-25", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11-25\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "January" + "'", str14, "January");
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property17.getFieldType();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay13.property(dateTimeFieldType22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = yearMonthDay13.toString("1813-12-02", locale25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1813-12-02" + "'", str26, "1813-12-02");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        int int10 = property7.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay11 = property7.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonthDay1.toString("1970-01-01", locale3);
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusYears((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonthDay11.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.minusYears((int) 'a');
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.withPeriodAdded(readablePeriod17, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonthDay26.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonthDay26.toInterval(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay26.toDateTime(timeOfDay32, dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonthDay13.toInterval(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonthDay22.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.minusYears((int) 'a');
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withPeriodAdded(readablePeriod28, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.minus(readablePeriod33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.YearMonthDay yearMonthDay44 = property38.setCopy((int) (short) 1);
        java.util.Locale locale45 = null;
        java.lang.String str46 = property38.getAsShortText(locale45);
        java.lang.String str47 = property38.getName();
        boolean boolean48 = yearMonthDay30.equals((java.lang.Object) str47);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonthDay50.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay50.minusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay50.toDateMidnight();
        java.lang.String str56 = yearMonthDay50.toString();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay58.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsText(locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        int int65 = yearMonthDay50.get(dateTimeFieldType64);
        int int66 = yearMonthDay30.indexOf(dateTimeFieldType64);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonthDay68.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minusYears((int) 'a');
        org.joda.time.DateTime dateTime73 = yearMonthDay68.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay68.withPeriodAdded(readablePeriod74, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay78.withDayOfMonth((int) (byte) 1);
        org.joda.time.Chronology chronology81 = yearMonthDay80.getChronology();
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay30, chronology81);
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime20, chronology81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay13.withChronologyRetainFields(chronology81);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay13.minusYears(100);
        java.lang.String str88 = yearMonthDay86.toString("1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dayOfMonth" + "'", str47, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1970" + "'", str88, "1970");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.monthOfYear();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property7.getAsText(locale8);
        java.lang.String str10 = property7.getAsText();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumShortTextLength(locale12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "January" + "'", str9, "January");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonthDay16.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears((int) 'a');
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.withPeriodAdded(readablePeriod22, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property14.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = property14.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay35 = property14.addToCopy((-292275054));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay35);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = property2.get();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        org.joda.time.DurationField durationField11 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property2.withMinimumValue();
        int int8 = property2.get();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        java.lang.String str11 = property2.getAsString();
        java.lang.String str12 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = yearMonthDay6.indexOf(dateTimeFieldType7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) 'a');
        org.joda.time.DateTime dateTime11 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.withPeriodAdded(readablePeriod12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = property2.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int18 = property2.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay20 = property2.addWrapFieldToCopy(2);
        java.lang.String str21 = property2.getAsText();
        java.lang.String str22 = property2.getAsShortText();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property2.getAsText(locale23);
        org.joda.time.YearMonthDay yearMonthDay25 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonthDay27.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears((int) 'a');
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.withPeriodAdded(readablePeriod33, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withDayOfMonth(1);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonthDay39.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = yearMonthDay39.getFields();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonthDay45.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.minusYears((int) 'a');
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay45.withPeriodAdded(readablePeriod51, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay53.minus(readablePeriod56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay53.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = yearMonthDay60.indexOf(dateTimeFieldType61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay60.minusYears((int) 'a');
        org.joda.time.DateTime dateTime65 = yearMonthDay60.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay60.withPeriodAdded(readablePeriod66, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay68.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay68.minus(readablePeriod71);
        org.joda.time.YearMonthDay.Property property73 = yearMonthDay72.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTimeAtCurrentTime(dateTimeZone74);
        int int76 = property58.compareTo((org.joda.time.ReadableInstant) dateTime75);
        int int77 = property58.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property58.getFieldType();
        int int79 = yearMonthDay39.indexOf(dateTimeFieldType78);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = yearMonthDay39.getFields();
        boolean boolean81 = yearMonthDay25.isEqual((org.joda.time.ReadablePartial) yearMonthDay39);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        int int3 = yearMonthDay1.indexOf(dateTimeFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears((int) 'a');
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.withPeriodAdded(readablePeriod7, (int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property17.getAsText(locale20);
        org.joda.time.YearMonthDay yearMonthDay23 = property17.setCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.withMaximumValue();
        boolean boolean25 = yearMonthDay13.equals((java.lang.Object) property17);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay29 = property28.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = yearMonthDay29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay29.toDateMidnight(dateTimeZone32);
        int int34 = yearMonthDay13.compareTo((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay38 = property37.withMinimumValue();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property37.getAsShortText(locale39);
        org.joda.time.DateTimeField dateTimeField41 = property37.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay13.withField(dateTimeFieldType42, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.getYearMonthDay();
        java.lang.String str6 = property2.getAsString();
        java.util.Locale locale7 = null;
        int int8 = property2.getMaximumTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property2.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) 100);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay8 = property2.setCopy((int) (short) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property2.getAsShortText(locale9);
        org.joda.time.YearMonthDay yearMonthDay12 = property2.addWrapFieldToCopy((int) (short) 100);
        int int13 = yearMonthDay12.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }
}


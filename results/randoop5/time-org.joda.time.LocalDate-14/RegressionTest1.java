import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        int int13 = property9.get();
        boolean boolean14 = property9.isLeap();
        org.joda.time.DurationField durationField15 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtMidnight(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) localDate9, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withCenturyOfEra(11);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(localTime16);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        long long14 = property13.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra(360);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate18.withDayOfMonth(2019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2019 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((int) (byte) 100, 2021, (-1), chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDate11.getFieldType(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
    }

    @Test
    @Ignore
  public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        java.lang.String str9 = property4.getAsShortText();
        org.joda.time.LocalDate localDate10 = property4.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMaximumValue();
        org.joda.time.LocalDate localDate13 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "70" + "'", str9, "70");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDate11.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        org.joda.time.LocalDate.Property property24 = localDate23.monthOfYear();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalDate localDate26 = property24.getLocalDate();
        java.lang.Class<?> wildcardClass27 = property24.getClass();
        boolean boolean28 = localDate15.equals((java.lang.Object) wildcardClass27);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    @Ignore
  public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        int int26 = property25.get();
        org.joda.time.LocalDate localDate28 = property25.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight(dateTimeZone29);
        long long31 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DurationField durationField32 = property5.getLeapDurationField();
        org.joda.time.LocalDate localDate33 = property5.roundCeilingCopy();
        int int34 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2020 + "'", int26 == 2020);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-49L) + "'", long31 == (-49L));
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.lang.String str12 = localDate11.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate11.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0099-01-01" + "'", str12, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property19 = localDate18.year();
        int int20 = property19.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292275054) + "'", int20 == (-292275054));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfEra();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(2020, (-2019), 20, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2019 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    @Ignore
  public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1);
        org.joda.time.LocalDate.Property property20 = localDate17.dayOfWeek();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.LocalDate localDate27 = localDate25.minusDays((int) (byte) 100);
        int int28 = localDate27.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(localTime31);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int int34 = property20.compareTo((org.joda.time.ReadableInstant) dateTime32);
        long long35 = property20.remainder();
        int int36 = property20.get();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
    }

    @Test
    @Ignore
  public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        java.lang.String str28 = property4.getName();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfCentury" + "'", str28, "yearOfCentury");
    }

    @Test
    @Ignore
  public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = localDate13.indexOf(dateTimeFieldType14);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate13.toDateTime(localTime16, dateTimeZone17);
        int int19 = property9.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate21.year();
        int int30 = property29.get();
        org.joda.time.LocalDate localDate32 = property29.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate32.toDateMidnight(dateTimeZone33);
        long long35 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTime dateTime36 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateMidnight34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1968 + "'", int19 == 1968);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2020 + "'", int30 == 2020);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-49L) + "'", long35 == (-49L));
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (short) 100, 70, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        int int14 = localDate12.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate12.withFieldAdded(durationFieldType15, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    @Ignore
  public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date20 = localDate19.toDate();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology25);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.LocalDate.Property property28 = localDate26.era();
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        boolean boolean30 = localDate17.equals((java.lang.Object) property29);
        org.joda.time.LocalDate localDate31 = property29.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        int int13 = localDate12.getDayOfYear();
        int int14 = localDate12.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        int int7 = localDate6.getMonthOfYear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        org.joda.time.DateTime dateTime12 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        org.joda.time.DurationField durationField11 = property6.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    @Ignore
  public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = localDate18.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        int int26 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property27 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = localDate18.withYearOfEra(2);
        org.joda.time.LocalDate localDate31 = localDate18.minusYears(100);
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(330);
        org.joda.time.LocalDate localDate35 = localDate33.withMonthOfYear((int) (short) 1);
        int int36 = property9.compareTo((org.joda.time.ReadablePartial) localDate33);
        int int37 = localDate33.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 27 + "'", int37 == 27);
    }

    @Test
    @Ignore
  public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        java.lang.String str14 = property9.toString();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        org.joda.time.LocalDate localDate20 = localDate18.withWeekyear(52);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date23 = localDate22.toDate();
        java.util.Locale locale25 = null;
        java.lang.String str26 = localDate22.toString("2020", locale25);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) localDate18, chronology27);
        org.joda.time.DateMidnight dateMidnight29 = localDate18.toDateMidnight();
        int int30 = property9.getDifference((org.joda.time.ReadableInstant) dateMidnight29);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[yearOfCentury]" + "'", str14, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2020" + "'", str26, "2020");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1969) + "'", int30 == (-1969));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDate16.toString(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0036-01-01" + "'", str18, "0036-01-01");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(10L, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(13, 292278993, (-2019), chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = property5.roundCeilingCopy();
        int int17 = localDate16.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        int int13 = property9.getMaximumValue();
        int int14 = property9.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) property9, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.Chronology chronology8 = localDate1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDate1.getField(2019);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2019");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.LocalDate localDate18 = localDate14.withDayOfWeek((int) (short) 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = localDate17.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        int int25 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate21);
        int int26 = localDate21.getDayOfYear();
        java.lang.String str27 = localDate21.toString();
        java.lang.String str29 = localDate21.toString("1");
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate21.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = localDate36.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = localDate40.getChronology();
        int int44 = localDate36.compareTo((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate.Property property45 = localDate36.weekOfWeekyear();
        org.joda.time.LocalDate localDate47 = localDate36.withYearOfEra(2);
        org.joda.time.LocalDate localDate49 = localDate36.minusYears(100);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks((-1));
        boolean boolean58 = localDate51.isEqual((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate.Property property59 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate55.withYearOfCentury((int) '#');
        int int62 = localDate61.getDayOfMonth();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate71 = localDate69.minusWeeks((-1));
        boolean boolean72 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.LocalDate localDate74 = localDate65.plusDays((int) (short) 100);
        boolean boolean75 = localDate63.isEqual((org.joda.time.ReadablePartial) localDate74);
        org.joda.time.LocalDate.Property property76 = localDate63.dayOfWeek();
        org.joda.time.LocalDate localDate77 = property76.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property76.getFieldType();
        int int79 = localDate61.indexOf(dateTimeFieldType78);
        org.joda.time.LocalDate.Property property80 = localDate36.property(dateTimeFieldType78);
        int int81 = localDate0.indexOf(dateTimeFieldType78);
        org.joda.time.LocalDate.Property property82 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate83 = property82.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(obj0, chronology1);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        boolean boolean30 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property31 = localDate27.yearOfCentury();
        java.lang.String str32 = property31.getAsShortText();
        org.joda.time.LocalDate localDate34 = property31.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property35 = localDate34.weekOfWeekyear();
        boolean boolean36 = localDate19.isAfter((org.joda.time.ReadablePartial) localDate34);
        int int37 = localDate34.getCenturyOfEra();
        int int38 = localDate34.getDayOfMonth();
        boolean boolean39 = localDate16.isBefore((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate41 = localDate16.withYearOfCentury(27);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    @Ignore
  public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate31.withFieldAdded(durationFieldType32, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = localDate1.toInterval(dateTimeZone2);
        org.junit.Assert.assertNotNull(interval3);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withCenturyOfEra((int) '#');
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate6.year();
        org.joda.time.LocalDate localDate14 = localDate6.minusYears(4);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate11 = localDate5.minusYears(6);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    @Ignore
  public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        java.lang.String str3 = localDate0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, 0);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(19);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate14 = localDate0.withFields((org.joda.time.ReadablePartial) localDate12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate12.withDayOfMonth(2019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2019 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2020-11-25" + "'", str3, "2020-11-25");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDate17.toString("January", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    @Ignore
  public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = property5.roundCeilingCopy();
        java.lang.String str17 = property5.getName();
        java.lang.String str18 = property5.getName();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate30 = localDate21.plusDays((int) (short) 100);
        boolean boolean31 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.LocalDate.Property property32 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = localDate36.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = localDate40.getChronology();
        int int44 = localDate36.compareTo((org.joda.time.ReadablePartial) localDate40);
        int int45 = localDate40.getDayOfYear();
        java.lang.String str46 = localDate40.toString();
        java.lang.String str48 = localDate40.toString("1");
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = localDate40.toDateMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate19.toDateTime((org.joda.time.ReadableInstant) dateMidnight50);
        int int52 = property5.getDifference((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-50) + "'", int52 == (-50));
    }

    @Test
    @Ignore
  public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField22 = property9.getField();
        org.joda.time.Interval interval23 = property9.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsShortText(locale19);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
    }

    @Test
    @Ignore
  public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        int[] intArray20 = localDate14.getValues();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        boolean boolean29 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property30 = localDate26.yearOfCentury();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.LocalDate localDate32 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) date41, chronology46);
        java.util.Date date48 = localDate47.toDate();
        org.joda.time.LocalDate.Property property49 = localDate47.era();
        org.joda.time.LocalDate.Property property50 = localDate47.dayOfMonth();
        boolean boolean51 = localDate38.equals((java.lang.Object) property50);
        int int52 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalTime localTime53 = null;
        org.joda.time.DateTime dateTime54 = localDate14.toDateTime(localTime53);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2, 1, 1]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime();
        int int4 = localDate1.getEra();
        org.joda.time.LocalDate localDate6 = localDate1.withDayOfYear(20);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    @Ignore
  public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekOfWeekyear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate11.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        long long15 = property12.remainder();
        java.lang.String str16 = property12.getAsText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withCenturyOfEra((int) '#');
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate6.year();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate6.toDateTimeAtStartOfDay(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate6.withEra(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(10, (int) (short) 1, 31);
    }

    @Test
    @Ignore
  public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str37 = localDate24.toString();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = localDate41.indexOf(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        int int49 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDate53.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology60 = localDate57.getChronology();
        int int61 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate57);
        int int62 = localDate53.size();
        boolean boolean63 = localDate45.isBefore((org.joda.time.ReadablePartial) localDate53);
        java.lang.String str65 = localDate53.toString("1970-01-01");
        boolean boolean66 = localDate24.isBefore((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date69 = localDate68.toDate();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.fromDateFields(date69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate70.minus(readablePeriod71);
        org.joda.time.LocalDate.Property property73 = localDate72.dayOfWeek();
        org.joda.time.LocalDate localDate75 = localDate72.withWeekyear((int) (short) 0);
        java.util.Locale locale77 = null;
        java.lang.String str78 = localDate72.toString("2020-11-25", locale77);
        int int79 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate.Property property80 = localDate72.yearOfEra();
        int int81 = localDate72.size();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2020-11-25" + "'", str78, "2020-11-25");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 100, dateTimeZone1);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsText(locale10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property10 = localDate4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = localDate4.toInterval(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    @Ignore
  public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = localDate25.toString("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property9.getAsText(locale16);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = property9.setCopy("dayOfMonth", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfWeek(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate1.withDayOfWeek(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = localDate18.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        org.joda.time.DurationField durationField13 = property9.getLeapDurationField();
        int int14 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 99 + "'", int14 == 99);
    }

    @Test
    @Ignore
  public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getWeekOfWeekyear();
        int int14 = localDate11.getYear();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.Interval interval16 = localDate14.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    @Ignore
  public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusYears((int) ' ');
        boolean boolean27 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = localDate18.withDayOfMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.LocalDate.Property property17 = localDate14.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(27, 6, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = localDate5.toInterval(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtStartOfDay(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate3.toDateTime(localTime6, dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate3.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = property5.roundCeilingCopy();
        org.joda.time.LocalDate.Property property17 = localDate16.year();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    @Ignore
  public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.monthOfYear();
        boolean boolean27 = property26.isLeap();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    @Ignore
  public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks((-1));
        boolean boolean12 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate14 = localDate5.plusDays((int) (short) 100);
        boolean boolean15 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property16 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date19 = localDate18.toDate();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate18.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate21.plusMonths(99);
        boolean boolean24 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) localDate23, dateTimeZone25);
        boolean boolean27 = localDate1.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDate.Property property28 = localDate1.weekyear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Wed Nov 25 00:00:00 UTC 2020");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        boolean boolean5 = localDate1.isSupported(durationFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate1.withEra((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone1, chronology5);
        org.joda.time.LocalDate localDate8 = localDate6.plusYears((int) 'a');
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    @Ignore
  public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        int[] intArray11 = localDate1.getValues();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTime dateTime13 = localDate1.toDateTime(localTime12);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2020, 11, 25]");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    @Ignore
  public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate8.era();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    @Ignore
  public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((-1));
        boolean boolean10 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate13.year();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone28);
        int int30 = property21.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        boolean boolean39 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtMidnight();
        int int41 = property21.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Class<?> wildcardClass44 = dateTime43.getClass();
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2019 + "'", int30 == 2019);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2019 + "'", int41 == 2019);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    @Ignore
  public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        java.lang.String str20 = property9.getName();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.LocalDate localDate27 = localDate25.minusDays((int) (byte) 100);
        int int28 = localDate27.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(localTime31);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        long long34 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = property9.getAsText(locale35);
        org.joda.time.LocalDate localDate37 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfCentury" + "'", str20, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1968L) + "'", long34 == (-1968L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    @Ignore
  public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = localDate25.indexOf(dateTimeFieldType26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology32 = localDate29.getChronology();
        int int33 = localDate25.compareTo((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = localDate29.toDateMidnight(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate29.minusYears((int) ' ');
        org.joda.time.LocalDate localDate39 = localDate29.minusYears((int) '#');
        org.joda.time.LocalDate localDate41 = localDate29.withDayOfYear(330);
        org.joda.time.LocalDate localDate43 = localDate41.plusYears(13);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date46 = localDate45.toDate();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.fromDateFields(date46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate49 = localDate47.minus(readablePeriod48);
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfWeek();
        org.joda.time.LocalDate localDate52 = localDate49.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) localDate52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date56 = localDate55.toDate();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology61 = localDate58.getChronology();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) date56, chronology61);
        java.util.Date date63 = localDate62.toDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate71 = localDate69.minusWeeks((-1));
        boolean boolean72 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.LocalDate localDate74 = localDate69.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property75 = localDate69.year();
        org.joda.time.LocalDate localDate77 = property75.setCopy((int) 'a');
        org.joda.time.LocalDate localDate79 = property75.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = localDate79.getFieldType(1);
        org.joda.time.LocalDate.Property property82 = localDate62.property(dateTimeFieldType81);
        org.joda.time.LocalDate localDate84 = localDate52.withField(dateTimeFieldType81, (int) (byte) 1);
        int int85 = localDate41.indexOf(dateTimeFieldType81);
        org.joda.time.LocalDate.Property property86 = localDate19.property(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDate7.getFields();
        org.joda.time.LocalDate localDate20 = localDate7.withDayOfYear(3);
        org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(12);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDate15.getFields();
        int[] intArray17 = localDate15.getValues();
        java.lang.Class<?> wildcardClass18 = localDate15.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[13, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    @Ignore
  public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDate25.toLocalDateTime(localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    @Ignore
  public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 2020, chronology9);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        org.joda.time.Interval interval10 = localDate5.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    @Ignore
  public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate11 = localDate5.minusYears(6);
        java.util.Date date12 = localDate11.toDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Jan 01 00:00:00 UTC 6");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0001-01-01");
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    @Ignore
  public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfCentury(3);
        int int54 = localDate51.getWeekyear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1980 + "'", int54 == 1980);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate5.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.LocalDate localDate9 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate5.withCenturyOfEra(20);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(13);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    @Ignore
  public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = localDate7.indexOf(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        int int15 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate11);
        int int16 = localDate11.getDayOfYear();
        java.lang.String str17 = localDate11.toString();
        java.lang.String str19 = localDate11.toString("1");
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate11.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate11.year();
        org.joda.time.LocalDate.Property property23 = localDate11.weekyear();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        int int25 = property3.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate27.year();
        int int36 = property35.get();
        org.joda.time.LocalDate localDate38 = property35.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate38.toDateMidnight(dateTimeZone39);
        int int41 = property3.getDifference((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.LocalDate localDate42 = property3.roundHalfEvenCopy();
        org.joda.time.Interval interval43 = property3.toInterval();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2020 + "'", int36 == 2020);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        int int14 = localDate13.size();
        int int15 = localDate13.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    @Ignore
  public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        int[] intArray11 = localDate1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate1.withYearOfCentury(2922750);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922750 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2020, 11, 25]");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate3.getEra();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate3.toDateTime(localTime13);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.setCopy(1);
        org.joda.time.DurationField durationField17 = property14.getRangeDurationField();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property14.getAsShortText(locale18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Thu" + "'", str19, "Thu");
    }

    @Test
    @Ignore
  public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        java.util.Locale locale13 = null;
        int int14 = property9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = property9.toString();
        org.joda.time.LocalDate localDate16 = property9.getLocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate19.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    @Ignore
  public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) localDate9, dateTimeZone12);
        int int14 = localDate13.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.String str13 = property9.getAsText();
        java.lang.String str14 = property9.getAsText();
        org.joda.time.LocalDate localDate15 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate12 = localDate1.withYearOfEra((int) ' ');
        int int13 = localDate12.getWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    @Ignore
  public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        int int39 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate40 = property9.withMaximumValue();
        java.lang.String str41 = property9.getAsText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
    }

    @Test
    @Ignore
  public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        int int26 = property25.get();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalTime localTime33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate30.toDateTime(localTime33, dateTimeZone34);
        long long36 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime35);
        int int37 = property15.compareTo((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = localDate10.equals((java.lang.Object) dateTime35);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology44 = localDate41.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 4, chronology44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime35, chronology44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology44);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2020 + "'", int26 == 2020);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2019L + "'", long36 == 2019L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1);
        org.joda.time.LocalDate.Property property20 = localDate17.centuryOfEra();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate.Property property20 = localDate7.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = localDate7.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    @Ignore
  public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        java.lang.String str30 = property4.getAsString();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy(2);
        int int13 = localDate12.getYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        int int13 = property9.getMaximumValue();
        java.lang.String str14 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.String str13 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property18.addWrapFieldToCopy(19);
        boolean boolean24 = property6.equals((java.lang.Object) property18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = property18.setCopy("0036-01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0036-01-01\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate14.minusMonths(25);
        org.joda.time.LocalDate localDate20 = localDate18.minusDays(1);
        org.joda.time.LocalDate localDate21 = localDate10.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property22 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks((-1));
        boolean boolean31 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property32 = localDate28.yearOfCentury();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDate localDate34 = property32.withMaximumValue();
        int int35 = localDate34.getMonthOfYear();
        int int36 = localDate34.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate38 = localDate34.plusWeeks(0);
        int int39 = property22.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        int int6 = localDate3.getYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    @Ignore
  public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate31 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate32 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(28339200000L, dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate2.withDayOfMonth(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        int[] intArray10 = localDate8.getValues();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 6]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        int int8 = localDate1.getWeekOfWeekyear();
        int int9 = localDate1.getMonthOfYear();
        org.joda.time.LocalDate localDate11 = localDate1.withWeekyear((-292275054));
        org.joda.time.Interval interval12 = localDate1.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        int int11 = property6.getMaximumValueOverall();
        int int12 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    @Ignore
  public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate5.withFieldAdded(durationFieldType10, 1983);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    @Ignore
  public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology9);
        int int14 = localDate13.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.setCopy(1);
        org.joda.time.DurationField durationField17 = property14.getRangeDurationField();
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
    }

    @Test
    @Ignore
  public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        java.lang.String str13 = property11.getAsText();
        org.joda.time.LocalDate localDate14 = property11.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    @Ignore
  public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(6);
        int int12 = localDate9.getDayOfMonth();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    @Ignore
  public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate15 = localDate0.plusWeeks(0);
        int[] intArray16 = localDate0.getValues();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2020, 11, 25]");
    }

    @Test
    @Ignore
  public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks((-1));
        boolean boolean31 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property32 = localDate24.year();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone39);
        int int41 = property32.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtMidnight();
        int int52 = property32.getDifference((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        long long54 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDate localDate56 = property9.addToCopy(20);
        java.lang.String str57 = property9.getAsText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2019 + "'", int41 == 2019);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2019 + "'", int52 == 2019);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2019L + "'", long54 == 2019L);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2020" + "'", str57, "2020");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 19, dateTimeZone1);
    }

    @Test
    @Ignore
  public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate15.withWeekyear(330);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate15.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks((-1));
        boolean boolean31 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property32 = localDate28.yearOfCentury();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDate localDate35 = property32.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate37 = property32.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date40 = localDate39.toDate();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology45 = localDate42.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) date40, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = localDate46.toDateMidnight(dateTimeZone47);
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.LocalDate localDate50 = property49.roundHalfEvenCopy();
        boolean boolean51 = localDate37.isBefore((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date54 = localDate53.toDate();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology59 = localDate56.getChronology();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) date54, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = localDate60.toDateMidnight(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = localDate50.withFields((org.joda.time.ReadablePartial) localDate60);
        boolean boolean64 = localDate15.equals((java.lang.Object) localDate50);
        int int65 = localDate15.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDate15.getFieldType(1968);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1968");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, 1968);
        org.joda.time.LocalDate.Property property20 = localDate16.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(0);
        int int18 = localDate17.getWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.weekyear();
        org.joda.time.LocalDate localDate20 = property19.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtMidnight(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int19 = localDate16.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfCentury();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDate localDate32 = property29.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate34 = property29.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate36 = property29.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = localDate40.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology47 = localDate44.getChronology();
        int int48 = localDate40.compareTo((org.joda.time.ReadablePartial) localDate44);
        int int49 = localDate44.getDayOfYear();
        java.lang.String str50 = localDate44.toString();
        java.lang.String str52 = localDate44.toString("1");
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = localDate44.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate.Property property55 = localDate44.year();
        org.joda.time.LocalDate localDate56 = localDate36.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean57 = localDate16.isAfter((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate65 = localDate63.minusWeeks((-1));
        boolean boolean66 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate.Property property67 = localDate63.yearOfCentury();
        java.lang.String str68 = property67.getAsShortText();
        org.joda.time.LocalDate localDate70 = property67.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate72 = property67.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property73 = localDate72.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        boolean boolean75 = localDate44.isSupported(dateTimeFieldType74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = localDate44.toString(dateTimeFormatter76);
        java.lang.String str79 = localDate44.toString("4");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "4" + "'", str79, "4");
    }

    @Test
    @Ignore
  public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        long long22 = property9.remainder();
        org.joda.time.LocalDate localDate23 = property9.withMinimumValue();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property9.getAsShortText(locale24);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 28425600000L + "'", long22 == 28425600000L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2020" + "'", str25, "2020");
    }

    @Test
    @Ignore
  public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        int int20 = property9.getMinimumValueOverall();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        boolean boolean29 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property30 = localDate26.yearOfCentury();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.LocalDate localDate33 = property30.addWrapFieldToCopy(0);
        java.lang.String str34 = property30.getAsText();
        java.lang.String str35 = property30.getAsText();
        org.joda.time.LocalDate localDate36 = property30.getLocalDate();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(chronology39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) localDate36, chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) int20, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292275054) + "'", int20 == (-292275054));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    @Ignore
  public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property15 = localDate7.year();
        int int16 = property15.get();
        int int17 = property15.get();
        org.joda.time.LocalDate localDate18 = property15.getLocalDate();
        java.util.Date date19 = localDate18.toDate();
        boolean boolean20 = localDate5.equals((java.lang.Object) localDate18);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2020 + "'", int16 == 2020);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2020 + "'", int17 == 2020);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Nov 25 00:00:00 UTC 2020");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology3);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    @Ignore
  public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate4.getMonthOfYear();
        int int8 = localDate4.getWeekOfWeekyear();
        int int9 = localDate4.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate4.withMonthOfYear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    @Ignore
  public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = localDate29.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        int int37 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate33.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate33.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate44 = localDate41.minus(readablePeriod43);
        org.joda.time.LocalDate localDate46 = localDate41.plusWeeks(99);
        boolean boolean47 = localDate25.equals((java.lang.Object) localDate46);
        org.joda.time.Interval interval48 = localDate46.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        int int17 = localDate15.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        boolean boolean19 = localDate15.isSupported(durationFieldType18);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 38 + "'", int17 == 38);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDate11.toString(dateTimeFormatter13);
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate11.compareTo(readablePartial15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0099-01-01" + "'", str14, "0099-01-01");
    }

    @Test
    @Ignore
  public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = localDate18.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        int int26 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property27 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = localDate18.withYearOfEra(2);
        org.joda.time.LocalDate localDate31 = localDate18.minusYears(100);
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(330);
        org.joda.time.LocalDate localDate35 = localDate33.withMonthOfYear((int) (short) 1);
        int int36 = property9.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.Interval interval37 = property9.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(interval37);
    }

    @Test
    @Ignore
  public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate34.toDateMidnight(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate34.minusYears((int) ' ');
        int int43 = localDate34.getMonthOfYear();
        boolean boolean44 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate34.minus(readablePeriod45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate34.withCenturyOfEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval20 = localDate11.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        int int15 = property9.getLeapAmount();
        org.joda.time.DurationField durationField16 = property9.getDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate5.plusMonths((-1969));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    @Ignore
  public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        int int28 = localDate26.getYear();
        int int29 = localDate26.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks((-1));
        boolean boolean38 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate.Property property39 = localDate31.year();
        int int40 = property39.get();
        org.joda.time.LocalDate localDate42 = property39.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = localDate42.isSupported(dateTimeFieldType43);
        int int45 = localDate26.compareTo((org.joda.time.ReadablePartial) localDate42);
        boolean boolean46 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate54 = localDate52.minusWeeks((-1));
        boolean boolean55 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate.Property property56 = localDate48.year();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate62 = localDate60.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtCurrentTime(dateTimeZone63);
        int int65 = property56.getDifference((org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str66 = property56.getAsString();
        org.joda.time.LocalDate localDate68 = property56.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate69 = property56.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate70 = property56.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate70.minus(readablePeriod71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = localDate72.toDateMidnight(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        boolean boolean77 = localDate23.isSupported(durationFieldType76);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2020 + "'", int28 == 2020);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2020 + "'", int40 == 2020);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2019 + "'", int65 == 2019);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2020" + "'", str66, "2020");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    @Ignore
  public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date33 = localDate32.toDate();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate35 = localDate32.minus(readablePeriod34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = localDate39.indexOf(dateTimeFieldType40);
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate39.toDateTime(localTime42, dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        long long46 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate localDate47 = property9.roundHalfFloorCopy();
        int int48 = localDate47.getYear();
        java.lang.Class<?> wildcardClass49 = localDate47.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    @Ignore
  public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = property20.getAsString();
        org.joda.time.LocalDate localDate32 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property42 = localDate38.yearOfCentury();
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.LocalDate localDate44 = property42.withMaximumValue();
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate46 = localDate32.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean47 = property9.equals((java.lang.Object) localDate44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate55 = localDate53.minusWeeks((-1));
        boolean boolean56 = localDate49.isEqual((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate.Property property57 = localDate49.year();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate63 = localDate61.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtCurrentTime(dateTimeZone64);
        int int66 = property57.getDifference((org.joda.time.ReadableInstant) dateTime65);
        java.lang.String str67 = property57.getAsString();
        org.joda.time.LocalDate localDate69 = property57.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField70 = property57.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property57.getFieldType();
        boolean boolean72 = localDate44.isSupported(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2020" + "'", str30, "2020");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0099-01-01" + "'", str45, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2019 + "'", int66 == 2019);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2020" + "'", str67, "2020");
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfMonth();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        int int23 = property19.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) localDate9, dateTimeZone12);
        org.joda.time.LocalDate.Property property14 = localDate9.centuryOfEra();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    @Ignore
  public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        int int14 = localDate12.getDayOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate12.getFields();
        int int16 = localDate12.getMonthOfYear();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    @Ignore
  public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        int[] intArray25 = localDate22.getValues();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate22.toInterval(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2021, 1, 1]");
        org.junit.Assert.assertNotNull(interval27);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        int int19 = localDate15.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate34 = localDate29.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.plusMonths((int) '4');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate45 = localDate43.minusWeeks((-1));
        boolean boolean46 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate.Property property47 = localDate43.yearOfCentury();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.LocalDate localDate50 = property47.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property51 = localDate50.weekOfWeekyear();
        boolean boolean52 = localDate35.isAfter((org.joda.time.ReadablePartial) localDate50);
        int int53 = localDate50.getCenturyOfEra();
        org.joda.time.LocalDate.Property property54 = localDate50.dayOfMonth();
        org.joda.time.LocalDate localDate56 = localDate50.withYear((int) (short) 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate64 = localDate62.minusWeeks((-1));
        boolean boolean65 = localDate58.isEqual((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.LocalDate.Property property66 = localDate62.yearOfCentury();
        java.lang.String str67 = property66.getAsShortText();
        org.joda.time.LocalDate localDate68 = property66.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = localDate68.indexOf(dateTimeFieldType69);
        org.joda.time.LocalDate.Property property71 = localDate68.dayOfWeek();
        java.lang.String str72 = property71.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property71.getFieldType();
        boolean boolean74 = localDate50.isSupported(dateTimeFieldType73);
        int int75 = localDate29.get(dateTimeFieldType73);
        org.joda.time.LocalDate.Property property76 = localDate23.property(dateTimeFieldType73);
        boolean boolean77 = localDate15.isSupported(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Thursday" + "'", str72, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0001-01-01");
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(31);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(20);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    @Ignore
  public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        org.joda.time.LocalDate.Property property16 = localDate12.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property38 = localDate30.year();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate42.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone45);
        int int47 = property38.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate55 = localDate53.minusWeeks((-1));
        boolean boolean56 = localDate49.isEqual((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtMidnight();
        int int58 = property38.getDifference((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDate24.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        int int61 = property16.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDate localDate62 = property16.roundHalfFloorCopy();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate68 = localDate66.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate70 = localDate68.minusWeeks((-1));
        boolean boolean71 = localDate64.isEqual((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate localDate73 = localDate64.plusDays((int) ' ');
        int int74 = property16.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2019 + "'", int47 == 2019);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2019 + "'", int58 == 2019);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    @Ignore
  public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfEvenCopy();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = property11.compareTo(readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDate16.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        int int12 = localDate11.size();
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate11.withFieldAdded(durationFieldType13, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        int int13 = localDate7.size();
        int int14 = localDate7.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    @Ignore
  public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withWeekOfWeekyear(12);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra(12);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate15.withPeriodAdded(readablePeriod18, 3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localDate15.getField(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    @Ignore
  public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        int int28 = localDate27.getWeekyear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1900 + "'", int28 == 1900);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 99, chronology27);
        boolean boolean30 = localDate12.equals((java.lang.Object) 99);
        boolean boolean31 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate10.toInterval(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("Thursday", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        int int50 = property49.getMinimumValueOverall();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology55 = localDate52.getChronology();
        int int56 = property49.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = localDate60.indexOf(dateTimeFieldType61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology67 = localDate64.getChronology();
        int int68 = localDate60.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = localDate64.toDateMidnight(dateTimeZone69);
        org.joda.time.LocalDate localDate72 = localDate64.minusYears((int) ' ');
        org.joda.time.LocalDate localDate74 = localDate64.minusYears((int) '#');
        org.joda.time.LocalDate localDate76 = localDate64.withDayOfYear(330);
        org.joda.time.LocalDate localDate78 = localDate76.plusYears(13);
        org.joda.time.LocalDate localDate80 = localDate78.minusYears((int) (short) 0);
        boolean boolean81 = localDate52.isAfter((org.joda.time.ReadablePartial) localDate78);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((int) (byte) -1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    @Ignore
  public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        org.joda.time.LocalDate localDate11 = localDate8.minusYears(1970);
        org.joda.time.LocalDate.Property property12 = localDate8.dayOfMonth();
        org.joda.time.LocalDate.Property property13 = localDate8.dayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        org.joda.time.LocalDate localDate23 = localDate21.minusYears((int) (short) 0);
        int int25 = localDate23.getValue(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1983 + "'", int25 == 1983);
    }

    @Test
    @Ignore
  public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = localDate4.toInterval(dateTimeZone7);
        int[] intArray9 = localDate4.getValues();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate4.toDateTime(localTime10);
        int int12 = localDate4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    @Ignore
  public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) date3, chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(2019L, chronology8);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtStartOfDay(dateTimeZone14);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withCenturyOfEra((int) '#');
        int[] intArray11 = localDate10.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3570, 1, 8]");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        int int10 = localDate4.getEra();
        int int11 = localDate4.getYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
    }

    @Test
    @Ignore
  public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate26.minus(readablePeriod28);
        boolean boolean30 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate23.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    @Ignore
  public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        int int28 = localDate26.getYear();
        int int29 = localDate26.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks((-1));
        boolean boolean38 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate.Property property39 = localDate31.year();
        int int40 = property39.get();
        org.joda.time.LocalDate localDate42 = property39.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = localDate42.isSupported(dateTimeFieldType43);
        int int45 = localDate26.compareTo((org.joda.time.ReadablePartial) localDate42);
        boolean boolean46 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate localDate48 = localDate23.withYearOfCentury(4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2020 + "'", int28 == 2020);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2020 + "'", int40 == 2020);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    @Ignore
  public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = property9.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) property9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    @Ignore
  public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        int int25 = property15.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate27.year();
        int int36 = property35.get();
        org.joda.time.LocalDate localDate38 = property35.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate38.toDateMidnight(dateTimeZone39);
        long long41 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight40);
        long long42 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight40);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1968 + "'", int25 == 1968);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2020 + "'", int36 == 2020);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-49L) + "'", long41 == (-49L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-49L) + "'", long42 == (-49L));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.plusDays(0);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(49);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int20 = localDate18.getValue((int) (short) 1);
        int int21 = localDate18.getDayOfMonth();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        boolean boolean30 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate32 = localDate27.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property33 = localDate27.year();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtCurrentTime(dateTimeZone41);
        int int43 = property33.getDifference((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDate localDate44 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(localTime45);
        org.joda.time.DateTime dateTime47 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        int int13 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(0);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.Interval interval18 = property16.toInterval();
        java.lang.String str19 = property16.getAsShortText();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    @Ignore
  public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date17, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate23.toDateMidnight(dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate23.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfEvenCopy();
        boolean boolean28 = localDate14.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date31 = localDate30.toDate();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) date31, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate37.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate40 = localDate27.withFields((org.joda.time.ReadablePartial) localDate37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField42 = localDate27.getField((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -292275054");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate13 = localDate10.plusDays(32);
        int int14 = localDate10.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.setCopy(1);
        org.joda.time.DurationField durationField17 = property14.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property14.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        java.lang.String str14 = property9.toString();
        org.joda.time.LocalDate localDate15 = property9.roundHalfCeilingCopy();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property9.getAsShortText(locale16);
        java.lang.String str18 = property9.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[yearOfCentury]" + "'", str14, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
    }

    @Test
    @Ignore
  public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtCurrentTime();
        int int7 = localDate3.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate3.withEra(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    @Ignore
  public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        int int52 = localDate51.getMonthOfYear();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date55 = localDate54.toDate();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.fromDateFields(date55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate56.minus(readablePeriod57);
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfWeek();
        org.joda.time.LocalDate localDate61 = localDate58.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property62 = localDate58.yearOfCentury();
        boolean boolean63 = localDate51.isAfter((org.joda.time.ReadablePartial) localDate58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate65 = localDate58.withEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    @Ignore
  public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusYears((int) ' ');
        boolean boolean27 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((-1));
        boolean boolean36 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate33.yearOfCentury();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDate localDate40 = property37.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate42 = property37.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date45 = localDate44.toDate();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology50 = localDate47.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) date45, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = localDate51.toDateMidnight(dateTimeZone52);
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        boolean boolean56 = localDate42.isBefore((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate localDate58 = localDate42.minusYears((int) '4');
        boolean boolean59 = localDate18.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate.Property property60 = localDate18.centuryOfEra();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    @Ignore
  public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int20 = localDate18.getValue((int) (short) 1);
        int int21 = localDate18.getDayOfMonth();
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = localDate23.toString(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2020-11-25" + "'", str25, "2020-11-25");
    }

    @Test
    @Ignore
  public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        int int3 = localDate1.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate1.plus(readablePeriod4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        java.lang.Class<?> wildcardClass17 = localDate16.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate24 = localDate15.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDate localDate37 = property35.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = localDate37.indexOf(dateTimeFieldType38);
        org.joda.time.LocalDate.Property property40 = localDate37.dayOfWeek();
        int int41 = localDate37.getEra();
        int int42 = property25.compareTo((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate localDate44 = localDate37.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate46 = localDate37.withWeekyear(70);
        boolean boolean47 = property9.equals((java.lang.Object) localDate37);
        int int48 = localDate37.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
    }

    @Test
    @Ignore
  public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((int) (byte) 1);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withCenturyOfEra((int) '#');
        int[] intArray11 = localDate10.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate10.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3570, 1, 8]");
    }

    @Test
    @Ignore
  public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField22 = property9.getField();
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = property9.setCopy("yearOfEra", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfEra\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDate11.getValue(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property8 = localDate1.weekyear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property25 = localDate14.dayOfYear();
        org.joda.time.LocalDate.Property property26 = localDate14.dayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = property18.isLeap();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        org.joda.time.LocalDate localDate17 = localDate14.plusMonths((int) (short) 100);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate18 = property17.roundHalfEvenCopy();
        org.joda.time.DurationField durationField19 = property17.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    @Ignore
  public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.plusMonths((int) '4');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate21.yearOfCentury();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((-1));
        boolean boolean35 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property36 = localDate28.year();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone43);
        int int45 = property36.getDifference((org.joda.time.ReadableInstant) dateTime44);
        long long46 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = localDate15.equals((java.lang.Object) property25);
        org.joda.time.LocalDate localDate49 = localDate15.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date52 = localDate51.toDate();
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.fromDateFields(date52);
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate62 = localDate60.minusWeeks((-1));
        boolean boolean63 = localDate56.isEqual((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.LocalDate.Property property64 = localDate56.year();
        int int65 = property64.get();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = localDate69.indexOf(dateTimeFieldType70);
        org.joda.time.LocalTime localTime72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDate69.toDateTime(localTime72, dateTimeZone73);
        long long75 = property64.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime74);
        int int76 = property54.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = localDate49.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int int78 = localDate49.getEra();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = localDate49.toDateTimeAtMidnight(dateTimeZone79);
        int int81 = property9.getDifference((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2020 + "'", int65 == 2020);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2019L + "'", long75 == 2019L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-10024) + "'", int81 == (-10024));
    }

    @Test
    @Ignore
  public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears(3);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDate7.getFields();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date22 = localDate21.toDate();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) date22, chronology27);
        java.util.Date date29 = localDate28.toDate();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks((-1));
        boolean boolean38 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate40 = localDate35.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property41 = localDate35.year();
        org.joda.time.LocalDate localDate43 = property41.setCopy((int) 'a');
        org.joda.time.LocalDate localDate45 = property41.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate45.getFieldType(1);
        org.joda.time.LocalDate.Property property48 = localDate28.property(dateTimeFieldType47);
        boolean boolean49 = localDate7.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("4");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = localDate5.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        int int13 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate.Property property14 = localDate5.weekOfWeekyear();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property14.getAsText(locale15);
        org.joda.time.LocalDate localDate17 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate18 = localDate1.withFields((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = localDate1.isSupported(durationFieldType19);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate26 = localDate21.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property27 = localDate21.year();
        org.joda.time.LocalDate localDate29 = property27.setCopy((int) 'a');
        org.joda.time.LocalDate localDate31 = property27.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate31.getFieldType(1);
        org.joda.time.LocalDate.Property property34 = localDate7.property(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = localDate7.minusDays(99);
        org.joda.time.LocalDate localDate38 = localDate7.minusMonths(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfMonth();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.plusMonths((int) '4');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((-1));
        boolean boolean33 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.LocalDate.Property property34 = localDate30.yearOfCentury();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.LocalDate localDate37 = property34.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property38 = localDate37.weekOfWeekyear();
        boolean boolean39 = localDate22.isAfter((org.joda.time.ReadablePartial) localDate37);
        int int40 = localDate37.getCenturyOfEra();
        org.joda.time.LocalDate.Property property41 = localDate37.dayOfMonth();
        org.joda.time.LocalDate localDate43 = localDate37.withYear((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate51 = localDate49.minusWeeks((-1));
        boolean boolean52 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.LocalDate.Property property53 = localDate49.yearOfCentury();
        java.lang.String str54 = property53.getAsShortText();
        org.joda.time.LocalDate localDate55 = property53.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = localDate55.indexOf(dateTimeFieldType56);
        org.joda.time.LocalDate.Property property58 = localDate55.dayOfWeek();
        java.lang.String str59 = property58.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property58.getFieldType();
        boolean boolean61 = localDate37.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate37.toDateTimeAtStartOfDay(dateTimeZone62);
        long long64 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Thursday" + "'", str59, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("19");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    @Ignore
  public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        java.lang.String str3 = localDate1.toString();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.LocalDate.Property property16 = localDate14.year();
        java.util.Locale locale17 = null;
        int int18 = property16.getMaximumShortTextLength(locale17);
        java.util.Locale locale19 = null;
        int int20 = property16.getMaximumTextLength(locale19);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.lang.String str12 = localDate11.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate11.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.roundHalfCeilingCopy();
        int int18 = property16.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0099-01-01" + "'", str12, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate18.withYear(3);
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    @Ignore
  public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate15 = localDate13.withYear(12);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    @Ignore
  public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.Interval interval35 = localDate2.toInterval();
        int[] intArray36 = localDate2.getValues();
        int int37 = localDate2.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDate2.getValue(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2025, 3, 25]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
    }

    @Test
    @Ignore
  public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear(19);
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1970);
        org.joda.time.LocalDate.Property property9 = localDate4.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate11.year();
        int int20 = property19.get();
        int int21 = property19.get();
        long long22 = property19.remainder();
        java.util.Locale locale23 = null;
        int int24 = property19.getMaximumShortTextLength(locale23);
        boolean boolean25 = localDate4.equals((java.lang.Object) int24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate4.minus(readablePeriod26);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2020 + "'", int20 == 2020);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2020 + "'", int21 == 2020);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 28425600000L + "'", long22 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        org.joda.time.LocalDate localDate9 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.withWeekyear(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    @Ignore
  public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        java.lang.String str13 = property9.getAsText();
        int int14 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2020" + "'", str13, "2020");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    @Ignore
  public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = property20.getAsString();
        org.joda.time.LocalDate localDate32 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property42 = localDate38.yearOfCentury();
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.LocalDate localDate44 = property42.withMaximumValue();
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate46 = localDate32.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean47 = property9.equals((java.lang.Object) localDate44);
        int[] intArray48 = localDate44.getValues();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2020" + "'", str30, "2020");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0099-01-01" + "'", str45, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[99, 1, 1]");
    }

    @Test
    @Ignore
  public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = localDate13.toDateMidnight(dateTimeZone14);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    @Ignore
  public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date28 = localDate27.toDate();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate29.minus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate43.year();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate55.toDateTimeAtCurrentTime(dateTimeZone58);
        int int60 = property51.getDifference((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate68 = localDate66.minusWeeks((-1));
        boolean boolean69 = localDate62.isEqual((org.joda.time.ReadablePartial) localDate66);
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtMidnight();
        int int71 = property51.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime74 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDate.Property property75 = localDate14.weekyear();
        java.lang.String str76 = property75.getName();
        java.util.Locale locale77 = null;
        java.lang.String str78 = property75.getAsText(locale77);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2019 + "'", int60 == 2019);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2019 + "'", int71 == 2019);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "weekyear" + "'", str76, "weekyear");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970" + "'", str78, "1970");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(9);
        int[] intArray15 = localDate14.getValues();
        org.joda.time.LocalDate.Property property16 = localDate14.yearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2021, 1, 9]");
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    @Ignore
  public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear(11);
        org.joda.time.DateMidnight dateMidnight15 = localDate12.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.Interval interval19 = property18.toInterval();
        long long20 = property18.remainder();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        int int17 = localDate16.getDayOfMonth();
        boolean boolean19 = localDate16.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) boolean19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property25 = localDate14.dayOfYear();
        java.util.Date date26 = localDate14.toDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Jan 01 00:00:00 UTC 1");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.Interval interval12 = property11.toInterval();
        int int13 = property11.getMinimumValue();
        boolean boolean14 = property11.isLeap();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    @Ignore
  public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int13 = property9.getMaximumValue();
        org.joda.time.DurationField durationField14 = property9.getDurationField();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate16.minus(readablePeriod18);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths(99);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate19.toInterval(dateTimeZone22);
        int[] intArray24 = localDate19.getValues();
        org.joda.time.LocalDate.Property property25 = localDate19.weekOfWeekyear();
        int int26 = property9.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate21 = localDate16.plusDays(12);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    @Ignore
  public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        java.lang.String str2 = property1.getAsString();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate3.withDayOfMonth((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2020" + "'", str2, "2020");
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    @Ignore
  public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate34.toDateMidnight(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate34.minusYears((int) ' ');
        int int43 = localDate34.getMonthOfYear();
        boolean boolean44 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate34);
        int int45 = localDate34.getDayOfMonth();
        org.joda.time.LocalDate.Property property46 = localDate34.dayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(12);
        org.joda.time.DurationField durationField16 = property11.getLeapDurationField();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate22.yearOfCentury();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.LocalDate localDate29 = property26.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = localDate29.toInterval(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = localDate29.isSupported(dateTimeFieldType32);
        int int34 = localDate29.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDate29.isSupported(dateTimeFieldType35);
        int int37 = localDate29.getCenturyOfEra();
        int int38 = property11.compareTo((org.joda.time.ReadablePartial) localDate29);
        java.util.Locale locale39 = null;
        java.lang.String str40 = property11.getAsText(locale39);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        int int15 = localDate3.getDayOfMonth();
        int int16 = localDate3.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.LocalDate.Property property8 = localDate3.year();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = localDate3.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDate19.getFieldType(360);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 360");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        int int8 = localDate1.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate.Property property19 = localDate18.centuryOfEra();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property19.setCopy("1969-12-31", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-31\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    @Ignore
  public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property52 = localDate5.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.LocalDate localDate54 = property52.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    @Ignore
  public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        int[] intArray20 = localDate14.getValues();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        boolean boolean29 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property30 = localDate26.yearOfCentury();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.LocalDate localDate32 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) date41, chronology46);
        java.util.Date date48 = localDate47.toDate();
        org.joda.time.LocalDate.Property property49 = localDate47.era();
        org.joda.time.LocalDate.Property property50 = localDate47.dayOfMonth();
        boolean boolean51 = localDate38.equals((java.lang.Object) property50);
        int int52 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime53 = localDate38.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2, 1, 1]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    @Ignore
  public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        java.lang.String str20 = property9.getName();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.LocalDate localDate27 = localDate25.minusDays((int) (byte) 100);
        int int28 = localDate27.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(localTime31);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        long long34 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = property9.getAsShortText(locale35);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfCentury" + "'", str20, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1968L) + "'", long34 == (-1968L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property6.getAsText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        int int16 = property15.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears(3);
        java.lang.String str19 = localDate17.toString("292278993");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "292278993" + "'", str19, "292278993");
    }

    @Test
    @Ignore
  public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate11.year();
        int int20 = property19.get();
        org.joda.time.LocalDate localDate22 = property19.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight(dateTimeZone23);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate26 = localDate9.withFields((org.joda.time.ReadablePartial) localDate22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2020 + "'", int20 == 2020);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int20 = localDate18.getValue((int) (short) 1);
        int int21 = localDate18.getDayOfMonth();
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate18.getFields();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(chronology3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(2019L, chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate6.getFieldType(0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    @Ignore
  public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property9.addToCopy(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292281013 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    @Ignore
  public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate11.year();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property19.getDifference((org.joda.time.ReadableInstant) dateTime27);
        java.lang.String str29 = property19.getAsString();
        org.joda.time.LocalDate localDate31 = property19.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate32 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate33 = property19.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate35 = localDate33.minus(readablePeriod34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.year();
        int int38 = localDate36.getYear();
        int int39 = localDate36.getEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate47 = localDate45.minusWeeks((-1));
        boolean boolean48 = localDate41.isEqual((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate.Property property49 = localDate41.year();
        int int50 = property49.get();
        org.joda.time.LocalDate localDate52 = property49.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = localDate52.isSupported(dateTimeFieldType53);
        int int55 = localDate36.compareTo((org.joda.time.ReadablePartial) localDate52);
        boolean boolean56 = localDate33.isBefore((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.DateMidnight dateMidnight57 = localDate33.toDateMidnight();
        int int58 = property9.compareTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2019 + "'", int28 == 2019);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2020" + "'", str29, "2020");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2020 + "'", int38 == 2020);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2020 + "'", int50 == 2020);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    @Ignore
  public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.getMaximumValue();
        int int11 = property9.get();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        int int13 = localDate7.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate7.withWeekOfWeekyear(330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = property11.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = property11.withMaximumValue();
        org.joda.time.DurationField durationField23 = property11.getDurationField();
        int int24 = property11.get();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        int int28 = property20.getMinimumValueOverall();
        org.joda.time.Interval interval29 = property20.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.Chronology chronology19 = localDate15.getChronology();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra(98);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    @Ignore
  public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property52 = localDate5.dayOfWeek();
        java.lang.String str53 = property52.getAsString();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "4" + "'", str53, "4");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(9, (-2019), 3, chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2019 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) '4');
        java.lang.String str8 = localDate5.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate5.toDateTimeAtStartOfDay(dateTimeZone9);
        int int11 = property3.compareTo((org.joda.time.ReadablePartial) localDate5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19" + "'", str4, "19");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2020-11-25" + "'", str8, "2020-11-25");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1);
        org.joda.time.LocalDate.Property property20 = localDate17.centuryOfEra();
        boolean boolean21 = property20.isLeap();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    @Ignore
  public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        long long15 = property9.remainder();
        org.joda.time.DurationField durationField16 = property9.getRangeDurationField();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date20 = localDate19.toDate();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(2019L, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) property9, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        int int13 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(0);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        org.joda.time.LocalDate localDate18 = localDate13.minusDays(38);
        org.joda.time.LocalDate localDate20 = localDate13.plusWeeks(99);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate.Property property10 = localDate1.dayOfMonth();
        org.joda.time.Interval interval11 = localDate1.toInterval();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight(dateTimeZone17);
        int[] intArray19 = localDate15.getValues();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate15.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate15.minusWeeks((-50));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1938, 1, 1]");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths((int) (byte) 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(99);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.parse("0000-01-06");
        int int18 = property11.compareTo((org.joda.time.ReadablePartial) localDate17);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    @Ignore
  public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        int int11 = property6.getMinimumValueOverall();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property33 = localDate25.year();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone40);
        int int42 = property33.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate48.minusWeeks((-1));
        boolean boolean51 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtMidnight();
        int int53 = property33.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = localDate19.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        int int56 = property6.compareTo((org.joda.time.ReadableInstant) dateTime54);
        int int57 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2019 + "'", int42 == 2019);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2019 + "'", int53 == 2019);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        int int19 = property18.getMaximumValue();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusMonths(4);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((-1));
        org.joda.time.LocalDate localDate34 = localDate30.minusMonths(25);
        int[] intArray35 = localDate34.getValues();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = localDate39.indexOf(dateTimeFieldType40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        int int47 = localDate39.compareTo((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate.Property property48 = localDate39.weekOfWeekyear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate56 = localDate54.minusWeeks((-1));
        boolean boolean57 = localDate50.isEqual((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate localDate59 = localDate54.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property60 = localDate54.year();
        org.joda.time.LocalDate localDate62 = property60.setCopy((int) 'a');
        org.joda.time.LocalDate localDate64 = property60.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = localDate64.getFieldType(1);
        boolean boolean67 = localDate39.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDate.Property property68 = localDate34.property(dateTimeFieldType66);
        org.joda.time.LocalDate.Property property69 = localDate26.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 360 + "'", int21 == 360);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-2, 12, 1]");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    @Ignore
  public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        boolean boolean30 = property4.isLeap();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property4.getAsText(locale31);
        org.joda.time.LocalDate localDate34 = property4.setCopy("19");
        int int35 = localDate34.getYearOfCentury();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "70" + "'", str32, "70");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(330);
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDate18.getFields();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        int int18 = localDate14.size();
        org.joda.time.LocalDate.Property property19 = localDate14.monthOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    @Ignore
  public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(52);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfCentury();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = localDate18.toInterval(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks((-1));
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(4);
        int int25 = localDate22.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate40 = property35.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate42 = property35.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = localDate46.indexOf(dateTimeFieldType47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology53 = localDate50.getChronology();
        int int54 = localDate46.compareTo((org.joda.time.ReadablePartial) localDate50);
        int int55 = localDate50.getDayOfYear();
        java.lang.String str56 = localDate50.toString();
        java.lang.String str58 = localDate50.toString("1");
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = localDate50.toDateMidnight(dateTimeZone59);
        org.joda.time.LocalDate.Property property61 = localDate50.year();
        org.joda.time.LocalDate localDate62 = localDate42.withFields((org.joda.time.ReadablePartial) localDate50);
        boolean boolean63 = localDate22.isAfter((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.plusMonths((int) '4');
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate74 = localDate72.minusWeeks((-1));
        boolean boolean75 = localDate68.isEqual((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate.Property property76 = localDate72.yearOfCentury();
        java.lang.String str77 = property76.getAsShortText();
        org.joda.time.LocalDate localDate78 = property76.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = localDate78.indexOf(dateTimeFieldType79);
        org.joda.time.LocalDate.Property property81 = localDate78.dayOfWeek();
        java.lang.String str82 = property81.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property81.getFieldType();
        org.joda.time.LocalDate.Property property84 = localDate64.property(dateTimeFieldType83);
        boolean boolean85 = localDate50.isSupported(dateTimeFieldType83);
        org.joda.time.LocalDate.Property property86 = localDate5.property(dateTimeFieldType83);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = localDate5.toString("hi!", locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Thursday" + "'", str82, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0001-01-01");
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(31);
        int[] intArray4 = localDate1.getValues();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 1, 1]");
    }

    @Test
    @Ignore
  public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDate1.toString(dateTimeFormatter10);
        int int12 = localDate1.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020-11-25" + "'", str11, "2020-11-25");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2020 + "'", int12 == 2020);
    }

    @Test
    @Ignore
  public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((-1));
        boolean boolean35 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property36 = localDate32.yearOfCentury();
        boolean boolean38 = property36.equals((java.lang.Object) 100L);
        java.lang.String str39 = property36.toString();
        org.joda.time.DateTimeField dateTimeField40 = property36.getField();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, 0);
        org.joda.time.LocalDate localDate47 = localDate45.minusDays((int) (byte) 100);
        int int48 = localDate47.getMonthOfYear();
        int int49 = localDate47.getCenturyOfEra();
        int int50 = property36.compareTo((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate52 = property36.setCopy("4");
        int int53 = property4.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date56 = localDate55.toDate();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate55.minus(readablePeriod57);
        org.joda.time.DateTime dateTime59 = localDate58.toDateTimeAtCurrentTime();
        boolean boolean60 = localDate52.equals((java.lang.Object) localDate58);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Property[yearOfCentury]" + "'", str39, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate11.withYearOfCentury((-2019));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2019 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    @Ignore
  public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        int int27 = property26.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(330);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.LocalDate localDate25 = localDate23.minusDays((int) (byte) 100);
        int int26 = localDate25.getMonthOfYear();
        int int27 = localDate25.getCenturyOfEra();
        int int28 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime dateTime29 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDate18.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
    }

    @Test
    @Ignore
  public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        int int27 = property26.get();
        java.util.Locale locale29 = null;
        org.joda.time.LocalDate localDate30 = property26.setCopy("1", locale29);
        java.util.Date date31 = localDate30.toDate();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property41 = localDate37.yearOfCentury();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDate localDate44 = property41.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate46 = property41.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property47 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        org.joda.time.LocalDate.Property property49 = localDate30.property(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2019 + "'", int27 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Nov 25 00:00:00 UTC 1");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    @Ignore
  public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date16 = localDate15.toDate();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(99);
        boolean boolean21 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate20.plusWeeks(2019);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    @Ignore
  public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date20 = localDate19.toDate();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology25);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.LocalDate.Property property28 = localDate26.era();
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        boolean boolean30 = localDate17.equals((java.lang.Object) property29);
        java.lang.String str31 = property29.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property9.getAsText(locale16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = localDate21.indexOf(dateTimeFieldType22);
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate21.toDateTime(localTime24, dateTimeZone25);
        boolean boolean27 = property9.equals((java.lang.Object) localTime24);
        org.joda.time.LocalDate localDate28 = property9.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.String str13 = property9.getAsText();
        java.lang.String str14 = property9.getAsText();
        org.joda.time.LocalDate localDate15 = property9.getLocalDate();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) localDate15, chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withFieldAdded(durationFieldType13, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    @Ignore
  public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate4.getMonthOfYear();
        int int8 = localDate4.size();
        org.joda.time.LocalDate localDate10 = localDate4.withDayOfYear(2);
        int int11 = localDate4.getYearOfCentury();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate3.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) int12, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("year", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = property20.getAsString();
        org.joda.time.LocalDate localDate32 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property42 = localDate38.yearOfCentury();
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.LocalDate localDate44 = property42.withMaximumValue();
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate46 = localDate32.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean47 = property9.equals((java.lang.Object) localDate44);
        java.util.Date date48 = localDate44.toDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2020" + "'", str30, "2020");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0099-01-01" + "'", str45, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 UTC 99");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = localDate11.toInterval(dateTimeZone14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = localDate11.toString("1969-12-31", locale17);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31" + "'", str18, "1969-12-31");
    }

    @Test
    @Ignore
  public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = property9.roundHalfEvenCopy();
        int int31 = property9.getMinimumValueOverall();
        int int32 = property9.getMinimumValueOverall();
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = property9.setCopy("yearOfEra", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfEra\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-292275054) + "'", int32 == (-292275054));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10" + "'", str17, "10");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2025-06-03");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    @Ignore
  public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int20 = localDate18.getValue((int) (short) 1);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date24 = localDate23.toDate();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology29 = localDate26.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) date24, chronology29);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(2019L, chronology29);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) int20, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) localDate15, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((-10024));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate14.minusMonths(25);
        org.joda.time.LocalDate localDate20 = localDate18.minusDays(1);
        org.joda.time.LocalDate localDate21 = localDate10.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property22 = localDate20.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate20.withCenturyOfEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        int int13 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(0);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate18 = localDate11.withMonthOfYear((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(durationFieldType19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = localDate24.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology31 = localDate28.getChronology();
        int int32 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property33 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = localDate24.withYearOfEra(2);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate43 = localDate41.minusWeeks((-1));
        boolean boolean44 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate.Property property45 = localDate41.yearOfCentury();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDate localDate47 = property45.withMaximumValue();
        int int48 = localDate47.getMonthOfYear();
        int int49 = localDate47.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate51 = localDate47.plusWeeks(0);
        org.joda.time.LocalDate.Property property52 = localDate47.centuryOfEra();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property52.getFieldType();
        org.joda.time.LocalDate.Property property56 = localDate24.property(dateTimeFieldType55);
        int int57 = localDate18.get(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    @Ignore
  public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getWeekOfWeekyear();
        int int14 = localDate11.getYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate11.toDateTime(localTime15, dateTimeZone16);
        int[] intArray18 = localDate11.getValues();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate29 = localDate24.withYear((int) (short) 0);
        int int30 = localDate29.size();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date33 = localDate32.toDate();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) date33, chronology38);
        java.util.Date date40 = localDate39.toDate();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate48 = localDate46.minusWeeks((-1));
        boolean boolean49 = localDate42.isEqual((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate51 = localDate46.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property52 = localDate46.year();
        org.joda.time.LocalDate localDate54 = property52.setCopy((int) 'a');
        org.joda.time.LocalDate localDate56 = property52.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDate56.getFieldType(1);
        org.joda.time.LocalDate.Property property59 = localDate39.property(dateTimeFieldType58);
        boolean boolean60 = localDate29.isSupported(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate62 = localDate11.withField(dateTimeFieldType58, 330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2021, 3, 5]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    @Ignore
  public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate26.minus(readablePeriod28);
        boolean boolean30 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property31 = localDate23.yearOfEra();
        java.lang.String str32 = property31.getAsText();
        org.joda.time.LocalDate localDate34 = property31.addWrapFieldToCopy(1970);
        org.joda.time.DurationField durationField35 = property31.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNull(durationField35);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDate0.getFields();
        org.joda.time.Chronology chronology15 = localDate0.getChronology();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = localDate12.toInterval(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        java.lang.String str16 = property15.getName();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property15.getAsShortText(locale17);
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfYear" + "'", str16, "dayOfYear");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    @Ignore
  public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate15.withWeekyear(330);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate15.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks((-1));
        boolean boolean31 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property32 = localDate28.yearOfCentury();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDate localDate35 = property32.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate37 = property32.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date40 = localDate39.toDate();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology45 = localDate42.getChronology();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) date40, chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = localDate46.toDateMidnight(dateTimeZone47);
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.LocalDate localDate50 = property49.roundHalfEvenCopy();
        boolean boolean51 = localDate37.isBefore((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date54 = localDate53.toDate();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology59 = localDate56.getChronology();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) date54, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = localDate60.toDateMidnight(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = localDate50.withFields((org.joda.time.ReadablePartial) localDate60);
        boolean boolean64 = localDate15.equals((java.lang.Object) localDate50);
        int[] intArray65 = localDate15.getValues();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
    }

    @Test
    @Ignore
  public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone4, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = localDate9.toDateMidnight();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) date13, chronology18);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(1980, 0, (-10024), chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate24 = localDate15.plusDays((int) (short) 100);
        boolean boolean25 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property26 = localDate13.dayOfWeek();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        int int29 = localDate11.indexOf(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate11.toDateTimeAtMidnight(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    @Ignore
  public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        java.lang.String str11 = property9.getAsShortText();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date14 = localDate13.toDate();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromDateFields(date14);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property16.compareTo((org.joda.time.ReadableInstant) dateTime36);
        long long39 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        org.joda.time.LocalDate.Property property14 = localDate11.yearOfCentury();
        int int15 = property14.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.LocalDate.Property property17 = localDate13.yearOfEra();
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate13.toDateTime(localTime19, dateTimeZone20);
        int int22 = property10.compareTo((org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str23 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = property1.setCopy("1970");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.String str13 = property9.getAsText();
        java.lang.String str14 = property9.getAsText();
        org.joda.time.LocalDate localDate15 = property9.getLocalDate();
        int int16 = localDate15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        int int19 = property18.getMaximumValue();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.plusMonths((int) '4');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfCentury();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        boolean boolean20 = localDate3.isAfter((org.joda.time.ReadablePartial) localDate18);
        int int21 = localDate18.getCenturyOfEra();
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((-1969), (int) '#', 10, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (short) 100, 16, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate2.yearOfEra();
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate13.toInterval(dateTimeZone17);
        int int19 = localDate13.getYearOfCentury();
        java.lang.String str20 = localDate13.toString();
        org.joda.time.LocalDate localDate22 = localDate13.withYearOfEra(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate22.withMonthOfYear(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 98 + "'", int19 == 98);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0098-12-25" + "'", str20, "0098-12-25");
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.Chronology chronology8 = localDate1.getChronology();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDate1.toString("Property[year]", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        int int4 = property3.get();
        java.util.Locale locale6 = null;
        org.joda.time.LocalDate localDate7 = property3.setCopy("2020", locale6);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate7.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) localDate17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDate17.getFieldType(1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(27);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(12);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate11.toDateTime(localTime16);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        int[] intArray18 = localDate7.getValues();
        org.joda.time.LocalDate.Property property19 = localDate7.era();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate3.toDateTime(localTime6, dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate3.minus(readablePeriod9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        int int16 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays((int) ' ');
        boolean boolean19 = localDate3.isAfter((org.joda.time.ReadablePartial) localDate18);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsShortText(locale13);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str37 = localDate24.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField39 = localDate24.getField(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate13 = localDate3.withCenturyOfEra((int) '4');
        int int14 = localDate3.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("0099-01-01", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.DurationField durationField13 = property9.getLeapDurationField();
        org.joda.time.LocalDate localDate15 = property9.addToCopy((int) '#');
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) ' ');
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.minusDays(100);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate12.withPeriodAdded(readablePeriod18, 99);
        org.joda.time.LocalDate localDate22 = localDate12.minusMonths(10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    @Ignore
  public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        java.util.Locale locale26 = null;
        int int27 = property9.getMaximumShortTextLength(locale26);
        org.joda.time.LocalDate localDate28 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) localDate28);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    @Ignore
  public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate12.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    @Ignore
  public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology23);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    @Ignore
  public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfCentury(3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDate51.getFieldTypes();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
    }

    @Test
    @Ignore
  public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        java.lang.String str30 = property4.toString();
        org.joda.time.DurationField durationField31 = property4.getDurationField();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[yearOfCentury]" + "'", str30, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    @Ignore
  public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.roundHalfEvenCopy();
        org.joda.time.Interval interval14 = property11.toInterval();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property11.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    @Ignore
  public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date17, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate23.toDateMidnight(dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate23.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfEvenCopy();
        boolean boolean28 = localDate14.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date31 = localDate30.toDate();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) date31, chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate37.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate40 = localDate27.withFields((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate46 = localDate44.minusWeeks((-1));
        org.joda.time.LocalDate localDate48 = localDate44.minusMonths(25);
        int[] intArray49 = localDate48.getValues();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDate53.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology60 = localDate57.getChronology();
        int int61 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.LocalDate.Property property62 = localDate53.weekOfWeekyear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate68 = localDate66.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate70 = localDate68.minusWeeks((-1));
        boolean boolean71 = localDate64.isEqual((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate localDate73 = localDate68.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property74 = localDate68.year();
        org.joda.time.LocalDate localDate76 = property74.setCopy((int) 'a');
        org.joda.time.LocalDate localDate78 = property74.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = localDate78.getFieldType(1);
        boolean boolean81 = localDate53.isSupported(dateTimeFieldType80);
        org.joda.time.LocalDate.Property property82 = localDate48.property(dateTimeFieldType80);
        org.joda.time.LocalDate.Property property83 = localDate37.property(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-2, 12, 1]");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    @Ignore
  public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate12 = localDate1.withYearOfEra((int) ' ');
        int int13 = localDate1.getYearOfEra();
        int[] intArray14 = localDate1.getValues();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2020 + "'", int13 == 2020);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2020, 11, 25]");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.LocalDate localDate6 = property3.addToCopy(360);
        org.joda.time.LocalDate localDate7 = property3.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property3.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19" + "'", str4, "19");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        org.joda.time.LocalDate localDate21 = localDate14.minusWeeks(2021);
        org.joda.time.LocalDate localDate23 = localDate14.withDayOfMonth(1);
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    @Ignore
  public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        int int13 = property9.getLeapAmount();
        java.util.Locale locale15 = null;
        org.joda.time.LocalDate localDate16 = property9.setCopy("4", locale15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    @Ignore
  public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.plusYears(2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((-1));
        boolean boolean15 = localDate8.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property16 = localDate12.yearOfCentury();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.LocalDate localDate19 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate21 = property16.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date24 = localDate23.toDate();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology29 = localDate26.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) date24, chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate30.toDateMidnight(dateTimeZone31);
        org.joda.time.LocalDate.Property property33 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate localDate34 = property33.roundHalfEvenCopy();
        boolean boolean35 = localDate21.isBefore((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate21.minusYears((int) '4');
        int int38 = localDate21.getCenturyOfEra();
        int[] intArray39 = localDate21.getValues();
        boolean boolean40 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = localDate1.withDayOfWeek((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[11, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        java.lang.String str13 = property9.getAsString();
        org.joda.time.LocalDate localDate14 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate15 = property9.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        int int52 = localDate51.getMonthOfYear();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date55 = localDate54.toDate();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.fromDateFields(date55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate56.minus(readablePeriod57);
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfWeek();
        org.joda.time.LocalDate localDate61 = localDate58.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property62 = localDate58.yearOfCentury();
        boolean boolean63 = localDate51.isAfter((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate65 = localDate58.minusWeeks(25);
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    @Ignore
  public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        java.util.Locale locale13 = null;
        int int14 = property9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = property9.toString();
        org.joda.time.LocalDate localDate17 = property9.addToCopy(70);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        java.util.Locale locale13 = null;
        int int14 = property9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = property9.toString();
        org.joda.time.DurationField durationField16 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = localDate1.minusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, 70);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 38);
    }

    @Test
    @Ignore
  public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = property9.roundCeilingCopy();
        int int27 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-292275054) + "'", int27 == (-292275054));
    }

    @Test
    @Ignore
  public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate50 = localDate5.minusYears(70);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    @Ignore
  public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate34.toDateMidnight(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate34.minusYears((int) ' ');
        int int43 = localDate34.getMonthOfYear();
        boolean boolean44 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate46 = localDate4.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.plus(readablePeriod47);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property12.setCopy("hi!", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfCentury();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDate localDate31 = property29.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate31.dayOfWeek();
        java.lang.String str35 = property34.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        org.joda.time.LocalDate.Property property37 = localDate17.property(dateTimeFieldType36);
        org.joda.time.LocalDate.Property property38 = localDate15.property(dateTimeFieldType36);
        org.joda.time.LocalDate localDate40 = property38.addToCopy(52);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Thursday" + "'", str35, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    @Ignore
  public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        int int22 = localDate18.getYearOfEra();
        int int23 = localDate18.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property33 = localDate29.yearOfCentury();
        java.lang.String str34 = property33.getAsShortText();
        org.joda.time.LocalDate localDate36 = property33.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate38 = property33.addToCopy((int) (short) 1);
        int int39 = property33.getLeapAmount();
        boolean boolean40 = localDate18.equals((java.lang.Object) property33);
        int int41 = localDate18.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight42 = localDate18.toDateMidnight();
        long long43 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight42);
        boolean boolean44 = property9.isLeap();
        org.joda.time.LocalDate localDate45 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2019L + "'", long43 == 2019L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate7.withPeriodAdded(readablePeriod19, 6);
        int[] intArray22 = localDate7.getValues();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1]");
    }

    @Test
    @Ignore
  public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusYears((int) ' ');
        boolean boolean27 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate8.toDateTimeAtStartOfDay(dateTimeZone28);
        java.lang.Class<?> wildcardClass30 = dateTime29.getClass();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    @Ignore
  public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int[] intArray15 = localDate11.getValues();
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtCurrentTime();
        java.util.Date date17 = localDate11.toDate();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDate18.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 UTC 99");
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate13 = localDate3.withCenturyOfEra((int) '4');
        int int14 = localDate13.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(0);
        int int18 = localDate17.getWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.weekyear();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsShortText(locale20);
        org.joda.time.LocalDate localDate22 = property19.roundHalfCeilingCopy();
        org.joda.time.ReadableInstant readableInstant23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = property19.compareTo(readableInstant23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = localDate12.toDateMidnight();
        int int15 = localDate12.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    @Ignore
  public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        int int39 = property9.getMinimumValueOverall();
        org.joda.time.DurationField durationField40 = property9.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(durationField40);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    @Ignore
  public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate1.toDate();
        int int7 = localDate1.getEra();
        org.joda.time.LocalTime localTime8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDate1.toLocalDateTime(localTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    @Ignore
  public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        java.lang.String str9 = property4.getAsShortText();
        org.joda.time.LocalDate localDate10 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property4.setCopy(38);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "70" + "'", str9, "70");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int20 = localDate18.getValue((int) (short) 1);
        int[] intArray21 = localDate18.getValues();
        int int22 = localDate18.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[400, 12, 25]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 400 + "'", int22 == 400);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone1, chronology5);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate9 = localDate6.minusMonths(1983);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    @Ignore
  public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        int int27 = property26.get();
        java.util.Locale locale29 = null;
        org.joda.time.LocalDate localDate30 = property26.setCopy("1", locale29);
        java.util.Date date31 = localDate30.toDate();
        int int32 = localDate30.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2019 + "'", int27 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Nov 25 00:00:00 UTC 1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = property5.roundCeilingCopy();
        java.lang.String str17 = property5.getName();
        java.lang.String str18 = property5.getName();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property28 = localDate24.yearOfCentury();
        java.lang.String str29 = property28.getAsShortText();
        org.joda.time.LocalDate localDate31 = property28.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate33 = property28.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property34 = localDate33.weekOfWeekyear();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfCentury(0);
        int int37 = localDate33.getDayOfYear();
        int int38 = property5.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    @Ignore
  public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(52);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date8 = localDate7.toDate();
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate7.toString("2020", locale10);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) localDate3, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDate3.getValue(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020" + "'", str11, "2020");
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    @Ignore
  public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        int int27 = property26.get();
        java.util.Locale locale29 = null;
        org.joda.time.LocalDate localDate30 = property26.setCopy("1", locale29);
        java.util.Date date31 = localDate30.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate30.getFieldType(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = localDate30.withDayOfWeek((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2019 + "'", int27 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Nov 25 00:00:00 UTC 1");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    @Ignore
  public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        java.lang.String str30 = property4.toString();
        long long31 = property4.remainder();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[yearOfCentury]" + "'", str30, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    @Ignore
  public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        java.lang.String str3 = localDate0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, 0);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(19);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate14 = localDate0.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property15 = localDate14.era();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate14.plus(readablePeriod16);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2020-11-25" + "'", str3, "2020-11-25");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    @Ignore
  public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate14 = localDate8.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        int int17 = localDate16.getDayOfYear();
        org.joda.time.LocalDate localDate18 = localDate8.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date21 = localDate20.toDate();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) date21, chronology26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) localDate8, chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((int) (short) 1, (int) (short) 10, 13, chronology26);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology26);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 330 + "'", int17 == 330);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        int int19 = localDate7.getDayOfWeek();
        int int20 = localDate7.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    @Ignore
  public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.minus(readablePeriod20);
        java.util.Date date22 = localDate19.toDate();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date22);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Jan 01 00:00:00 UTC 1");
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.LocalDate localDate16 = localDate11.minusWeeks((int) (byte) -1);
        boolean boolean17 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate16.withDayOfYear(70);
        org.joda.time.LocalDate localDate21 = localDate16.minusMonths(47);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    @Ignore
  public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate11.year();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property19.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtMidnight();
        int int39 = property19.getDifference((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = localDate5.withMonthOfYear((-1969));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2019 + "'", int28 == 2019);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2019 + "'", int39 == 2019);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        int int17 = property9.get();
        int int18 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.LocalDate localDate17 = localDate14.minusYears((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date8 = localDate7.toDate();
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate7.toString("2020", locale10);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(1983, 11, 4, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(100, 52, 31, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020" + "'", str11, "2020");
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0001-01-01");
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(31);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks((-1));
        boolean boolean12 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate.Property property13 = localDate9.yearOfCentury();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy(0);
        java.lang.String str17 = property13.getAsText();
        java.lang.String str18 = property13.getAsText();
        org.joda.time.LocalDate localDate19 = property13.getLocalDate();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) localDate19, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 31, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    @Ignore
  public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate32 = localDate23.withWeekyear(70);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate48.minusWeeks((-1));
        boolean boolean51 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate.Property property52 = localDate44.year();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate58 = localDate56.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone59);
        int int61 = property52.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate69 = localDate67.minusWeeks((-1));
        boolean boolean70 = localDate63.isEqual((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.DateTime dateTime71 = localDate67.toDateTimeAtMidnight();
        int int72 = property52.getDifference((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = localDate38.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2019 + "'", int61 == 2019);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2019 + "'", int72 == 2019);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1970-01-01");
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = localDate1.getFields();
        org.joda.time.LocalDate.Property property3 = localDate1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        int[] intArray13 = localDate3.getValues();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 99, chronology27);
        boolean boolean30 = localDate12.equals((java.lang.Object) 99);
        boolean boolean31 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property41 = localDate37.yearOfCentury();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDate localDate44 = property41.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate46 = property41.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate47 = localDate12.withFields((org.joda.time.ReadablePartial) localDate46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = localDate12.withEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = localDate16.indexOf(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        int int24 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property25 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = localDate16.withYearOfEra(2);
        org.joda.time.LocalDate localDate29 = localDate16.minusYears(100);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTime dateTime31 = localDate16.toDateTime(localTime30);
        long long32 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = property11.getLocalDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    @Ignore
  public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((-1));
        boolean boolean10 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property11 = localDate3.year();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone18);
        int int20 = property11.getDifference((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str21 = property11.getAsString();
        org.joda.time.LocalDate localDate23 = property11.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate24 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate25 = property11.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.minus(readablePeriod26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        int int30 = localDate28.getYear();
        int int31 = localDate28.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property41 = localDate33.year();
        int int42 = property41.get();
        org.joda.time.LocalDate localDate44 = property41.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDate44.isSupported(dateTimeFieldType45);
        int int47 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate44);
        boolean boolean48 = localDate25.isBefore((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate56 = localDate54.minusWeeks((-1));
        boolean boolean57 = localDate50.isEqual((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate.Property property58 = localDate50.year();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate64 = localDate62.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = localDate62.toDateTimeAtCurrentTime(dateTimeZone65);
        int int67 = property58.getDifference((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str68 = property58.getAsString();
        org.joda.time.LocalDate localDate70 = property58.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate71 = property58.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate72 = property58.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDate localDate74 = localDate72.minus(readablePeriod73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = localDate74.toDateMidnight(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateTime dateTime78 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.LocalDate.Property property79 = localDate0.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2019 + "'", int20 == 2019);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2020" + "'", str21, "2020");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2020 + "'", int30 == 2020);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2020 + "'", int42 == 2020);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2019 + "'", int67 == 2019);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2020" + "'", str68, "2020");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate3.plus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.parse("1970-01-01");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate24 = property21.addWrapFieldToCopy(0);
        int int25 = property21.getMaximumValue();
        org.joda.time.LocalDate localDate26 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate27 = localDate11.withFields((org.joda.time.ReadablePartial) localDate26);
        boolean boolean28 = localDate9.isAfter((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate11.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate11.withPeriodAdded(readablePeriod31, 49);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    @Ignore
  public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate11.withMonthOfYear(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(1);
        org.joda.time.LocalDate localDate8 = localDate4.withDayOfYear(49);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate27 = localDate18.plusDays((int) (short) 100);
        boolean boolean28 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property29 = localDate16.dayOfWeek();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = localDate33.indexOf(dateTimeFieldType34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology40 = localDate37.getChronology();
        int int41 = localDate33.compareTo((org.joda.time.ReadablePartial) localDate37);
        int int42 = localDate37.getDayOfYear();
        java.lang.String str43 = localDate37.toString();
        java.lang.String str45 = localDate37.toString("1");
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = localDate37.toDateMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = localDate52.indexOf(dateTimeFieldType53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology59 = localDate56.getChronology();
        int int60 = localDate52.compareTo((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate.Property property61 = localDate52.weekOfWeekyear();
        org.joda.time.LocalDate localDate63 = localDate52.withYearOfEra(2);
        org.joda.time.LocalDate localDate65 = localDate52.minusYears(100);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate71 = localDate69.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate73 = localDate71.minusWeeks((-1));
        boolean boolean74 = localDate67.isEqual((org.joda.time.ReadablePartial) localDate71);
        org.joda.time.LocalDate.Property property75 = localDate71.yearOfCentury();
        org.joda.time.LocalDate localDate77 = localDate71.withYearOfCentury((int) '#');
        int int78 = localDate77.getDayOfMonth();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology80);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate85 = localDate83.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate87 = localDate85.minusWeeks((-1));
        boolean boolean88 = localDate81.isEqual((org.joda.time.ReadablePartial) localDate85);
        org.joda.time.LocalDate localDate90 = localDate81.plusDays((int) (short) 100);
        boolean boolean91 = localDate79.isEqual((org.joda.time.ReadablePartial) localDate90);
        org.joda.time.LocalDate.Property property92 = localDate79.dayOfWeek();
        org.joda.time.LocalDate localDate93 = property92.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property92.getFieldType();
        int int95 = localDate77.indexOf(dateTimeFieldType94);
        org.joda.time.LocalDate.Property property96 = localDate52.property(dateTimeFieldType94);
        int int97 = localDate16.indexOf(dateTimeFieldType94);
        int int98 = localDate14.get(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 4, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((int) '4', 0, 52, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDate14.toLocalDateTime(localTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    @Ignore
  public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        int int27 = property26.get();
        java.util.Locale locale29 = null;
        org.joda.time.LocalDate localDate30 = property26.setCopy("1", locale29);
        java.util.Date date31 = localDate30.toDate();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromDateFields(date31);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2019 + "'", int27 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Nov 25 00:00:00 UTC 1");
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    @Ignore
  public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        java.lang.String str15 = localDate14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate14.withPeriodAdded(readablePeriod16, 11);
        org.joda.time.LocalDate localDate19 = localDate0.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate30 = localDate21.plusDays((int) (short) 100);
        int[] intArray31 = localDate30.getValues();
        org.joda.time.LocalDate localDate32 = localDate14.withFields((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate14.toDateTimeAtStartOfDay(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0099-01-01" + "'", str15, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2021, 3, 5]");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = property13.addWrapFieldToCopy(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate15.withDayOfWeek((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    @Ignore
  public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology23);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        org.joda.time.LocalDate localDate15 = property12.roundFloorCopy();
        java.lang.String str16 = property12.getName();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekOfWeekyear" + "'", str16, "weekOfWeekyear");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((-1));
        boolean boolean23 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property24 = localDate20.yearOfCentury();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.LocalDate localDate27 = property24.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate27.toInterval(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate27.plusWeeks((-1));
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra(4);
        int int34 = property9.compareTo((org.joda.time.ReadablePartial) localDate31);
        int int35 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        java.lang.String str15 = property9.getName();
        java.util.Locale locale16 = null;
        int int17 = property9.getMaximumShortTextLength(locale16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfCentury" + "'", str15, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        org.joda.time.LocalDate localDate23 = localDate21.minusYears((int) (short) 0);
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(durationFieldType25);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTime dateTime23 = localDate18.toDateTime(localTime22);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 360 + "'", int21 == 360);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        org.joda.time.LocalDate localDate29 = localDate5.withWeekyear(1970);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays((int) '4');
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    @Ignore
  public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        java.util.Date date17 = localDate16.toDate();
        int int18 = localDate16.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 UTC 100");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    @Ignore
  public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(obj0);
        int int2 = localDate1.getWeekyear();
        int int3 = localDate1.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2020 + "'", int2 == 2020);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 25 + "'", int3 == 25);
    }

    @Test
    @Ignore
  public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        java.lang.String str2 = property1.getAsString();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        java.lang.Class<?> wildcardClass4 = property1.getClass();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2020" + "'", str2, "2020");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        org.joda.time.LocalDate localDate13 = property10.setCopy((int) '#');
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    @Ignore
  public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        java.lang.String str5 = localDate1.toString("1970-01-01");
        org.joda.time.DateMidnight dateMidnight6 = localDate1.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate1.withMonthOfYear((-1969));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    @Ignore
  public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        int int6 = localDate5.getDayOfYear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    @Ignore
  public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = property9.getAsText(locale39);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
    }

    @Test
    @Ignore
  public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date28 = localDate27.toDate();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate29.minus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate43.year();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate55.toDateTimeAtCurrentTime(dateTimeZone58);
        int int60 = property51.getDifference((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate68 = localDate66.minusWeeks((-1));
        boolean boolean69 = localDate62.isEqual((org.joda.time.ReadablePartial) localDate66);
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtMidnight();
        int int71 = property51.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime74 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDate localDate76 = localDate14.minusWeeks(31);
        int int77 = localDate76.getDayOfWeek();
        org.joda.time.LocalDate.Property property78 = localDate76.dayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2019 + "'", int60 == 2019);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2019 + "'", int71 == 2019);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        int int13 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(0);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate18 = localDate11.withDayOfYear(6);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        java.lang.String str5 = localDate1.toString("0000-01-06");
        int int6 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate.Property property7 = localDate1.era();
        java.lang.String str8 = property7.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0000-01-06" + "'", str5, "0000-01-06");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AD" + "'", str8, "AD");
    }

    @Test
    @Ignore
  public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate3.plus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        java.lang.String str17 = property16.toString();
        int int18 = property16.getMaximumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property28 = localDate24.yearOfCentury();
        java.lang.String str29 = property28.getAsShortText();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate31 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property28.addWrapFieldToCopy(19);
        boolean boolean34 = property16.equals((java.lang.Object) property28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate52 = localDate50.minusWeeks((-1));
        boolean boolean53 = localDate46.isEqual((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate.Property property54 = localDate46.year();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate58.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtCurrentTime(dateTimeZone61);
        int int63 = property54.getDifference((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate71 = localDate69.minusWeeks((-1));
        boolean boolean72 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtMidnight();
        int int74 = property54.getDifference((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        int int76 = property28.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = localDate3.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2019 + "'", int63 == 2019);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2019 + "'", int74 == 2019);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    @Ignore
  public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate28 = property4.getLocalDate();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate39 = localDate34.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property40 = localDate34.year();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = localDate45.indexOf(dateTimeFieldType46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology52 = localDate49.getChronology();
        int int53 = localDate45.compareTo((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.LocalDate.Property property54 = localDate45.weekOfWeekyear();
        org.joda.time.LocalDate localDate56 = localDate45.withYearOfEra(2);
        org.joda.time.LocalDate localDate58 = localDate45.minusYears(100);
        org.joda.time.LocalTime localTime59 = null;
        org.joda.time.DateTime dateTime60 = localDate45.toDateTime(localTime59);
        long long61 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime60);
        int int62 = property4.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    @Ignore
  public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy(0);
        boolean boolean39 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate4.withDayOfYear(6);
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate41.toDateTime(localTime42, dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate41.minusMonths((int) 'a');
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1970");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        org.joda.time.LocalDate localDate23 = localDate19.minusDays((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    @Ignore
  public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) date9, chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = localDate21.indexOf(dateTimeFieldType22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology28 = localDate25.getChronology();
        int int29 = localDate21.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate25.toDateMidnight(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate25.minusYears((int) ' ');
        boolean boolean34 = localDate15.isBefore((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate.Property property44 = localDate40.yearOfCentury();
        java.lang.String str45 = property44.getAsShortText();
        org.joda.time.LocalDate localDate47 = property44.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate49 = property44.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date52 = localDate51.toDate();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology57 = localDate54.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) date52, chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = localDate58.toDateMidnight(dateTimeZone59);
        org.joda.time.LocalDate.Property property61 = localDate58.weekOfWeekyear();
        org.joda.time.LocalDate localDate62 = property61.roundHalfEvenCopy();
        boolean boolean63 = localDate49.isBefore((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.LocalDate localDate65 = localDate49.minusYears((int) '4');
        boolean boolean66 = localDate25.isBefore((org.joda.time.ReadablePartial) localDate49);
        boolean boolean67 = localDate1.equals((java.lang.Object) boolean66);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getMonthOfYear();
        int int13 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(0);
        org.joda.time.LocalDate.Property property16 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = localDate17.isEqual(readablePartial18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        int int13 = localDate12.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = localDate12.toDateMidnight();
        int int15 = localDate12.getWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate21.yearOfCentury();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDate localDate28 = property25.addWrapFieldToCopy(0);
        boolean boolean29 = localDate12.isAfter((org.joda.time.ReadablePartial) localDate28);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 38, dateTimeZone1);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(48);
        org.joda.time.LocalDate localDate16 = property11.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    @Ignore
  public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date39 = localDate38.toDate();
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate43.year();
        int int52 = property51.get();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = localDate56.indexOf(dateTimeFieldType57);
        org.joda.time.LocalTime localTime59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate56.toDateTime(localTime59, dateTimeZone60);
        long long62 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime61);
        int int63 = property41.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int int65 = localDate36.getEra();
        org.joda.time.LocalDate localDate67 = localDate36.plusWeeks((int) ' ');
        int int68 = localDate67.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2020 + "'", int52 == 2020);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2019L + "'", long62 == 2019L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 308 + "'", int68 == 308);
    }

    @Test
    @Ignore
  public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date28 = localDate27.toDate();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate29.minus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate43.year();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate55.toDateTimeAtCurrentTime(dateTimeZone58);
        int int60 = property51.getDifference((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate68 = localDate66.minusWeeks((-1));
        boolean boolean69 = localDate62.isEqual((org.joda.time.ReadablePartial) localDate66);
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtMidnight();
        int int71 = property51.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime74 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDate localDate76 = localDate14.minusWeeks(31);
        int int77 = localDate76.getDayOfWeek();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.plusMonths((int) '4');
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate86 = localDate84.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate88 = localDate86.minusWeeks((-1));
        boolean boolean89 = localDate82.isEqual((org.joda.time.ReadablePartial) localDate86);
        org.joda.time.LocalDate.Property property90 = localDate86.yearOfCentury();
        java.lang.String str91 = property90.getAsShortText();
        org.joda.time.LocalDate localDate92 = property90.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        int int94 = localDate92.indexOf(dateTimeFieldType93);
        org.joda.time.LocalDate.Property property95 = localDate92.dayOfWeek();
        java.lang.String str96 = property95.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = property95.getFieldType();
        org.joda.time.LocalDate.Property property98 = localDate78.property(dateTimeFieldType97);
        int int99 = localDate76.get(dateTimeFieldType97);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2019 + "'", int60 == 2019);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2019 + "'", int71 == 2019);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1" + "'", str91, "1");
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Thursday" + "'", str96, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 4 + "'", int99 == 4);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate3.plus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = localDate9.toInterval(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    @Ignore
  public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate56 = localDate54.minusWeeks((-1));
        boolean boolean57 = localDate50.isEqual((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate.Property property58 = localDate54.yearOfCentury();
        java.lang.String str59 = property58.getAsShortText();
        org.joda.time.LocalDate localDate60 = property58.withMaximumValue();
        org.joda.time.LocalDate localDate61 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate63 = property58.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate68 = localDate63.withFields((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.LocalTime localTime69 = null;
        org.joda.time.DateTime dateTime70 = localDate63.toDateTime(localTime69);
        int int71 = property48.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 712222 + "'", int71 == 712222);
    }

    @Test
    @Ignore
  public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusDays(4);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate21 = localDate15.plusWeeks(1);
        java.lang.String str23 = localDate21.toString("1970-01-01");
        int int24 = localDate21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        java.lang.String str16 = property15.getName();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property15.getAsShortText(locale17);
        org.joda.time.LocalDate localDate20 = property15.addToCopy(48);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfYear" + "'", str16, "dayOfYear");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.LocalDate localDate6 = property3.addToCopy(360);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(100);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19" + "'", str4, "19");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate15.plusWeeks(99);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate23 = localDate20.plusMonths(6);
        int int24 = localDate23.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    @Ignore
  public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        int int50 = property49.getMinimumValueOverall();
        java.lang.String str51 = property49.getAsText();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
    }

    @Test
    @Ignore
  public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        java.util.Date date5 = localDate1.toDate();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDate6.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    @Ignore
  public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.withMinimumValue();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate19 = property18.roundHalfEvenCopy();
        int int20 = property18.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    @Ignore
  public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int13 = property9.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property9.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    @Ignore
  public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(25833600000L);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.LocalDate localDate8 = localDate6.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.year();
        org.joda.time.LocalDate localDate11 = localDate6.withFields((org.joda.time.ReadablePartial) localDate9);
        int int12 = localDate6.getEra();
        org.joda.time.LocalDate localDate14 = localDate6.withWeekyear(98);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate16.minus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, 48);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date25 = localDate24.toDate();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate26.minus(readablePeriod27);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfWeek();
        org.joda.time.LocalDate localDate31 = localDate28.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) localDate31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date35 = localDate34.toDate();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology40 = localDate37.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) date35, chronology40);
        java.util.Date date42 = localDate41.toDate();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate48.minusWeeks((-1));
        boolean boolean51 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate53 = localDate48.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property54 = localDate48.year();
        org.joda.time.LocalDate localDate56 = property54.setCopy((int) 'a');
        org.joda.time.LocalDate localDate58 = property54.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDate58.getFieldType(1);
        org.joda.time.LocalDate.Property property61 = localDate41.property(dateTimeFieldType60);
        org.joda.time.LocalDate localDate63 = localDate31.withField(dateTimeFieldType60, (int) (byte) 1);
        int int64 = localDate19.get(dateTimeFieldType60);
        int int65 = localDate14.get(dateTimeFieldType60);
        boolean boolean66 = localDate1.isSupported(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    @Ignore
  public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.LocalDate localDate6 = property3.addToCopy(360);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        int int14 = property3.compareTo((org.joda.time.ReadablePartial) localDate12);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19" + "'", str4, "19");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    @Ignore
  public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        int int50 = property49.getMinimumValueOverall();
        java.util.Locale locale52 = null;
        org.joda.time.LocalDate localDate53 = property49.setCopy("-1", locale52);
        java.lang.String str54 = property49.getName();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "weekyear" + "'", str54, "weekyear");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property25 = localDate14.year();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        org.joda.time.LocalDate.Property property17 = localDate14.year();
        boolean boolean18 = property17.isLeap();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.lang.String str12 = localDate11.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate11.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.LocalDate.Property property16 = localDate15.centuryOfEra();
        int int17 = property16.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0099-01-01" + "'", str12, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    @Ignore
  public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        java.lang.String str20 = property9.getAsString();
        int int21 = property9.get();
        java.util.Locale locale22 = null;
        int int23 = property9.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDate localDate24 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020" + "'", str20, "2020");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2020 + "'", int21 == 2020);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 70, dateTimeZone1);
        int int3 = localDate2.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate6.withDayOfWeek(31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    @Ignore
  public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date25 = localDate24.toDate();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology30 = localDate27.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) date25, chronology30);
        java.util.Date date32 = localDate31.toDate();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate43 = localDate38.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property44 = localDate38.year();
        org.joda.time.LocalDate localDate46 = property44.setCopy((int) 'a');
        org.joda.time.LocalDate localDate48 = property44.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = localDate48.getFieldType(1);
        org.joda.time.LocalDate.Property property51 = localDate31.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate22.withField(dateTimeFieldType50, 1983);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1983 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    @Ignore
  public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        java.lang.String str20 = property9.getAsString();
        org.joda.time.LocalDate localDate22 = property9.setCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate22.toDateTime(localTime23, dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020" + "'", str20, "2020");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) localDate6, chronology10);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        int int19 = localDate15.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate15.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate21.withYear(2020);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate23.withWeekOfWeekyear(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = property6.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 0);
        org.joda.time.LocalDate localDate19 = localDate17.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.year();
        org.joda.time.LocalDate localDate22 = localDate17.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(localTime23);
        int int25 = property9.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property9.get();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    @Ignore
  public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        org.joda.time.Interval interval26 = localDate23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate23.plus(readablePeriod27);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    @Ignore
  public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone1, chronology5);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) date10, chronology15);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight7, chronology15);
        int int20 = localDate19.getWeekyear();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2020 + "'", int20 == 2020);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        int int17 = localDate16.getDayOfMonth();
        boolean boolean19 = localDate16.equals((java.lang.Object) "");
        org.joda.time.LocalDate.Property property20 = localDate16.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(330);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.LocalDate localDate25 = localDate23.minusDays((int) (byte) 100);
        int int26 = localDate25.getMonthOfYear();
        int int27 = localDate25.getCenturyOfEra();
        int int28 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate30 = localDate25.plusMonths((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = localDate25.getField((int) (byte) 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    @Ignore
  public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.roundHalfEvenCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate24 = localDate19.withYear((int) (short) 0);
        int int25 = localDate24.size();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date28 = localDate27.toDate();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        java.util.Locale locale31 = null;
        int int32 = property30.getMaximumTextLength(locale31);
        int int33 = property30.getMinimumValue();
        org.joda.time.LocalDate localDate34 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate35 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfEra();
        org.joda.time.DateMidnight dateMidnight37 = localDate35.toDateMidnight();
        org.joda.time.DateTime dateTime38 = localDate24.toDateTime((org.joda.time.ReadableInstant) dateMidnight37);
        int int39 = property11.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    @Ignore
  public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundHalfCeilingCopy();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsShortText(locale9);
        int int11 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "70" + "'", str10, "70");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    @Ignore
  public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate27.year();
        org.joda.time.LocalDate localDate37 = property35.setCopy("2020");
        org.joda.time.LocalDate localDate38 = property35.roundHalfEvenCopy();
        org.joda.time.Interval interval39 = localDate38.toInterval();
        org.joda.time.LocalDate localDate41 = localDate38.withYear(3);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.plusMonths((int) '4');
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate52 = localDate50.minusWeeks((-1));
        boolean boolean53 = localDate46.isEqual((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate.Property property54 = localDate50.yearOfCentury();
        java.lang.String str55 = property54.getAsShortText();
        org.joda.time.LocalDate localDate56 = property54.withMaximumValue();
        java.lang.String str57 = localDate56.toString();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDate localDate60 = localDate56.withPeriodAdded(readablePeriod58, 11);
        org.joda.time.LocalDate localDate61 = localDate42.withFields((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate69 = localDate67.minusWeeks((-1));
        boolean boolean70 = localDate63.isEqual((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.LocalDate localDate72 = localDate63.plusDays((int) (short) 100);
        int[] intArray73 = localDate72.getValues();
        org.joda.time.LocalDate localDate74 = localDate56.withFields((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate localDate75 = localDate38.withFields((org.joda.time.ReadablePartial) localDate74);
        boolean boolean76 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = localDate75.getFields();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0099-01-01" + "'", str57, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[2021, 3, 5]");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        org.joda.time.LocalDate localDate15 = property12.roundFloorCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.era();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    @Ignore
  public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        int int11 = property6.getMinimumValueOverall();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property33 = localDate25.year();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone40);
        int int42 = property33.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate48.minusWeeks((-1));
        boolean boolean51 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtMidnight();
        int int53 = property33.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = localDate19.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        int int56 = property6.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDate localDate57 = property6.getLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2019 + "'", int42 == 2019);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2019 + "'", int53 == 2019);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    @Ignore
  public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField22 = property9.getField();
        int int23 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate24 = property9.roundCeilingCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        org.joda.time.LocalDate localDate15 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate16 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.lang.String str12 = property9.getAsShortText();
        java.lang.Class<?> wildcardClass13 = property9.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDate15.getFieldType(1);
        org.joda.time.LocalDate.Property property18 = localDate15.yearOfEra();
        int int19 = property18.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate7.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) localDate17, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = localDate17.toDateMidnight();
        org.joda.time.LocalDate localDate22 = localDate17.withYearOfEra(100);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    @Ignore
  public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        java.util.Locale locale26 = null;
        int int27 = property9.getMaximumShortTextLength(locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((-1));
        boolean boolean36 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate33.yearOfCentury();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDate localDate39 = property37.withMaximumValue();
        org.joda.time.LocalDate localDate40 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate42 = property37.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate47 = localDate42.withFields((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate46.withYear(3);
        boolean boolean50 = property9.equals((java.lang.Object) localDate46);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate46.toDateTimeAtStartOfDay(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.LocalDate localDate16 = localDate11.minusWeeks((int) (byte) -1);
        boolean boolean17 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate16.withDayOfYear(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField21 = localDate16.getField(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    @Ignore
  public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.getLocalDate();
        long long13 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28425600000L + "'", long13 == 28425600000L);
    }

    @Test
    @Ignore
  public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) ' ');
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        boolean boolean39 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate localDate41 = localDate32.plusDays((int) (short) 100);
        boolean boolean42 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate.Property property43 = localDate30.dayOfWeek();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date46 = localDate45.toDate();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate45.minus(readablePeriod47);
        org.joda.time.LocalDate localDate50 = localDate48.plusMonths(99);
        boolean boolean51 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate50);
        boolean boolean52 = localDate27.equals((java.lang.Object) localDate50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDate27.getFieldTypes();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValueOverall();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsShortText(locale13);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    @Ignore
  public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate1.toDate();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    @Ignore
  public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str39 = property9.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
    }

    @Test
    @Ignore
  public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date8 = localDate7.toDate();
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate7.toString("2020", locale10);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(1983, 11, 4, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((int) (byte) 1, 1968, 27, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020" + "'", str11, "2020");
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 'a');
        int int2 = localDate1.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 70 + "'", int2 == 70);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear((-2019));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2019 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        org.joda.time.LocalDate.Property property20 = localDate14.era();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        boolean boolean29 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate31 = localDate26.withYear((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property41 = localDate33.year();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 99, chronology48);
        boolean boolean51 = localDate33.equals((java.lang.Object) 99);
        boolean boolean52 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate58.minusWeeks((-1));
        boolean boolean61 = localDate54.isEqual((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate.Property property62 = localDate58.yearOfCentury();
        java.lang.String str63 = property62.getAsShortText();
        org.joda.time.LocalDate localDate65 = property62.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate67 = property62.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate68 = localDate33.withFields((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.LocalDate.Property property69 = localDate67.monthOfYear();
        int int70 = property20.compareTo((org.joda.time.ReadablePartial) localDate67);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        int int10 = localDate4.getEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = localDate4.toInterval(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDate4.getFieldType(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(localTime12, dateTimeZone13);
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = property5.roundCeilingCopy();
        java.lang.String str17 = property5.getName();
        org.joda.time.DurationField durationField18 = property5.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1968 + "'", int15 == 1968);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate15.plusWeeks(99);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        boolean boolean30 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate32 = localDate23.plusDays((int) (short) 100);
        boolean boolean33 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate32);
        int int34 = localDate32.getEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = localDate32.toInterval(dateTimeZone35);
        boolean boolean37 = localDate15.isAfter((org.joda.time.ReadablePartial) localDate32);
        int int38 = localDate15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    @Ignore
  public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getWeekOfWeekyear();
        int int14 = localDate11.getYear();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate18 = localDate11.minusWeeks(20);
        org.joda.time.LocalDate.Property property19 = localDate11.weekyear();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears(3);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        int int19 = localDate7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate19.minusDays(10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    @Ignore
  public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate6.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        boolean boolean16 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate18 = localDate9.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate20 = localDate9.withYearOfEra((int) ' ');
        org.joda.time.LocalDate localDate22 = localDate9.plusWeeks(292278993);
        boolean boolean23 = localDate6.isBefore((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property24 = localDate22.year();
        long long25 = property24.remainder();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate37 = localDate31.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        int int40 = localDate39.getDayOfYear();
        org.joda.time.LocalDate localDate41 = localDate31.withFields((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date44 = localDate43.toDate();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology49 = localDate46.getChronology();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) date44, chronology49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) localDate31, chronology49);
        org.joda.time.DateTime dateTime52 = localDate31.toDateTimeAtMidnight();
        long long53 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime52);
        java.util.Locale locale54 = null;
        int int55 = property24.getMaximumShortTextLength(locale54);
        org.joda.time.LocalDate localDate56 = property24.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25833600000L + "'", long25 == 25833600000L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 330 + "'", int40 == 330);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5603648L + "'", long53 == 5603648L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDate56);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.String str13 = property9.getAsText();
        java.lang.String str14 = property9.getAsText();
        java.lang.String str15 = property9.getAsString();
        boolean boolean16 = property9.isLeap();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    @Ignore
  public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date39 = localDate38.toDate();
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate43.year();
        int int52 = property51.get();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = localDate56.indexOf(dateTimeFieldType57);
        org.joda.time.LocalTime localTime59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate56.toDateTime(localTime59, dateTimeZone60);
        long long62 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime61);
        int int63 = property41.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int int65 = localDate36.getEra();
        org.joda.time.LocalDate localDate67 = localDate36.plusWeeks((int) ' ');
        org.joda.time.LocalDate.Property property68 = localDate67.yearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2020 + "'", int52 == 2020);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2019L + "'", long62 == 2019L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = localDate12.minusYears((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate12.withEra((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate19 = property18.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) property18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    @Ignore
  public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfWeek();
        java.lang.String str18 = property17.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property17.getFieldType();
        org.joda.time.LocalDate.Property property20 = localDate0.property(dateTimeFieldType19);
        int int21 = localDate0.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Thursday" + "'", str18, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate21 = localDate16.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.plusYears(27);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        int int26 = localDate23.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusMonths(4);
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        int int39 = localDate31.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = localDate35.toDateMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate35.minusYears((int) ' ');
        org.joda.time.DateTime dateTime44 = localDate43.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.plusMonths((int) '4');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate55 = localDate53.minusWeeks((-1));
        boolean boolean56 = localDate49.isEqual((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate.Property property57 = localDate53.yearOfCentury();
        java.lang.String str58 = property57.getAsShortText();
        org.joda.time.LocalDate localDate59 = property57.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = localDate59.indexOf(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property62 = localDate59.dayOfWeek();
        java.lang.String str63 = property62.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property62.getFieldType();
        org.joda.time.LocalDate.Property property65 = localDate45.property(dateTimeFieldType64);
        org.joda.time.LocalDate.Property property66 = localDate43.property(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate68 = localDate26.withField(dateTimeFieldType64, 48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 360 + "'", int21 == 360);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Thursday" + "'", str63, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        int int8 = localDate3.getMonthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate3.weekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = localDate13.indexOf(dateTimeFieldType14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        int int21 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property22 = localDate13.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate13.withYearOfEra(2);
        org.joda.time.LocalDate localDate26 = localDate13.minusYears(100);
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths((int) '4');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate.Property property41 = localDate37.yearOfCentury();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDate localDate44 = property41.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property45 = localDate44.weekOfWeekyear();
        boolean boolean46 = localDate29.isAfter((org.joda.time.ReadablePartial) localDate44);
        int int47 = localDate44.getCenturyOfEra();
        org.joda.time.LocalDate.Property property48 = localDate44.dayOfMonth();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property48.getAsText(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property48.getFieldType();
        int int52 = localDate28.get(dateTimeFieldType51);
        org.joda.time.LocalDate.Property property53 = localDate3.property(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    @Ignore
  public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology9);
        int int14 = localDate13.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate17 = localDate13.withCenturyOfEra(1);
        org.joda.time.LocalTime localTime18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDate13.toLocalDateTime(localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate1.plus(readablePeriod9);
        org.joda.time.LocalDate.Property property11 = localDate1.dayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    @Ignore
  public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate12.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    @Ignore
  public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 0);
        org.joda.time.LocalDate localDate32 = localDate30.minusDays((int) (byte) 100);
        int int33 = localDate32.getMonthOfYear();
        boolean boolean34 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate36 = localDate4.withWeekyear(20);
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths(4);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        java.lang.String str14 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    @Ignore
  public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField31 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) localDate4, dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        java.lang.String str14 = property9.toString();
        java.util.Locale locale15 = null;
        int int16 = property9.getMaximumTextLength(locale15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[yearOfCentury]" + "'", str14, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }
}


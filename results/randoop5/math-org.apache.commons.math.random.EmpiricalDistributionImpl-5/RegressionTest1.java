import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass19 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-2.382602638445688d) + "'", double17 == (-2.382602638445688d));
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        java.io.File file33 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.8130029258894103d) + "'", double17 == (-1.8130029258894103d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        double double22 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.8539831826884364d) + "'", double18 == (-0.8539831826884364d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.3215826464070515d) + "'", double22 == (-1.3215826464070515d));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass23 = statisticalSummary22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.35665714235832735d) + "'", double18 == (-0.35665714235832735d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary43);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass45 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double double19 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.08724436749564288d) + "'", double17 == (-0.08724436749564288d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.21480969196865043d) + "'", double19 == (-0.21480969196865043d));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        java.lang.Class<?> wildcardClass44 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        empiricalDistributionImpl3.load(doubleArray20);
        double double24 = empiricalDistributionImpl3.getNextValue();
        java.util.List list25 = empiricalDistributionImpl3.getBinStats();
        int int26 = empiricalDistributionImpl3.getBinCount();
        java.util.List list27 = empiricalDistributionImpl3.getBinStats();
        double double28 = empiricalDistributionImpl3.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray29);
        int int31 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 32.0d + "'", double24 == 32.0d);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(list27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass18 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.io.File file16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        double double14 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.25d + "'", double12 == 0.25d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.25d + "'", double13 == 0.25d);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25d + "'", double14 == 0.25d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        java.io.File file20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.42088843662713255d) + "'", double18 == (-0.42088843662713255d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 32.0d + "'", double43 == 32.0d);
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray18 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        int int17 = empiricalDistributionImpl1.getBinCount();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        int int17 = empiricalDistributionImpl1.getBinCount();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(list18);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass3 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(statisticalSummary25);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        boolean boolean29 = empiricalDistributionImpl12.isLoaded();
        boolean boolean30 = empiricalDistributionImpl12.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean33 = empiricalDistributionImpl32.isLoaded();
        int int34 = empiricalDistributionImpl32.getBinCount();
        boolean boolean35 = empiricalDistributionImpl32.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        double[] doubleArray40 = new double[] { 100.0d };
        empiricalDistributionImpl37.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        empiricalDistributionImpl12.load(doubleArray40);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray50 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl45.load(doubleArray50);
        double[] doubleArray52 = empiricalDistributionImpl45.getUpperBounds();
        int int53 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray62 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl57.load(doubleArray62);
        double[] doubleArray64 = empiricalDistributionImpl57.getUpperBounds();
        empiricalDistributionImpl55.load(doubleArray64);
        empiricalDistributionImpl45.load(doubleArray64);
        empiricalDistributionImpl12.load(doubleArray64);
        empiricalDistributionImpl1.load(doubleArray64);
        java.lang.Class<?> wildcardClass69 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.1386306742474483d + "'", double28 == 1.1386306742474483d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list24 = empiricalDistributionImpl16.getBinStats();
        boolean boolean25 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        boolean boolean27 = empiricalDistributionImpl16.isLoaded();
        boolean boolean28 = empiricalDistributionImpl16.isLoaded();
        int int29 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray31 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray31.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        boolean boolean31 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass9 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL42 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass21 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.21052392574851747d + "'", double18 == 0.21052392574851747d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray35 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl30.load(doubleArray35);
        double[] doubleArray37 = empiricalDistributionImpl30.getUpperBounds();
        java.util.List list38 = empiricalDistributionImpl30.getBinStats();
        boolean boolean39 = empiricalDistributionImpl30.isLoaded();
        double[] doubleArray40 = empiricalDistributionImpl30.getUpperBounds();
        boolean boolean41 = empiricalDistributionImpl30.isLoaded();
        boolean boolean42 = empiricalDistributionImpl30.isLoaded();
        int int43 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray45 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray45);
        java.net.URL uRL47 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    @Ignore
  public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.75d + "'", double12 == 0.75d);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double double28 = empiricalDistributionImpl1.getNextValue();
        int int29 = empiricalDistributionImpl1.getBinCount();
        java.util.List list30 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass31 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int12 = empiricalDistributionImpl11.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl11.getSampleStats();
        double[] doubleArray17 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl11.load(doubleArray17);
        empiricalDistributionImpl9.load(doubleArray17);
        double double20 = empiricalDistributionImpl9.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double double33 = empiricalDistributionImpl22.getNextValue();
        double[] doubleArray34 = empiricalDistributionImpl22.getUpperBounds();
        double[] doubleArray35 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray35);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        double[] doubleArray54 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray54);
        empiricalDistributionImpl1.load(doubleArray54);
        java.net.URL uRL57 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 32.0d + "'", double33 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        int int24 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.lang.Class<?> wildcardClass27 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double double15 = empiricalDistributionImpl1.getNextValue();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7656805202834113d + "'", double15 == 0.7656805202834113d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl5.getSampleStats();
        double[] doubleArray22 = empiricalDistributionImpl5.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray11 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl6.load(doubleArray11);
        double[] doubleArray13 = empiricalDistributionImpl6.getUpperBounds();
        int int14 = empiricalDistributionImpl6.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray23 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl18.load(doubleArray23);
        double[] doubleArray25 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray25);
        empiricalDistributionImpl6.load(doubleArray25);
        java.util.List list28 = empiricalDistributionImpl6.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        double[] doubleArray33 = new double[] { 100.0d };
        empiricalDistributionImpl30.load(doubleArray33);
        boolean boolean35 = empiricalDistributionImpl30.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        empiricalDistributionImpl30.load(doubleArray53);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int60 = empiricalDistributionImpl59.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl59.getSampleStats();
        double[] doubleArray65 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl59.load(doubleArray65);
        empiricalDistributionImpl57.load(doubleArray65);
        empiricalDistributionImpl30.load(doubleArray65);
        empiricalDistributionImpl6.load(doubleArray65);
        double[] doubleArray74 = new double[] { 1L, (-1L), 100, (-0.1848242085516721d) };
        empiricalDistributionImpl6.load(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNull(statisticalSummary61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, -1.0, 100.0, -0.1848242085516721]");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean45 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.6666666666666666d + "'", double43 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        double double56 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass57 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray61 = new double[] { 100.0d };
        empiricalDistributionImpl58.load(doubleArray61);
        boolean boolean63 = empiricalDistributionImpl58.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl58.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray67 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray67);
        empiricalDistributionImpl15.load(doubleArray67);
        empiricalDistributionImpl1.load(doubleArray67);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray72 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file73 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double double36 = empiricalDistributionImpl25.getNextValue();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        empiricalDistributionImpl15.load(doubleArray50);
        empiricalDistributionImpl1.load(doubleArray50);
        java.net.URL uRL55 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 32.0d + "'", double36 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        int int36 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray44 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl39.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl39.getUpperBounds();
        java.util.List list47 = empiricalDistributionImpl39.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int52 = empiricalDistributionImpl51.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl51.getSampleStats();
        double[] doubleArray57 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl51.load(doubleArray57);
        empiricalDistributionImpl49.load(doubleArray57);
        double double60 = empiricalDistributionImpl49.getNextValue();
        double[] doubleArray61 = empiricalDistributionImpl49.getUpperBounds();
        double[] doubleArray62 = empiricalDistributionImpl49.getUpperBounds();
        empiricalDistributionImpl39.load(doubleArray62);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl39.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl66 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int69 = empiricalDistributionImpl68.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = empiricalDistributionImpl68.getSampleStats();
        double[] doubleArray74 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl68.load(doubleArray74);
        empiricalDistributionImpl66.load(doubleArray74);
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl25.load(doubleArray74);
        empiricalDistributionImpl1.load(doubleArray74);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.4060973251137003d + "'", double18 == 2.4060973251137003d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double60 + "' != '" + 32.0d + "'", double60 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(statisticalSummary64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNull(statisticalSummary70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 32.0, 1.0]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        double double44 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.6666666666666666d + "'", double44 == 0.6666666666666666d);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(35);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNull(statisticalSummary5);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        java.io.File file67 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 32.0d + "'", double62 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl14.load(doubleArray33);
        java.util.List list36 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl38.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int50 = empiricalDistributionImpl49.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl49.getSampleStats();
        double[] doubleArray55 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl49.load(doubleArray55);
        empiricalDistributionImpl47.load(doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl47.load(doubleArray61);
        empiricalDistributionImpl38.load(doubleArray61);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int68 = empiricalDistributionImpl67.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        double[] doubleArray73 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl67.load(doubleArray73);
        empiricalDistributionImpl65.load(doubleArray73);
        empiricalDistributionImpl38.load(doubleArray73);
        empiricalDistributionImpl14.load(doubleArray73);
        empiricalDistributionImpl12.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        int int80 = empiricalDistributionImpl1.getBinCount();
        java.util.List list81 = empiricalDistributionImpl1.getBinStats();
        double double82 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(list81);
// flaky:         org.junit.Assert.assertTrue("'" + double82 + "' != '" + 32.0d + "'", double82 == 32.0d);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        int int22 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.4049016655480456d + "'", double18 == 0.4049016655480456d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary23);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass22 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0179721501817407d + "'", double18 == 1.0179721501817407d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) -1);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9903733368110159d + "'", double18 == 0.9903733368110159d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        double[] doubleArray40 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double double16 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass17 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        boolean boolean18 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl13.getSampleStats();
        boolean boolean20 = empiricalDistributionImpl13.isLoaded();
        boolean boolean21 = empiricalDistributionImpl13.isLoaded();
        java.util.List list22 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray29 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl24.load(doubleArray29);
        double[] doubleArray31 = empiricalDistributionImpl24.getUpperBounds();
        int int32 = empiricalDistributionImpl24.getBinCount();
        double[] doubleArray33 = empiricalDistributionImpl24.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray33);
        empiricalDistributionImpl11.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl5.getSampleStats();
        double[] doubleArray11 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl5.load(doubleArray11);
        empiricalDistributionImpl3.load(doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl3.load(doubleArray17);
        double double19 = empiricalDistributionImpl3.getNextValue();
        boolean boolean20 = empiricalDistributionImpl3.isLoaded();
        boolean boolean21 = empiricalDistributionImpl3.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray22);
        java.lang.Class<?> wildcardClass24 = doubleArray22.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.17263852858256803d) + "'", double19 == (-0.17263852858256803d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl25.load(doubleArray34);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        double[] doubleArray40 = new double[] { 100.0d };
        empiricalDistributionImpl37.load(doubleArray40);
        empiricalDistributionImpl25.load(doubleArray40);
        java.util.List list43 = empiricalDistributionImpl25.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl25.getSampleStats();
        double double45 = empiricalDistributionImpl25.getNextValue();
        java.util.List list46 = empiricalDistributionImpl25.getBinStats();
        int int47 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray48 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray32 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl27.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl27.getUpperBounds();
        int int35 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray44 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl39.load(doubleArray44);
        double[] doubleArray46 = empiricalDistributionImpl39.getUpperBounds();
        empiricalDistributionImpl37.load(doubleArray46);
        empiricalDistributionImpl27.load(doubleArray46);
        java.util.List list49 = empiricalDistributionImpl27.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl27.getSampleStats();
        double double51 = empiricalDistributionImpl27.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int56 = empiricalDistributionImpl55.getBinCount();
        double[] doubleArray58 = new double[] { 100.0d };
        empiricalDistributionImpl55.load(doubleArray58);
        boolean boolean60 = empiricalDistributionImpl55.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl55.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl55.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl66 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int67 = empiricalDistributionImpl66.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary68 = empiricalDistributionImpl66.getSampleStats();
        double[] doubleArray72 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl66.load(doubleArray72);
        empiricalDistributionImpl64.load(doubleArray72);
        double[] doubleArray78 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl64.load(doubleArray78);
        empiricalDistributionImpl55.load(doubleArray78);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl82 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl84 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int85 = empiricalDistributionImpl84.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary86 = empiricalDistributionImpl84.getSampleStats();
        double[] doubleArray90 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl84.load(doubleArray90);
        empiricalDistributionImpl82.load(doubleArray90);
        empiricalDistributionImpl55.load(doubleArray90);
        empiricalDistributionImpl53.load(doubleArray90);
        double[] doubleArray95 = empiricalDistributionImpl53.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray95);
        empiricalDistributionImpl1.load(doubleArray95);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary98 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(statisticalSummary50);
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.75d + "'", double51 == 0.75d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(statisticalSummary61);
        org.junit.Assert.assertNotNull(statisticalSummary62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNull(statisticalSummary68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNull(statisticalSummary86);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary98);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        int int19 = empiricalDistributionImpl1.getBinCount();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.10085752039663369d + "'", double18 == 0.10085752039663369d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary45);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        int int45 = empiricalDistributionImpl1.getBinCount();
        java.io.File file46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double double21 = empiricalDistributionImpl1.getNextValue();
        int int22 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.4927453483397121d + "'", double18 == 0.4927453483397121d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.1148633289168655d + "'", double21 == 1.1148633289168655d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass5 = list4.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int8 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        double[] doubleArray13 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl7.load(doubleArray13);
        empiricalDistributionImpl5.load(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl5.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        double double9 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        int int34 = empiricalDistributionImpl1.getBinCount();
        double double35 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.8583708799987894d) + "'", double17 == (-0.8583708799987894d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        double double10 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        int int45 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl47.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl47.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        double[] doubleArray70 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl56.load(doubleArray70);
        empiricalDistributionImpl47.load(doubleArray70);
        double[] doubleArray73 = empiricalDistributionImpl47.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl75 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl77 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int78 = empiricalDistributionImpl77.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary79 = empiricalDistributionImpl77.getSampleStats();
        double[] doubleArray83 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl77.load(doubleArray83);
        empiricalDistributionImpl75.load(doubleArray83);
        double double86 = empiricalDistributionImpl75.getNextValue();
        double[] doubleArray87 = empiricalDistributionImpl75.getUpperBounds();
        empiricalDistributionImpl47.load(doubleArray87);
        empiricalDistributionImpl1.load(doubleArray87);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertNotNull(statisticalSummary54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNull(statisticalSummary79);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.11080445149924517d + "'", double17 == 0.11080445149924517d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray45 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl40.load(doubleArray45);
        double[] doubleArray47 = empiricalDistributionImpl40.getUpperBounds();
        java.util.List list48 = empiricalDistributionImpl40.getBinStats();
        boolean boolean49 = empiricalDistributionImpl40.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl40.getSampleStats();
        int int51 = empiricalDistributionImpl40.getBinCount();
        boolean boolean52 = empiricalDistributionImpl40.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean55 = empiricalDistributionImpl54.isLoaded();
        boolean boolean56 = empiricalDistributionImpl54.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double[] doubleArray72 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl58.load(doubleArray72);
        empiricalDistributionImpl54.load(doubleArray72);
        double[] doubleArray75 = empiricalDistributionImpl54.getUpperBounds();
        empiricalDistributionImpl40.load(doubleArray75);
        int int77 = empiricalDistributionImpl40.getBinCount();
        double[] doubleArray78 = empiricalDistributionImpl40.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray78);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 0.9714285714285714, 1.0]");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        int int56 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL57 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        boolean boolean65 = empiricalDistributionImpl23.isLoaded();
        double[] doubleArray66 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.13215947527892768d + "'", double18 == 0.13215947527892768d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.11227908079318337d) + "'", double21 == (-0.11227908079318337d));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double double28 = empiricalDistributionImpl17.getNextValue();
        java.util.List list29 = empiricalDistributionImpl17.getBinStats();
        double double30 = empiricalDistributionImpl17.getNextValue();
        int int31 = empiricalDistributionImpl17.getBinCount();
        double[] doubleArray32 = empiricalDistributionImpl17.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray32);
        double double34 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(list29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(doubleArray32);
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.3333333333333333d + "'", double34 == 0.3333333333333333d);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl14.isLoaded();
        int int29 = empiricalDistributionImpl14.getBinCount();
        boolean boolean30 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        int int40 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl32.getUpperBounds();
        int int42 = empiricalDistributionImpl32.getBinCount();
        java.util.List list43 = empiricalDistributionImpl32.getBinStats();
        int int44 = empiricalDistributionImpl32.getBinCount();
        double double45 = empiricalDistributionImpl32.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean54 = empiricalDistributionImpl47.isLoaded();
        boolean boolean55 = empiricalDistributionImpl47.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl47.getUpperBounds();
        empiricalDistributionImpl32.load(doubleArray56);
        empiricalDistributionImpl14.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        java.lang.Class<?> wildcardClass60 = doubleArray56.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        boolean boolean40 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.2533303241220755d) + "'", double18 == (-1.2533303241220755d));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass4 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl28.load(doubleArray64);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl69 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl71 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int72 = empiricalDistributionImpl71.getBinCount();
        double[] doubleArray74 = new double[] { 100.0d };
        empiricalDistributionImpl71.load(doubleArray74);
        boolean boolean76 = empiricalDistributionImpl71.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = empiricalDistributionImpl71.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = empiricalDistributionImpl71.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary79 = empiricalDistributionImpl71.getSampleStats();
        double[] doubleArray80 = empiricalDistributionImpl71.getUpperBounds();
        empiricalDistributionImpl69.load(doubleArray80);
        empiricalDistributionImpl28.load(doubleArray80);
        empiricalDistributionImpl1.load(doubleArray80);
        java.lang.Class<?> wildcardClass84 = doubleArray80.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(statisticalSummary77);
        org.junit.Assert.assertNotNull(statisticalSummary78);
        org.junit.Assert.assertNotNull(statisticalSummary79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 22.677725400061846d + "'", double13 == 22.677725400061846d);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        double double9 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        double double46 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double46 + "' != '" + 32.0d + "'", double46 == 32.0d);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.1848242085516721d) };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL72 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.1848242085516721]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        java.io.File file29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        double double49 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass51 = statisticalSummary50.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double double65 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl1.getSampleStats();
        double double67 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(statisticalSummary66);
// flaky:         org.junit.Assert.assertTrue("'" + double67 + "' != '" + 32.0d + "'", double67 == 32.0d);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        empiricalDistributionImpl1.load(doubleArray43);
        int int46 = empiricalDistributionImpl1.getBinCount();
        java.util.List list47 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.8018989456072302d) + "'", double17 == (-0.8018989456072302d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        double double15 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(list14);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 21.346577501990676d + "'", double15 == 21.346577501990676d);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass14 = statisticalSummary13.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass26 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        double[] doubleArray12 = empiricalDistributionImpl5.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        empiricalDistributionImpl3.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass26 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl29.getSampleStats();
        double[] doubleArray35 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl29.load(doubleArray35);
        empiricalDistributionImpl27.load(doubleArray35);
        double[] doubleArray41 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl27.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        double double44 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        double double53 = empiricalDistributionImpl37.getNextValue();
        int int54 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean57 = empiricalDistributionImpl56.isLoaded();
        boolean boolean58 = empiricalDistributionImpl56.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl62 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int63 = empiricalDistributionImpl62.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl62.getSampleStats();
        double[] doubleArray68 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl62.load(doubleArray68);
        empiricalDistributionImpl60.load(doubleArray68);
        double[] doubleArray74 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl60.load(doubleArray74);
        empiricalDistributionImpl56.load(doubleArray74);
        empiricalDistributionImpl37.load(doubleArray74);
        empiricalDistributionImpl26.load(doubleArray74);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary79 = empiricalDistributionImpl26.getSampleStats();
        int int80 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray81 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray81);
        java.net.URL uRL83 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.2219730346675413d) + "'", double53 == (-1.2219730346675413d));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNull(statisticalSummary64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double double16 = empiricalDistributionImpl1.getNextValue();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + 32.0d + "'", double16 == 32.0d);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        empiricalDistributionImpl13.load(doubleArray30);
        double double34 = empiricalDistributionImpl13.getNextValue();
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        int int36 = empiricalDistributionImpl13.getBinCount();
        java.util.List list37 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        empiricalDistributionImpl13.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list58 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL59 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(list58);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int12 = empiricalDistributionImpl11.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl11.getSampleStats();
        double[] doubleArray17 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl11.load(doubleArray17);
        empiricalDistributionImpl9.load(doubleArray17);
        double double20 = empiricalDistributionImpl9.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double double33 = empiricalDistributionImpl22.getNextValue();
        double[] doubleArray34 = empiricalDistributionImpl22.getUpperBounds();
        double[] doubleArray35 = empiricalDistributionImpl22.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray35);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        double[] doubleArray54 = empiricalDistributionImpl38.getUpperBounds();
        empiricalDistributionImpl9.load(doubleArray54);
        empiricalDistributionImpl1.load(doubleArray54);
        java.lang.Class<?> wildcardClass57 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        double double55 = empiricalDistributionImpl39.getNextValue();
        boolean boolean56 = empiricalDistributionImpl39.isLoaded();
        boolean boolean57 = empiricalDistributionImpl39.isLoaded();
        double[] doubleArray58 = empiricalDistributionImpl39.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl39.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int64 = empiricalDistributionImpl63.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl63.getSampleStats();
        double[] doubleArray69 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl63.load(doubleArray69);
        empiricalDistributionImpl61.load(doubleArray69);
        boolean boolean72 = empiricalDistributionImpl61.isLoaded();
        boolean boolean73 = empiricalDistributionImpl61.isLoaded();
        double[] doubleArray74 = empiricalDistributionImpl61.getUpperBounds();
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl1.load(doubleArray74);
        java.net.URL uRL77 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2.1039455390498687d + "'", double55 == 2.1039455390498687d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray46 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl41.load(doubleArray46);
        double[] doubleArray48 = empiricalDistributionImpl41.getUpperBounds();
        int int49 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray58 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl53.load(doubleArray58);
        double[] doubleArray60 = empiricalDistributionImpl53.getUpperBounds();
        empiricalDistributionImpl51.load(doubleArray60);
        empiricalDistributionImpl41.load(doubleArray60);
        double[] doubleArray63 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(statisticalSummary3);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass15 = list14.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass15 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        double double17 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.6147405746898521d + "'", double17 == 0.6147405746898521d);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        java.lang.Class<?> wildcardClass2 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int20 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl19.getSampleStats();
        double[] doubleArray25 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl19.load(doubleArray25);
        empiricalDistributionImpl17.load(doubleArray25);
        double[] doubleArray31 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl17.load(doubleArray31);
        double double33 = empiricalDistributionImpl17.getNextValue();
        int int34 = empiricalDistributionImpl17.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean37 = empiricalDistributionImpl36.isLoaded();
        boolean boolean38 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        double[] doubleArray54 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl40.load(doubleArray54);
        empiricalDistributionImpl36.load(doubleArray54);
        empiricalDistributionImpl17.load(doubleArray54);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean60 = empiricalDistributionImpl59.isLoaded();
        boolean boolean61 = empiricalDistributionImpl59.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double[] doubleArray77 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl63.load(doubleArray77);
        empiricalDistributionImpl59.load(doubleArray77);
        empiricalDistributionImpl17.load(doubleArray77);
        empiricalDistributionImpl1.load(doubleArray77);
        boolean boolean82 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.6437423487040631d) + "'", double33 == (-0.6437423487040631d));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    @Ignore
  public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int30 = empiricalDistributionImpl29.getBinCount();
        double[] doubleArray32 = new double[] { 100.0d };
        empiricalDistributionImpl29.load(doubleArray32);
        boolean boolean34 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl29.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int41 = empiricalDistributionImpl40.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl40.getSampleStats();
        double[] doubleArray46 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl40.load(doubleArray46);
        empiricalDistributionImpl38.load(doubleArray46);
        double[] doubleArray52 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl38.load(doubleArray52);
        empiricalDistributionImpl29.load(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl29.load(doubleArray64);
        empiricalDistributionImpl27.load(doubleArray64);
        double[] doubleArray69 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray69);
        double double71 = empiricalDistributionImpl1.getNextValue();
        int int72 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.6666666666666666d + "'", double71 == 0.6666666666666666d);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double double65 = empiricalDistributionImpl1.getNextValue();
        java.io.File file66 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray46 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl41.load(doubleArray46);
        double[] doubleArray48 = empiricalDistributionImpl41.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int53 = empiricalDistributionImpl52.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl52.getSampleStats();
        double[] doubleArray58 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl52.load(doubleArray58);
        empiricalDistributionImpl50.load(doubleArray58);
        int int61 = empiricalDistributionImpl50.getBinCount();
        double[] doubleArray62 = empiricalDistributionImpl50.getUpperBounds();
        empiricalDistributionImpl41.load(doubleArray62);
        empiricalDistributionImpl1.load(doubleArray62);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6380337654028082d + "'", double18 == 0.6380337654028082d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNull(statisticalSummary54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.1848242085516721d) };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray72 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass73 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.1848242085516721]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        int int25 = empiricalDistributionImpl1.getBinCount();
        int int26 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = statisticalSummary5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNull(statisticalSummary5);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        int int30 = empiricalDistributionImpl1.getBinCount();
        double double31 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL32 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 32.0d + "'", double31 == 32.0d);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass15 = doubleArray14.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray13 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl8.load(doubleArray13);
        double[] doubleArray15 = empiricalDistributionImpl8.getUpperBounds();
        int int16 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray25 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl20.load(doubleArray25);
        double[] doubleArray27 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl18.load(doubleArray27);
        empiricalDistributionImpl8.load(doubleArray27);
        java.util.List list30 = empiricalDistributionImpl8.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl8.getSampleStats();
        double double32 = empiricalDistributionImpl8.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        double[] doubleArray39 = new double[] { 100.0d };
        empiricalDistributionImpl36.load(doubleArray39);
        boolean boolean41 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl47.getSampleStats();
        double[] doubleArray53 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl47.load(doubleArray53);
        empiricalDistributionImpl45.load(doubleArray53);
        double[] doubleArray59 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl45.load(doubleArray59);
        empiricalDistributionImpl36.load(doubleArray59);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        empiricalDistributionImpl36.load(doubleArray71);
        empiricalDistributionImpl34.load(doubleArray71);
        double[] doubleArray76 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl8.load(doubleArray76);
        empiricalDistributionImpl1.load(doubleArray76);
        double[] doubleArray79 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file80 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(statisticalSummary31);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.75d + "'", double32 == 0.75d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(statisticalSummary43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.2, 0.2, 0.2, 0.2, 0.8999999999999999, 0.8999999999999999, 0.8999999999999999, 0.8999999999999999, 0.8999999999999999, 1.0]");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        int int31 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        int int19 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.3055319089920945d) + "'", double18 == (-0.3055319089920945d));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        double double29 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.04055789484348504d + "'", double23 == 0.04055789484348504d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double double44 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl1.getSampleStats();
        int int46 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.6666666666666666d + "'", double44 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(statisticalSummary45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(statisticalSummary43);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        java.io.File file16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        int int24 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        boolean boolean27 = empiricalDistributionImpl1.isLoaded();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        double double19 = empiricalDistributionImpl1.getNextValue();
        double double20 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.1744954441174023d) + "'", double17 == (-1.1744954441174023d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.7747278849826d) + "'", double19 == (-1.7747278849826d));
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.878013236102863d + "'", double20 == 1.878013236102863d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double double29 = empiricalDistributionImpl1.getNextValue();
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.885105195946267d) + "'", double18 == (-0.885105195946267d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        int int49 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean52 = empiricalDistributionImpl51.isLoaded();
        int int53 = empiricalDistributionImpl51.getBinCount();
        boolean boolean54 = empiricalDistributionImpl51.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        double[] doubleArray59 = new double[] { 100.0d };
        empiricalDistributionImpl56.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        empiricalDistributionImpl1.load(doubleArray59);
        java.io.File file63 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        int int30 = empiricalDistributionImpl1.getBinCount();
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = statisticalSummary2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass12 = list11.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.4956247034888506d) + "'", double18 == (-1.4956247034888506d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray34.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        double[] doubleArray33 = new double[] { 100.0d };
        empiricalDistributionImpl30.load(doubleArray33);
        boolean boolean35 = empiricalDistributionImpl30.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        empiricalDistributionImpl30.load(doubleArray53);
        java.util.List list56 = empiricalDistributionImpl30.getBinStats();
        double[] doubleArray57 = empiricalDistributionImpl30.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.4757016378511647d + "'", double17 == 0.4757016378511647d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        int int19 = empiricalDistributionImpl1.getBinCount();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.9311109069161249d) + "'", double17 == (-0.9311109069161249d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.165459322049957d) + "'", double21 == (-1.165459322049957d));
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray27 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl22.load(doubleArray27);
        double[] doubleArray29 = empiricalDistributionImpl22.getUpperBounds();
        java.util.List list30 = empiricalDistributionImpl22.getBinStats();
        boolean boolean31 = empiricalDistributionImpl22.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl22.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl34.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        double[] doubleArray57 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl43.load(doubleArray57);
        empiricalDistributionImpl34.load(doubleArray57);
        double[] doubleArray60 = empiricalDistributionImpl34.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl62 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int65 = empiricalDistributionImpl64.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = empiricalDistributionImpl64.getSampleStats();
        double[] doubleArray70 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl64.load(doubleArray70);
        empiricalDistributionImpl62.load(doubleArray70);
        double double73 = empiricalDistributionImpl62.getNextValue();
        double[] doubleArray74 = empiricalDistributionImpl62.getUpperBounds();
        empiricalDistributionImpl34.load(doubleArray74);
        boolean boolean76 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray77 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl22.load(doubleArray77);
        empiricalDistributionImpl1.load(doubleArray77);
        java.lang.Class<?> wildcardClass80 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.21383988191344475d) + "'", double17 == (-0.21383988191344475d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNull(statisticalSummary66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        int int33 = empiricalDistributionImpl25.getBinCount();
        int int34 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray35 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray35);
        java.io.File file37 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        int int29 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL28 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL20 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        double double24 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.4770347602886011d) + "'", double18 == (-1.4770347602886011d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.435624302072747d + "'", double24 == 1.435624302072747d);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass11 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary25);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.1143351365681629d + "'", double17 == 1.1143351365681629d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.util.List list89 = empiricalDistributionImpl1.getBinStats();
        java.util.List list90 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.924774041515922d + "'", double84 == 0.924774041515922d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(list90);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass26 = list25.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.009256597401188038d + "'", double18 == 0.009256597401188038d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.1090853479224d + "'", double21 == 1.1090853479224d);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.27756108858439316d) + "'", double22 == (-0.27756108858439316d));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(statisticalSummary21);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass27 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        java.util.List list8 = empiricalDistributionImpl1.getBinStats();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.75d + "'", double25 == 0.75d);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        double[] doubleArray35 = empiricalDistributionImpl19.getUpperBounds();
        double double36 = empiricalDistributionImpl19.getNextValue();
        boolean boolean37 = empiricalDistributionImpl19.isLoaded();
        int int38 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl19.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl19.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        double[] doubleArray47 = new double[] { 100.0d };
        empiricalDistributionImpl44.load(doubleArray47);
        boolean boolean49 = empiricalDistributionImpl44.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray53 = empiricalDistributionImpl44.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray53);
        empiricalDistributionImpl19.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        java.net.URL uRL57 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.2795275064860685d + "'", double36 == 1.2795275064860685d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertNotNull(statisticalSummary52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl1.getSampleStats();
        int int55 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray56 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL57 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5667041129373054d + "'", double28 == 0.5667041129373054d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl43.getSampleStats();
        double[] doubleArray49 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl43.load(doubleArray49);
        empiricalDistributionImpl41.load(doubleArray49);
        double[] doubleArray55 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl41.load(doubleArray55);
        double[] doubleArray57 = empiricalDistributionImpl41.getUpperBounds();
        double double58 = empiricalDistributionImpl41.getNextValue();
        double[] doubleArray59 = empiricalDistributionImpl41.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray61 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray61);
        java.net.URL uRL63 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.6583793336433799d + "'", double58 == 0.6583793336433799d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        boolean boolean14 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass7 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass40 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.36698381542160846d + "'", double18 == 0.36698381542160846d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double double39 = empiricalDistributionImpl23.getNextValue();
        boolean boolean40 = empiricalDistributionImpl23.isLoaded();
        boolean boolean41 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean44 = empiricalDistributionImpl43.isLoaded();
        int int45 = empiricalDistributionImpl43.getBinCount();
        boolean boolean46 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        double[] doubleArray51 = new double[] { 100.0d };
        empiricalDistributionImpl48.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl23.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        boolean boolean56 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.38108367717719444d + "'", double17 == 0.38108367717719444d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.38108367717719444d + "'", double39 == 0.38108367717719444d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        double double28 = empiricalDistributionImpl1.getNextValue();
        java.util.List list29 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.3333333333333333d + "'", double28 == 0.3333333333333333d);
        org.junit.Assert.assertNotNull(list29);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list30 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(statisticalSummary31);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        java.util.List list6 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray13 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl8.load(doubleArray13);
        double[] doubleArray15 = empiricalDistributionImpl8.getUpperBounds();
        int int16 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray25 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl20.load(doubleArray25);
        double[] doubleArray27 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl18.load(doubleArray27);
        empiricalDistributionImpl8.load(doubleArray27);
        java.util.List list30 = empiricalDistributionImpl8.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl8.getSampleStats();
        double double32 = empiricalDistributionImpl8.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        double[] doubleArray39 = new double[] { 100.0d };
        empiricalDistributionImpl36.load(doubleArray39);
        boolean boolean41 = empiricalDistributionImpl36.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl47.getSampleStats();
        double[] doubleArray53 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl47.load(doubleArray53);
        empiricalDistributionImpl45.load(doubleArray53);
        double[] doubleArray59 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl45.load(doubleArray59);
        empiricalDistributionImpl36.load(doubleArray59);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        empiricalDistributionImpl36.load(doubleArray71);
        empiricalDistributionImpl34.load(doubleArray71);
        double[] doubleArray76 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl8.load(doubleArray76);
        empiricalDistributionImpl1.load(doubleArray76);
        java.net.URL uRL79 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(statisticalSummary31);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.75d + "'", double32 == 0.75d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(statisticalSummary43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double double36 = empiricalDistributionImpl25.getNextValue();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray38);
        java.util.List list40 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        boolean boolean53 = empiricalDistributionImpl42.isLoaded();
        boolean boolean54 = empiricalDistributionImpl42.isLoaded();
        double[] doubleArray55 = empiricalDistributionImpl42.getUpperBounds();
        double[] doubleArray56 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        java.io.File file59 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNull(statisticalSummary6);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(statisticalSummary15);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(list12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        double double23 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.460209255162279d + "'", double17 == 1.460209255162279d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.1211747786167283d + "'", double23 == 1.1211747786167283d);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double double21 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray26 = new double[] { 100.0d };
        empiricalDistributionImpl23.load(doubleArray26);
        boolean boolean28 = empiricalDistributionImpl23.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl23.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl23.load(doubleArray46);
        double[] doubleArray49 = empiricalDistributionImpl23.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double double62 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray63 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int71 = empiricalDistributionImpl70.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl70.getSampleStats();
        double[] doubleArray76 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl70.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl68.load(doubleArray82);
        double double84 = empiricalDistributionImpl68.getNextValue();
        boolean boolean85 = empiricalDistributionImpl68.isLoaded();
        boolean boolean86 = empiricalDistributionImpl68.isLoaded();
        double[] doubleArray87 = empiricalDistributionImpl68.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray87);
        java.util.List list89 = empiricalDistributionImpl1.getBinStats();
        java.io.File file90 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double62 + "' != '" + 32.0d + "'", double62 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.8172297691446675d + "'", double84 == 1.8172297691446675d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass41 = statisticalSummary40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double double24 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        double double37 = empiricalDistributionImpl26.getNextValue();
        double[] doubleArray38 = empiricalDistributionImpl26.getUpperBounds();
        double[] doubleArray39 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        boolean boolean47 = empiricalDistributionImpl42.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl51.load(doubleArray65);
        empiricalDistributionImpl42.load(doubleArray65);
        double[] doubleArray68 = empiricalDistributionImpl42.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int73 = empiricalDistributionImpl72.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl72.getSampleStats();
        double[] doubleArray78 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl72.load(doubleArray78);
        empiricalDistributionImpl70.load(doubleArray78);
        double double81 = empiricalDistributionImpl70.getNextValue();
        double[] doubleArray82 = empiricalDistributionImpl70.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray82);
        boolean boolean84 = empiricalDistributionImpl42.isLoaded();
        double[] doubleArray85 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray85);
        empiricalDistributionImpl1.load(doubleArray85);
        double[] doubleArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNull(statisticalSummary74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass29 = doubleArray28.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        boolean boolean49 = empiricalDistributionImpl1.isLoaded();
        double double50 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL52 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary51);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass26 = statisticalSummary25.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int31 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        double[] doubleArray36 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl30.load(doubleArray36);
        empiricalDistributionImpl28.load(doubleArray36);
        empiricalDistributionImpl1.load(doubleArray36);
        double double40 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(list18);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        double double18 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list17);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        double double22 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl1.getUpperBounds();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.7254554278045845d) + "'", double18 == (-0.7254554278045845d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(list21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.1711182236025253d + "'", double22 == 1.1711182236025253d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.util.List list26 = empiricalDistributionImpl1.getBinStats();
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double[] doubleArray43 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl29.load(doubleArray43);
        double double45 = empiricalDistributionImpl29.getNextValue();
        boolean boolean46 = empiricalDistributionImpl29.isLoaded();
        boolean boolean47 = empiricalDistributionImpl29.isLoaded();
        double[] doubleArray48 = empiricalDistributionImpl29.getUpperBounds();
        int int49 = empiricalDistributionImpl29.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl51.load(doubleArray65);
        double[] doubleArray67 = empiricalDistributionImpl51.getUpperBounds();
        double double68 = empiricalDistributionImpl51.getNextValue();
        double[] doubleArray69 = empiricalDistributionImpl51.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray69);
        empiricalDistributionImpl1.load(doubleArray69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0467246143228173d + "'", double18 == 1.0467246143228173d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0467246143228173d + "'", double45 == 1.0467246143228173d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0467246143228173d + "'", double68 == 1.0467246143228173d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6693179422209556d + "'", double18 == 0.6693179422209556d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass23 = list22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.368928445942133d) + "'", double17 == (-1.368928445942133d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int21 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl20.getSampleStats();
        double[] doubleArray26 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl20.load(doubleArray26);
        empiricalDistributionImpl18.load(doubleArray26);
        double double29 = empiricalDistributionImpl18.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int34 = empiricalDistributionImpl33.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl33.getSampleStats();
        double[] doubleArray39 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl33.load(doubleArray39);
        empiricalDistributionImpl31.load(doubleArray39);
        double double42 = empiricalDistributionImpl31.getNextValue();
        double[] doubleArray43 = empiricalDistributionImpl31.getUpperBounds();
        double[] doubleArray44 = empiricalDistributionImpl31.getUpperBounds();
        empiricalDistributionImpl18.load(doubleArray44);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray54 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl49.load(doubleArray54);
        double[] doubleArray56 = empiricalDistributionImpl49.getUpperBounds();
        empiricalDistributionImpl47.load(doubleArray56);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int60 = empiricalDistributionImpl59.getBinCount();
        double[] doubleArray62 = new double[] { 100.0d };
        empiricalDistributionImpl59.load(doubleArray62);
        empiricalDistributionImpl47.load(doubleArray62);
        empiricalDistributionImpl18.load(doubleArray62);
        int int66 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean69 = empiricalDistributionImpl68.isLoaded();
        int int70 = empiricalDistributionImpl68.getBinCount();
        boolean boolean71 = empiricalDistributionImpl68.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int74 = empiricalDistributionImpl73.getBinCount();
        double[] doubleArray76 = new double[] { 100.0d };
        empiricalDistributionImpl73.load(doubleArray76);
        empiricalDistributionImpl68.load(doubleArray76);
        empiricalDistributionImpl18.load(doubleArray76);
        empiricalDistributionImpl1.load(doubleArray76);
        boolean boolean81 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 32.0d + "'", double29 == 32.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        java.util.List list24 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray25 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        int int40 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl3.isLoaded();
        boolean boolean11 = empiricalDistributionImpl3.isLoaded();
        java.util.List list12 = empiricalDistributionImpl3.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray19 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl14.load(doubleArray19);
        double[] doubleArray21 = empiricalDistributionImpl14.getUpperBounds();
        int int22 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray23 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl3.load(doubleArray23);
        empiricalDistributionImpl1.load(doubleArray23);
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.75d + "'", double26 == 0.75d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.25d + "'", double27 == 0.25d);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        double[] doubleArray8 = new double[] { 100.0d };
        empiricalDistributionImpl5.load(doubleArray8);
        boolean boolean10 = empiricalDistributionImpl5.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl5.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl5.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double[] doubleArray28 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl14.load(doubleArray28);
        empiricalDistributionImpl5.load(doubleArray28);
        java.util.List list31 = empiricalDistributionImpl5.getBinStats();
        double[] doubleArray32 = empiricalDistributionImpl5.getUpperBounds();
        int int33 = empiricalDistributionImpl5.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl35.getSampleStats();
        int int52 = empiricalDistributionImpl35.getBinCount();
        double[] doubleArray53 = empiricalDistributionImpl35.getUpperBounds();
        empiricalDistributionImpl5.load(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.3784146915887305d) + "'", double17 == (-1.3784146915887305d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.1848242085516721d) };
        empiricalDistributionImpl1.load(doubleArray69);
        int int71 = empiricalDistributionImpl1.getBinCount();
        java.util.List list72 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl74 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray79 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl74.load(doubleArray79);
        double[] doubleArray81 = empiricalDistributionImpl74.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl83 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray88 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl83.load(doubleArray88);
        double[] doubleArray90 = empiricalDistributionImpl83.getUpperBounds();
        int int91 = empiricalDistributionImpl83.getBinCount();
        double[] doubleArray92 = empiricalDistributionImpl83.getUpperBounds();
        empiricalDistributionImpl74.load(doubleArray92);
        empiricalDistributionImpl1.load(doubleArray92);
        double double95 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.1848242085516721]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.75d + "'", double95 == 0.75d);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        int int14 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass16 = statisticalSummary15.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray12 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl7.load(doubleArray12);
        double double14 = empiricalDistributionImpl7.getNextValue();
        double double15 = empiricalDistributionImpl7.getNextValue();
        int int16 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray21 = new double[] { 100.0d };
        empiricalDistributionImpl18.load(doubleArray21);
        double double23 = empiricalDistributionImpl18.getNextValue();
        boolean boolean24 = empiricalDistributionImpl18.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl7.load(doubleArray25);
        empiricalDistributionImpl1.load(doubleArray25);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray28 = new double[] { 100.0d };
        empiricalDistributionImpl25.load(doubleArray28);
        boolean boolean30 = empiricalDistributionImpl25.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        empiricalDistributionImpl25.load(doubleArray48);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        empiricalDistributionImpl25.load(doubleArray60);
        empiricalDistributionImpl1.load(doubleArray60);
        double[] doubleArray69 = new double[] { 1L, (-1L), 100, (-0.1848242085516721d) };
        empiricalDistributionImpl1.load(doubleArray69);
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        boolean boolean72 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary73 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file74 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, -1.0, 100.0, -0.1848242085516721]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(statisticalSummary73);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        java.util.List list33 = empiricalDistributionImpl1.getBinStats();
        int int34 = empiricalDistributionImpl1.getBinCount();
        java.util.List list35 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL36 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0117658135360714d + "'", double17 == 1.0117658135360714d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(list35);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass3 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        int int43 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass44 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(statisticalSummary44);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file37 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        double[] doubleArray17 = new double[] { 100.0d };
        empiricalDistributionImpl14.load(doubleArray17);
        boolean boolean19 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl14.isLoaded();
        boolean boolean22 = empiricalDistributionImpl14.isLoaded();
        java.util.List list23 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        int int33 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray34 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray34);
        empiricalDistributionImpl12.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        boolean boolean27 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        double double29 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(statisticalSummary28);
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.6666666666666666d + "'", double29 == 0.6666666666666666d);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray15 = new double[] { 100.0d };
        empiricalDistributionImpl12.load(doubleArray15);
        double double17 = empiricalDistributionImpl12.getNextValue();
        boolean boolean18 = empiricalDistributionImpl12.isLoaded();
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) ' ');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int21 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl20.getSampleStats();
        double[] doubleArray26 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl20.load(doubleArray26);
        empiricalDistributionImpl18.load(doubleArray26);
        double[] doubleArray32 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl18.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl18.getUpperBounds();
        double double35 = empiricalDistributionImpl18.getNextValue();
        boolean boolean36 = empiricalDistributionImpl18.isLoaded();
        int int37 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray38 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray38);
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.26103792854359087d) + "'", double35 == (-0.26103792854359087d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        java.util.List list22 = empiricalDistributionImpl15.getBinStats();
        boolean boolean23 = empiricalDistributionImpl15.isLoaded();
        java.util.List list24 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray26 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray26);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl15.getSampleStats();
        boolean boolean24 = empiricalDistributionImpl15.isLoaded();
        int int25 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray27 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        java.net.URL uRL29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray23 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray23);
        boolean boolean25 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        boolean boolean20 = empiricalDistributionImpl1.isLoaded();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.1851170603731257d + "'", double17 == 0.1851170603731257d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9515188309961434d + "'", double18 == 0.9515188309961434d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        boolean boolean48 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL49 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        empiricalDistributionImpl1.load(doubleArray43);
        boolean boolean46 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        int int44 = empiricalDistributionImpl1.getBinCount();
        java.io.File file45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass12 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        double double44 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        int int5 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray16 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl11.load(doubleArray16);
        double[] doubleArray18 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        int int24 = empiricalDistributionImpl13.getBinCount();
        java.util.List list25 = empiricalDistributionImpl13.getBinStats();
        java.util.List list26 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean29 = empiricalDistributionImpl28.isLoaded();
        boolean boolean30 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl34.getSampleStats();
        double[] doubleArray40 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl34.load(doubleArray40);
        empiricalDistributionImpl32.load(doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl32.load(doubleArray46);
        empiricalDistributionImpl28.load(doubleArray46);
        empiricalDistributionImpl13.load(doubleArray46);
        java.util.List list50 = empiricalDistributionImpl13.getBinStats();
        double double51 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int56 = empiricalDistributionImpl55.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl55.getSampleStats();
        double[] doubleArray61 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl55.load(doubleArray61);
        empiricalDistributionImpl53.load(doubleArray61);
        double[] doubleArray67 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl53.load(doubleArray67);
        double[] doubleArray69 = empiricalDistributionImpl53.getUpperBounds();
        double double70 = empiricalDistributionImpl53.getNextValue();
        double[] doubleArray71 = empiricalDistributionImpl53.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray73 = empiricalDistributionImpl53.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl77 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int78 = empiricalDistributionImpl77.getBinCount();
        double[] doubleArray80 = new double[] { 100.0d };
        empiricalDistributionImpl77.load(doubleArray80);
        boolean boolean82 = empiricalDistributionImpl77.isLoaded();
        double[] doubleArray83 = empiricalDistributionImpl77.getUpperBounds();
        double double84 = empiricalDistributionImpl77.getNextValue();
        double[] doubleArray85 = empiricalDistributionImpl77.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray85);
        java.io.File file87 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list50);
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.7528194992998276d) + "'", double70 == (-0.7528194992998276d));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        int int28 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        boolean boolean38 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.22669683143958658d) + "'", double18 == (-0.22669683143958658d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass28 = statisticalSummary27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass23 = statisticalSummary22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.3738074459453d) + "'", double18 == (-0.3738074459453d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(statisticalSummary23);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int15 = empiricalDistributionImpl14.getBinCount();
        int int16 = empiricalDistributionImpl14.getBinCount();
        java.util.List list17 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        double[] doubleArray35 = empiricalDistributionImpl19.getUpperBounds();
        double double36 = empiricalDistributionImpl19.getNextValue();
        boolean boolean37 = empiricalDistributionImpl19.isLoaded();
        double[] doubleArray38 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray38);
        double double40 = empiricalDistributionImpl14.getNextValue();
        boolean boolean41 = empiricalDistributionImpl14.isLoaded();
        double double42 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray43 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray43);
        double double45 = empiricalDistributionImpl1.getNextValue();
        double double46 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.36997478528758626d) + "'", double36 == (-0.36997478528758626d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl1.getSampleStats();
        int int28 = empiricalDistributionImpl1.getBinCount();
        java.io.File file29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl1.getSampleStats();
        int int6 = empiricalDistributionImpl1.getBinCount();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        int int23 = empiricalDistributionImpl1.getBinCount();
        int int24 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-2.447660127016104d) + "'", double17 == (-2.447660127016104d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.07134423109251882d) + "'", double20 == (-0.07134423109251882d));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        double double38 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(statisticalSummary39);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        double double20 = empiricalDistributionImpl1.getNextValue();
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass23 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass41 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.3542059570966342d + "'", double18 == 0.3542059570966342d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        java.util.List list18 = empiricalDistributionImpl10.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double double31 = empiricalDistributionImpl20.getNextValue();
        double[] doubleArray32 = empiricalDistributionImpl20.getUpperBounds();
        double[] doubleArray33 = empiricalDistributionImpl20.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray33);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl10.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        empiricalDistributionImpl10.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        java.lang.Class<?> wildcardClass50 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        double double6 = empiricalDistributionImpl1.getNextValue();
        boolean boolean7 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        empiricalDistributionImpl1.load(doubleArray19);
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        int int33 = empiricalDistributionImpl25.getBinCount();
        int int34 = empiricalDistributionImpl25.getBinCount();
        double[] doubleArray35 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray35);
        java.lang.Class<?> wildcardClass37 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int42 = empiricalDistributionImpl41.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl41.getSampleStats();
        double[] doubleArray47 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl41.load(doubleArray47);
        empiricalDistributionImpl39.load(doubleArray47);
        double[] doubleArray53 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl39.load(doubleArray53);
        double double55 = empiricalDistributionImpl39.getNextValue();
        boolean boolean56 = empiricalDistributionImpl39.isLoaded();
        boolean boolean57 = empiricalDistributionImpl39.isLoaded();
        double[] doubleArray58 = empiricalDistributionImpl39.getUpperBounds();
        java.util.List list59 = empiricalDistributionImpl39.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int64 = empiricalDistributionImpl63.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl63.getSampleStats();
        double[] doubleArray69 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl63.load(doubleArray69);
        empiricalDistributionImpl61.load(doubleArray69);
        boolean boolean72 = empiricalDistributionImpl61.isLoaded();
        boolean boolean73 = empiricalDistributionImpl61.isLoaded();
        double[] doubleArray74 = empiricalDistributionImpl61.getUpperBounds();
        empiricalDistributionImpl39.load(doubleArray74);
        empiricalDistributionImpl1.load(doubleArray74);
        int int77 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray78 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.22938231351597319d) + "'", double55 == (-0.22938231351597319d));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNull(statisticalSummary65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        double double27 = empiricalDistributionImpl1.getNextValue();
        java.util.List list28 = empiricalDistributionImpl1.getBinStats();
        int int29 = empiricalDistributionImpl1.getBinCount();
        java.util.List list30 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.07535074356851605d) + "'", double23 == (-0.07535074356851605d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass45 = statisticalSummary44.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        int int21 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray30 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl25.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl23.load(doubleArray32);
        empiricalDistributionImpl13.load(doubleArray32);
        java.util.List list35 = empiricalDistributionImpl13.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        double[] doubleArray38 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.6571428571428571, 0.9714285714285714, 1.0]");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        int int5 = empiricalDistributionImpl1.getBinCount();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        int int20 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray21 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl10.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray23);
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        boolean boolean18 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double[] doubleArray36 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl22.load(doubleArray36);
        empiricalDistributionImpl13.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl42.getSampleStats();
        double[] doubleArray48 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl42.load(doubleArray48);
        empiricalDistributionImpl40.load(doubleArray48);
        empiricalDistributionImpl13.load(doubleArray48);
        empiricalDistributionImpl11.load(doubleArray48);
        double[] doubleArray53 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.07931173359876469d + "'", double17 == 0.07931173359876469d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(statisticalSummary20);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray28 = empiricalDistributionImpl1.getUpperBounds();
        int int29 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int34 = empiricalDistributionImpl33.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl33.getSampleStats();
        double[] doubleArray39 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl33.load(doubleArray39);
        empiricalDistributionImpl31.load(doubleArray39);
        double[] doubleArray45 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl31.load(doubleArray45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl31.getSampleStats();
        int int48 = empiricalDistributionImpl31.getBinCount();
        double[] doubleArray49 = empiricalDistributionImpl31.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray49);
        java.lang.Class<?> wildcardClass51 = doubleArray49.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNull(statisticalSummary35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(list13);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        java.lang.Class<?> wildcardClass29 = doubleArray27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int24 = empiricalDistributionImpl23.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl23.getSampleStats();
        double[] doubleArray29 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl23.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        int int32 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray33 = empiricalDistributionImpl21.getUpperBounds();
        double[] doubleArray34 = empiricalDistributionImpl21.getUpperBounds();
        java.util.List list35 = empiricalDistributionImpl21.getBinStats();
        double[] doubleArray36 = empiricalDistributionImpl21.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double double18 = empiricalDistributionImpl7.getNextValue();
        java.util.List list19 = empiricalDistributionImpl7.getBinStats();
        double double20 = empiricalDistributionImpl7.getNextValue();
        int int21 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double double34 = empiricalDistributionImpl23.getNextValue();
        java.util.List list35 = empiricalDistributionImpl23.getBinStats();
        double double36 = empiricalDistributionImpl23.getNextValue();
        int int37 = empiricalDistributionImpl23.getBinCount();
        double[] doubleArray38 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl7.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        java.util.List list41 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(list19);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(list35);
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 32.0d + "'", double36 == 32.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(list41);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0303437683399599d + "'", double18 == 1.0303437683399599d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int15 = empiricalDistributionImpl14.getBinCount();
        int int16 = empiricalDistributionImpl14.getBinCount();
        java.util.List list17 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        double[] doubleArray35 = empiricalDistributionImpl19.getUpperBounds();
        double double36 = empiricalDistributionImpl19.getNextValue();
        boolean boolean37 = empiricalDistributionImpl19.isLoaded();
        double[] doubleArray38 = empiricalDistributionImpl19.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray38);
        double double40 = empiricalDistributionImpl14.getNextValue();
        boolean boolean41 = empiricalDistributionImpl14.isLoaded();
        double double42 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray43 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray43);
        double double45 = empiricalDistributionImpl1.getNextValue();
        java.io.File file46 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.3003501173403842d + "'", double36 == 0.3003501173403842d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int10 = empiricalDistributionImpl9.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl9.getSampleStats();
        double[] doubleArray15 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl9.load(doubleArray15);
        empiricalDistributionImpl7.load(doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl7.load(doubleArray21);
        empiricalDistributionImpl1.load(doubleArray21);
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass13 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(1);
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl28.load(doubleArray64);
        empiricalDistributionImpl14.load(doubleArray64);
        int int69 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl71 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl73 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int74 = empiricalDistributionImpl73.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary75 = empiricalDistributionImpl73.getSampleStats();
        double[] doubleArray79 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl73.load(doubleArray79);
        empiricalDistributionImpl71.load(doubleArray79);
        double double82 = empiricalDistributionImpl71.getNextValue();
        double[] doubleArray83 = empiricalDistributionImpl71.getUpperBounds();
        empiricalDistributionImpl14.load(doubleArray83);
        empiricalDistributionImpl1.load(doubleArray83);
        boolean boolean86 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass87 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNull(statisticalSummary75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean16 = empiricalDistributionImpl15.isLoaded();
        boolean boolean17 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl21.getSampleStats();
        double[] doubleArray27 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl21.load(doubleArray27);
        empiricalDistributionImpl19.load(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl19.load(doubleArray33);
        empiricalDistributionImpl15.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        boolean boolean38 = empiricalDistributionImpl1.isLoaded();
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.lang.Class<?> wildcardClass25 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list15 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass16 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.75d + "'", double12 == 0.75d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL48 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean30 = empiricalDistributionImpl29.isLoaded();
        int int31 = empiricalDistributionImpl29.getBinCount();
        boolean boolean32 = empiricalDistributionImpl29.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int37 = empiricalDistributionImpl36.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        double[] doubleArray42 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl36.load(doubleArray42);
        empiricalDistributionImpl34.load(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl34.load(doubleArray48);
        double[] doubleArray50 = empiricalDistributionImpl34.getUpperBounds();
        double double51 = empiricalDistributionImpl34.getNextValue();
        boolean boolean52 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray53 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl29.load(doubleArray53);
        empiricalDistributionImpl14.load(doubleArray53);
        empiricalDistributionImpl1.load(doubleArray53);
        double[] doubleArray57 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int62 = empiricalDistributionImpl61.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary63 = empiricalDistributionImpl61.getSampleStats();
        double[] doubleArray67 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl61.load(doubleArray67);
        empiricalDistributionImpl59.load(doubleArray67);
        double[] doubleArray73 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl59.load(doubleArray73);
        double[] doubleArray75 = empiricalDistributionImpl59.getUpperBounds();
        double double76 = empiricalDistributionImpl59.getNextValue();
        boolean boolean77 = empiricalDistributionImpl59.isLoaded();
        int int78 = empiricalDistributionImpl59.getBinCount();
        java.util.List list79 = empiricalDistributionImpl59.getBinStats();
        double[] doubleArray80 = empiricalDistributionImpl59.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0961669307536612d) + "'", double51 == (-1.0961669307536612d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNull(statisticalSummary63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0961669307536612d) + "'", double76 == (-1.0961669307536612d));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        double double40 = empiricalDistributionImpl23.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        double[] doubleArray48 = new double[] { 100.0d };
        empiricalDistributionImpl45.load(doubleArray48);
        boolean boolean50 = empiricalDistributionImpl45.isLoaded();
        double[] doubleArray51 = empiricalDistributionImpl45.getUpperBounds();
        double double52 = empiricalDistributionImpl45.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl45.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray53);
        boolean boolean55 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8087653099315482d + "'", double17 == 0.8087653099315482d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.8087653099315482d + "'", double40 == 0.8087653099315482d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        boolean boolean29 = empiricalDistributionImpl1.isLoaded();
        boolean boolean30 = empiricalDistributionImpl1.isLoaded();
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        java.util.List list47 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 32.0d + "'", double40 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.6666666666666666d + "'", double43 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.6666666666666666d + "'", double45 == 0.6666666666666666d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        empiricalDistributionImpl1.load(doubleArray43);
        int int46 = empiricalDistributionImpl1.getBinCount();
        double double47 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray15 = new double[] { 100.0d };
        empiricalDistributionImpl12.load(doubleArray15);
        double double17 = empiricalDistributionImpl12.getNextValue();
        boolean boolean18 = empiricalDistributionImpl12.isLoaded();
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        int int22 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.5027219189164014d) + "'", double17 == (-0.5027219189164014d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass20 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        int int27 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass24 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.335050316582595d + "'", double18 == 0.335050316582595d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl30.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        empiricalDistributionImpl30.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        int int49 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean52 = empiricalDistributionImpl51.isLoaded();
        int int53 = empiricalDistributionImpl51.getBinCount();
        boolean boolean54 = empiricalDistributionImpl51.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int57 = empiricalDistributionImpl56.getBinCount();
        double[] doubleArray59 = new double[] { 100.0d };
        empiricalDistributionImpl56.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        empiricalDistributionImpl1.load(doubleArray59);
        java.util.List list63 = empiricalDistributionImpl1.getBinStats();
        java.io.File file64 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
        org.junit.Assert.assertNotNull(list63);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        boolean boolean18 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int25 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl24.getSampleStats();
        double[] doubleArray30 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl24.load(doubleArray30);
        empiricalDistributionImpl22.load(doubleArray30);
        double[] doubleArray36 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl22.load(doubleArray36);
        empiricalDistributionImpl13.load(doubleArray36);
        double[] doubleArray39 = empiricalDistributionImpl13.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl43.getSampleStats();
        double[] doubleArray49 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl43.load(doubleArray49);
        empiricalDistributionImpl41.load(doubleArray49);
        double double52 = empiricalDistributionImpl41.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray53);
        boolean boolean55 = empiricalDistributionImpl13.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray56);
        java.util.List list58 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray59 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 1.0]");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        double double40 = empiricalDistributionImpl23.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.6037104698968209d + "'", double17 == 0.6037104698968209d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.6037104698968209d + "'", double40 == 0.6037104698968209d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        boolean boolean43 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        int int5 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray12 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl7.load(doubleArray12);
        double[] doubleArray14 = empiricalDistributionImpl7.getUpperBounds();
        boolean boolean15 = empiricalDistributionImpl7.isLoaded();
        double double16 = empiricalDistributionImpl7.getNextValue();
        int int17 = empiricalDistributionImpl7.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int22 = empiricalDistributionImpl21.getBinCount();
        double[] doubleArray24 = new double[] { 100.0d };
        empiricalDistributionImpl21.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl21.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl21.isLoaded();
        boolean boolean29 = empiricalDistributionImpl21.isLoaded();
        java.util.List list30 = empiricalDistributionImpl21.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        int int40 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl32.getUpperBounds();
        empiricalDistributionImpl21.load(doubleArray41);
        empiricalDistributionImpl19.load(doubleArray41);
        empiricalDistributionImpl7.load(doubleArray41);
        empiricalDistributionImpl1.load(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        double double8 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray17 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl12.load(doubleArray17);
        empiricalDistributionImpl1.load(doubleArray17);
        java.lang.Class<?> wildcardClass20 = doubleArray17.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray46 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int49 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray54 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl48.load(doubleArray54);
        int int56 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl48.getSampleStats();
        double[] doubleArray58 = empiricalDistributionImpl48.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray58);
        java.io.File file60 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double double13 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.25d + "'", double13 == 0.25d);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        int int43 = empiricalDistributionImpl1.getBinCount();
        boolean boolean44 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        empiricalDistributionImpl46.load(doubleArray63);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl68 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray75 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl70.load(doubleArray75);
        double[] doubleArray77 = empiricalDistributionImpl70.getUpperBounds();
        empiricalDistributionImpl68.load(doubleArray77);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl80 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int81 = empiricalDistributionImpl80.getBinCount();
        double[] doubleArray83 = new double[] { 100.0d };
        empiricalDistributionImpl80.load(doubleArray83);
        empiricalDistributionImpl68.load(doubleArray83);
        empiricalDistributionImpl46.load(doubleArray83);
        empiricalDistributionImpl1.load(doubleArray83);
        int int88 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        empiricalDistributionImpl46.load(doubleArray63);
        double double67 = empiricalDistributionImpl46.getNextValue();
        double double68 = empiricalDistributionImpl46.getNextValue();
        int int69 = empiricalDistributionImpl46.getBinCount();
        double[] doubleArray75 = new double[] { (-0.1202719741743952d), (-0.19883816559328116d), (-1.393120583045343d), (-0.24273240607488178d), 0L };
        empiricalDistributionImpl46.load(doubleArray75);
        empiricalDistributionImpl1.load(doubleArray75);
        double[] doubleArray78 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double68 + "' != '" + 32.0d + "'", double68 == 32.0d);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.1202719741743952, -0.19883816559328116, -1.393120583045343, -0.24273240607488178, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.4, 0.6000000000000001, 0.8, 0.8, 0.8, 1.0]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        boolean boolean34 = empiricalDistributionImpl23.isLoaded();
        boolean boolean35 = empiricalDistributionImpl23.isLoaded();
        double[] doubleArray36 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray36);
        double double38 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray39 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.5486905169045126d) + "'", double17 == (-0.5486905169045126d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        int int23 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int9 = empiricalDistributionImpl8.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl8.getSampleStats();
        double[] doubleArray14 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl8.load(doubleArray14);
        empiricalDistributionImpl6.load(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl6.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl6.getUpperBounds();
        double double23 = empiricalDistributionImpl6.getNextValue();
        boolean boolean24 = empiricalDistributionImpl6.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl6.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.8745010141878963d + "'", double23 == 0.8745010141878963d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double double24 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        double double37 = empiricalDistributionImpl26.getNextValue();
        double[] doubleArray38 = empiricalDistributionImpl26.getUpperBounds();
        double[] doubleArray39 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray39);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int43 = empiricalDistributionImpl42.getBinCount();
        double[] doubleArray45 = new double[] { 100.0d };
        empiricalDistributionImpl42.load(doubleArray45);
        boolean boolean47 = empiricalDistributionImpl42.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl42.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int54 = empiricalDistributionImpl53.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl53.getSampleStats();
        double[] doubleArray59 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl53.load(doubleArray59);
        empiricalDistributionImpl51.load(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl51.load(doubleArray65);
        empiricalDistributionImpl42.load(doubleArray65);
        double[] doubleArray68 = empiricalDistributionImpl42.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int73 = empiricalDistributionImpl72.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl72.getSampleStats();
        double[] doubleArray78 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl72.load(doubleArray78);
        empiricalDistributionImpl70.load(doubleArray78);
        double double81 = empiricalDistributionImpl70.getNextValue();
        double[] doubleArray82 = empiricalDistributionImpl70.getUpperBounds();
        empiricalDistributionImpl42.load(doubleArray82);
        boolean boolean84 = empiricalDistributionImpl42.isLoaded();
        double[] doubleArray85 = empiricalDistributionImpl42.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray85);
        empiricalDistributionImpl1.load(doubleArray85);
        java.io.File file88 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 32.0d + "'", double24 == 32.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNull(statisticalSummary74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        double double25 = empiricalDistributionImpl14.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl14.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl14.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl1.getSampleStats();
        double double30 = empiricalDistributionImpl1.getNextValue();
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(statisticalSummary29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6666666666666666d + "'", double30 == 0.6666666666666666d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray31 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl26.load(doubleArray31);
        double[] doubleArray33 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray33);
        empiricalDistributionImpl1.load(doubleArray33);
        double[] doubleArray36 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertNotNull(statisticalSummary38);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        boolean boolean24 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9286391662476445d + "'", double18 == 0.9286391662476445d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(statisticalSummary25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.6648235353475954d + "'", double26 == 0.6648235353475954d);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        double[] doubleArray16 = new double[] { 100.0d };
        empiricalDistributionImpl13.load(doubleArray16);
        empiricalDistributionImpl1.load(doubleArray16);
        java.util.List list19 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double double21 = empiricalDistributionImpl1.getNextValue();
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean21 = empiricalDistributionImpl20.isLoaded();
        boolean boolean22 = empiricalDistributionImpl20.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl20.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        int int42 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.38951277943650137d) + "'", double17 == (-0.38951277943650137d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl1.getSampleStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        double double10 = empiricalDistributionImpl1.getNextValue();
        int int11 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        int int27 = empiricalDistributionImpl1.getBinCount();
        boolean boolean28 = empiricalDistributionImpl1.isLoaded();
        int int29 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6511675878688431d + "'", double18 == 0.6511675878688431d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary22);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        double double12 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        double double27 = empiricalDistributionImpl1.getNextValue();
        int int28 = empiricalDistributionImpl1.getBinCount();
        java.net.URL uRL29 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        boolean boolean17 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray24 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl19.load(doubleArray24);
        double[] doubleArray26 = empiricalDistributionImpl19.getUpperBounds();
        int int27 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray28 = empiricalDistributionImpl19.getUpperBounds();
        int int29 = empiricalDistributionImpl19.getBinCount();
        java.util.List list30 = empiricalDistributionImpl19.getBinStats();
        int int31 = empiricalDistributionImpl19.getBinCount();
        double double32 = empiricalDistributionImpl19.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int35 = empiricalDistributionImpl34.getBinCount();
        double[] doubleArray37 = new double[] { 100.0d };
        empiricalDistributionImpl34.load(doubleArray37);
        boolean boolean39 = empiricalDistributionImpl34.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl34.getSampleStats();
        boolean boolean41 = empiricalDistributionImpl34.isLoaded();
        boolean boolean42 = empiricalDistributionImpl34.isLoaded();
        double[] doubleArray43 = empiricalDistributionImpl34.getUpperBounds();
        empiricalDistributionImpl19.load(doubleArray43);
        empiricalDistributionImpl1.load(doubleArray43);
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double double36 = empiricalDistributionImpl25.getNextValue();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        empiricalDistributionImpl15.load(doubleArray50);
        empiricalDistributionImpl1.load(doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass56 = statisticalSummary55.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double double8 = empiricalDistributionImpl1.getNextValue();
        double double9 = empiricalDistributionImpl1.getNextValue();
        int int10 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        double[] doubleArray15 = new double[] { 100.0d };
        empiricalDistributionImpl12.load(doubleArray15);
        double double17 = empiricalDistributionImpl12.getNextValue();
        boolean boolean18 = empiricalDistributionImpl12.isLoaded();
        double[] doubleArray19 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        double double21 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray22 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean23 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass18 = list17.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        double double18 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.2408033340992058d) + "'", double18 == (-0.2408033340992058d));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        int int26 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        java.util.List list54 = empiricalDistributionImpl28.getBinStats();
        double[] doubleArray55 = empiricalDistributionImpl28.getUpperBounds();
        int int56 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int61 = empiricalDistributionImpl60.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl60.getSampleStats();
        double[] doubleArray66 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl60.load(doubleArray66);
        empiricalDistributionImpl58.load(doubleArray66);
        double[] doubleArray72 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl58.load(doubleArray72);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl58.getSampleStats();
        int int75 = empiricalDistributionImpl58.getBinCount();
        double[] doubleArray76 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl28.load(doubleArray76);
        empiricalDistributionImpl1.load(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean13 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double double24 = empiricalDistributionImpl13.getNextValue();
        java.util.List list25 = empiricalDistributionImpl13.getBinStats();
        double double26 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        double[] doubleArray31 = new double[] { 100.0d };
        empiricalDistributionImpl28.load(doubleArray31);
        boolean boolean33 = empiricalDistributionImpl28.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl39.getSampleStats();
        double[] doubleArray45 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl39.load(doubleArray45);
        empiricalDistributionImpl37.load(doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl37.load(doubleArray51);
        empiricalDistributionImpl28.load(doubleArray51);
        double[] doubleArray54 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int59 = empiricalDistributionImpl58.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl58.getSampleStats();
        double[] doubleArray64 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl58.load(doubleArray64);
        empiricalDistributionImpl56.load(doubleArray64);
        empiricalDistributionImpl28.load(doubleArray64);
        int int68 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray70 = empiricalDistributionImpl28.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary71 = empiricalDistributionImpl28.getSampleStats();
        double double72 = empiricalDistributionImpl28.getNextValue();
        double[] doubleArray73 = empiricalDistributionImpl28.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray73);
        empiricalDistributionImpl1.load(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray73.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary71);
// flaky:         org.junit.Assert.assertTrue("'" + double72 + "' != '" + 32.0d + "'", double72 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray18 = new double[] { 100.0d };
        empiricalDistributionImpl15.load(doubleArray18);
        boolean boolean20 = empiricalDistributionImpl15.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray32 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl26.load(doubleArray32);
        empiricalDistributionImpl24.load(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl24.load(doubleArray38);
        empiricalDistributionImpl15.load(doubleArray38);
        double[] doubleArray41 = empiricalDistributionImpl15.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl45.getSampleStats();
        double[] doubleArray51 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl45.load(doubleArray51);
        empiricalDistributionImpl43.load(doubleArray51);
        empiricalDistributionImpl15.load(doubleArray51);
        empiricalDistributionImpl1.load(doubleArray51);
        boolean boolean56 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(statisticalSummary57);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass23 = statisticalSummary22.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.1138269932913456d + "'", double18 == 1.1138269932913456d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray7 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl1.load(doubleArray7);
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass11 = statisticalSummary10.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(statisticalSummary43);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        double double40 = empiricalDistributionImpl23.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.30756353608383047d) + "'", double17 == (-0.30756353608383047d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.30756353608383047d) + "'", double40 == (-0.30756353608383047d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl1.getSampleStats();
        int int14 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray15 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray9 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        int int8 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double double10 = empiricalDistributionImpl1.getNextValue();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray10 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl5.load(doubleArray10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl13.load(doubleArray27);
        double[] doubleArray29 = empiricalDistributionImpl13.getUpperBounds();
        double double30 = empiricalDistributionImpl13.getNextValue();
        boolean boolean31 = empiricalDistributionImpl13.isLoaded();
        double[] doubleArray32 = empiricalDistributionImpl13.getUpperBounds();
        double double33 = empiricalDistributionImpl13.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int36 = empiricalDistributionImpl35.getBinCount();
        double[] doubleArray38 = new double[] { 100.0d };
        empiricalDistributionImpl35.load(doubleArray38);
        boolean boolean40 = empiricalDistributionImpl35.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = empiricalDistributionImpl35.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl35.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int47 = empiricalDistributionImpl46.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl46.getSampleStats();
        double[] doubleArray52 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl46.load(doubleArray52);
        empiricalDistributionImpl44.load(doubleArray52);
        double[] doubleArray58 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl44.load(doubleArray58);
        empiricalDistributionImpl35.load(doubleArray58);
        double[] doubleArray61 = empiricalDistributionImpl35.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int66 = empiricalDistributionImpl65.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary67 = empiricalDistributionImpl65.getSampleStats();
        double[] doubleArray71 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl65.load(doubleArray71);
        empiricalDistributionImpl63.load(doubleArray71);
        double double74 = empiricalDistributionImpl63.getNextValue();
        double[] doubleArray75 = empiricalDistributionImpl63.getUpperBounds();
        empiricalDistributionImpl35.load(doubleArray75);
        boolean boolean77 = empiricalDistributionImpl35.isLoaded();
        double[] doubleArray78 = empiricalDistributionImpl35.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray78);
        empiricalDistributionImpl5.load(doubleArray78);
        empiricalDistributionImpl1.load(doubleArray78);
        java.io.File file82 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.40068188148633954d + "'", double30 == 0.40068188148633954d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.10589044509951033d) + "'", double33 == (-0.10589044509951033d));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(statisticalSummary41);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNull(statisticalSummary67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        empiricalDistributionImpl21.load(doubleArray29);
        empiricalDistributionImpl1.load(doubleArray29);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.23867825382142785d + "'", double17 == 0.23867825382142785d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertNotNull(statisticalSummary33);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        java.util.List list22 = empiricalDistributionImpl1.getBinStats();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.5611205444482879d + "'", double17 == 1.5611205444482879d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list5 = empiricalDistributionImpl1.getBinStats();
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        java.util.List list7 = empiricalDistributionImpl1.getBinStats();
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL40 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl1.getSampleStats();
        java.lang.Class<?> wildcardClass26 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass14 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        boolean boolean12 = empiricalDistributionImpl1.isLoaded();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean17 = empiricalDistributionImpl16.isLoaded();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int23 = empiricalDistributionImpl22.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl22.getSampleStats();
        double[] doubleArray28 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl22.load(doubleArray28);
        empiricalDistributionImpl20.load(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl20.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        empiricalDistributionImpl1.load(doubleArray34);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        double double39 = empiricalDistributionImpl1.getNextValue();
        java.io.File file40 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
// flaky:         org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl1.getSampleStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list20 = empiricalDistributionImpl1.getBinStats();
        java.util.List list21 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary19);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(list21);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray10);
        double double12 = empiricalDistributionImpl1.getNextValue();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        empiricalDistributionImpl16.load(doubleArray33);
        double double37 = empiricalDistributionImpl16.getNextValue();
        java.util.List list38 = empiricalDistributionImpl16.getBinStats();
        java.util.List list39 = empiricalDistributionImpl16.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl41 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int44 = empiricalDistributionImpl43.getBinCount();
        double[] doubleArray46 = new double[] { 100.0d };
        empiricalDistributionImpl43.load(doubleArray46);
        boolean boolean48 = empiricalDistributionImpl43.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl43.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl43.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int55 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl54.getSampleStats();
        double[] doubleArray60 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl54.load(doubleArray60);
        empiricalDistributionImpl52.load(doubleArray60);
        double[] doubleArray66 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl52.load(doubleArray66);
        empiricalDistributionImpl43.load(doubleArray66);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl70 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl72 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int73 = empiricalDistributionImpl72.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = empiricalDistributionImpl72.getSampleStats();
        double[] doubleArray78 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl72.load(doubleArray78);
        empiricalDistributionImpl70.load(doubleArray78);
        empiricalDistributionImpl43.load(doubleArray78);
        empiricalDistributionImpl41.load(doubleArray78);
        double[] doubleArray83 = empiricalDistributionImpl41.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray83);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl86 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int87 = empiricalDistributionImpl86.getBinCount();
        double[] doubleArray89 = new double[] { 100.0d };
        empiricalDistributionImpl86.load(doubleArray89);
        boolean boolean91 = empiricalDistributionImpl86.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary92 = empiricalDistributionImpl86.getSampleStats();
        double[] doubleArray93 = empiricalDistributionImpl86.getUpperBounds();
        empiricalDistributionImpl16.load(doubleArray93);
        empiricalDistributionImpl1.load(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.25d + "'", double12 == 0.25d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 32.0d + "'", double37 == 32.0d);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(statisticalSummary49);
        org.junit.Assert.assertNotNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNull(statisticalSummary74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(statisticalSummary92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl55 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int58 = empiricalDistributionImpl57.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = empiricalDistributionImpl57.getSampleStats();
        double[] doubleArray63 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl57.load(doubleArray63);
        empiricalDistributionImpl55.load(doubleArray63);
        empiricalDistributionImpl46.load(doubleArray63);
        double double67 = empiricalDistributionImpl46.getNextValue();
        double double68 = empiricalDistributionImpl46.getNextValue();
        int int69 = empiricalDistributionImpl46.getBinCount();
        double[] doubleArray75 = new double[] { (-0.1202719741743952d), (-0.19883816559328116d), (-1.393120583045343d), (-0.24273240607488178d), 0L };
        empiricalDistributionImpl46.load(doubleArray75);
        empiricalDistributionImpl1.load(doubleArray75);
        java.net.URL uRL78 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNull(statisticalSummary59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double68 + "' != '" + 32.0d + "'", double68 == 32.0d);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.1202719741743952, -0.19883816559328116, -1.393120583045343, -0.24273240607488178, 0.0]");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        double double28 = empiricalDistributionImpl12.getNextValue();
        int int29 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean32 = empiricalDistributionImpl31.isLoaded();
        boolean boolean33 = empiricalDistributionImpl31.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int38 = empiricalDistributionImpl37.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl37.getSampleStats();
        double[] doubleArray43 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl37.load(doubleArray43);
        empiricalDistributionImpl35.load(doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl35.load(doubleArray49);
        empiricalDistributionImpl31.load(doubleArray49);
        empiricalDistributionImpl12.load(doubleArray49);
        empiricalDistributionImpl1.load(doubleArray49);
        java.lang.Class<?> wildcardClass54 = doubleArray49.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.8602337009339149d) + "'", double28 == (-0.8602337009339149d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.util.List list4 = empiricalDistributionImpl1.getBinStats();
        java.lang.Class<?> wildcardClass5 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        int int24 = empiricalDistributionImpl1.getBinCount();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = empiricalDistributionImpl1.getSampleStats();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary43);
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray22 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl16.load(doubleArray22);
        empiricalDistributionImpl14.load(doubleArray22);
        int int25 = empiricalDistributionImpl14.getBinCount();
        java.util.List list26 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl14.isLoaded();
        int int29 = empiricalDistributionImpl14.getBinCount();
        boolean boolean30 = empiricalDistributionImpl14.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray37 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl32.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl32.getUpperBounds();
        int int40 = empiricalDistributionImpl32.getBinCount();
        double[] doubleArray41 = empiricalDistributionImpl32.getUpperBounds();
        int int42 = empiricalDistributionImpl32.getBinCount();
        java.util.List list43 = empiricalDistributionImpl32.getBinStats();
        int int44 = empiricalDistributionImpl32.getBinCount();
        double double45 = empiricalDistributionImpl32.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int48 = empiricalDistributionImpl47.getBinCount();
        double[] doubleArray50 = new double[] { 100.0d };
        empiricalDistributionImpl47.load(doubleArray50);
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean54 = empiricalDistributionImpl47.isLoaded();
        boolean boolean55 = empiricalDistributionImpl47.isLoaded();
        double[] doubleArray56 = empiricalDistributionImpl47.getUpperBounds();
        empiricalDistributionImpl32.load(doubleArray56);
        empiricalDistributionImpl14.load(doubleArray56);
        empiricalDistributionImpl1.load(doubleArray56);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary60);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double double16 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray21 = new double[] { 100.0d };
        empiricalDistributionImpl18.load(doubleArray21);
        boolean boolean23 = empiricalDistributionImpl18.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl18.getSampleStats();
        boolean boolean25 = empiricalDistributionImpl18.isLoaded();
        boolean boolean26 = empiricalDistributionImpl18.isLoaded();
        double[] doubleArray27 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray27);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        int int16 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int21 = empiricalDistributionImpl20.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl20.getSampleStats();
        double[] doubleArray26 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl20.load(doubleArray26);
        empiricalDistributionImpl18.load(doubleArray26);
        double[] doubleArray32 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl18.load(doubleArray32);
        double[] doubleArray34 = empiricalDistributionImpl18.getUpperBounds();
        double double35 = empiricalDistributionImpl18.getNextValue();
        boolean boolean36 = empiricalDistributionImpl18.isLoaded();
        int int37 = empiricalDistributionImpl18.getBinCount();
        double[] doubleArray38 = empiricalDistributionImpl18.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray38);
        int int40 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0479094145061076d) + "'", double35 == (-1.0479094145061076d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        boolean boolean47 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass48 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray21 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl16.load(doubleArray21);
        double[] doubleArray23 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list24 = empiricalDistributionImpl16.getBinStats();
        boolean boolean25 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        boolean boolean27 = empiricalDistributionImpl16.isLoaded();
        boolean boolean28 = empiricalDistributionImpl16.isLoaded();
        int int29 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl16.getSampleStats();
        double[] doubleArray31 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray31);
        double double33 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.75d + "'", double33 == 0.75d);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(statisticalSummary15);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray18 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl13.load(doubleArray18);
        double[] doubleArray20 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl11.load(doubleArray20);
        empiricalDistributionImpl1.load(doubleArray20);
        java.util.List list23 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl1.getSampleStats();
        double double25 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray26 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(statisticalSummary24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.17142857142857143, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 0.9714285714285715, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary28);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray15 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl10.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl10.getUpperBounds();
        int int18 = empiricalDistributionImpl10.getBinCount();
        double[] doubleArray19 = empiricalDistributionImpl10.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        int int9 = empiricalDistributionImpl1.getBinCount();
        java.util.List list10 = empiricalDistributionImpl1.getBinStats();
        double double11 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean22 = empiricalDistributionImpl21.isLoaded();
        int int23 = empiricalDistributionImpl21.getBinCount();
        boolean boolean24 = empiricalDistributionImpl21.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int29 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        double[] doubleArray34 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl28.load(doubleArray34);
        empiricalDistributionImpl26.load(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl26.load(doubleArray40);
        double[] doubleArray42 = empiricalDistributionImpl26.getUpperBounds();
        double double43 = empiricalDistributionImpl26.getNextValue();
        boolean boolean44 = empiricalDistributionImpl26.isLoaded();
        double[] doubleArray45 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl21.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8318633240629315d + "'", double18 == 0.8318633240629315d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.8318633240629315d + "'", double43 == 0.8318633240629315d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        double double22 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8608251962994682d + "'", double17 == 0.8608251962994682d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.724444792068782d) + "'", double20 == (-0.724444792068782d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.8067599837122627d + "'", double22 == 0.8067599837122627d);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean11 = empiricalDistributionImpl1.isLoaded();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        java.util.List list16 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(list16);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 100);
        int int2 = empiricalDistributionImpl1.getBinCount();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        boolean boolean5 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(statisticalSummary6);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double double28 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray29 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary30);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double double20 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray21 = empiricalDistributionImpl1.getUpperBounds();
        boolean boolean22 = empiricalDistributionImpl1.isLoaded();
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.3998548182395628d + "'", double17 == 0.3998548182395628d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.5499556329882529d) + "'", double20 == (-0.5499556329882529d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double double43 = empiricalDistributionImpl1.getNextValue();
        java.util.List list44 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray45 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray8 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl3.load(doubleArray8);
        double[] doubleArray10 = empiricalDistributionImpl3.getUpperBounds();
        int int11 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray12 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        double[] doubleArray12 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list13);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        int int13 = empiricalDistributionImpl1.getBinCount();
        java.util.List list14 = empiricalDistributionImpl1.getBinStats();
        int int15 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        double double17 = empiricalDistributionImpl1.getNextValue();
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double[] doubleArray14 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int19 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl18.getSampleStats();
        double[] doubleArray24 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl18.load(doubleArray24);
        empiricalDistributionImpl16.load(doubleArray24);
        double[] doubleArray30 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl16.load(doubleArray30);
        double[] doubleArray32 = empiricalDistributionImpl16.getUpperBounds();
        double double33 = empiricalDistributionImpl16.getNextValue();
        boolean boolean34 = empiricalDistributionImpl16.isLoaded();
        int int35 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray36 = empiricalDistributionImpl16.getUpperBounds();
        java.util.List list37 = empiricalDistributionImpl16.getBinStats();
        int int38 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray39 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.18823274753287303d + "'", double33 == 0.18823274753287303d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        double[] doubleArray6 = new double[] { 100.0d };
        empiricalDistributionImpl3.load(doubleArray6);
        boolean boolean8 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int15 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl14.getSampleStats();
        double[] doubleArray20 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl14.load(doubleArray20);
        empiricalDistributionImpl12.load(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl12.load(doubleArray26);
        empiricalDistributionImpl3.load(doubleArray26);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int33 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl32.getSampleStats();
        double[] doubleArray38 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl32.load(doubleArray38);
        empiricalDistributionImpl30.load(doubleArray38);
        empiricalDistributionImpl3.load(doubleArray38);
        empiricalDistributionImpl1.load(doubleArray38);
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl1.getSampleStats();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary44);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        double double14 = empiricalDistributionImpl1.getNextValue();
        double double15 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray16 = empiricalDistributionImpl1.getUpperBounds();
        java.io.File file17 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.0d + "'", double15 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        double double40 = empiricalDistributionImpl29.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray44 = empiricalDistributionImpl1.getUpperBounds();
        double double45 = empiricalDistributionImpl1.getNextValue();
        int int46 = empiricalDistributionImpl1.getBinCount();
        java.io.File file47 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
// flaky:         org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.6666666666666666d + "'", double43 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.3333333333333333d + "'", double45 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int6 = empiricalDistributionImpl5.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl5.getSampleStats();
        double[] doubleArray11 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl5.load(doubleArray11);
        empiricalDistributionImpl3.load(doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl3.load(doubleArray17);
        double double19 = empiricalDistributionImpl3.getNextValue();
        boolean boolean20 = empiricalDistributionImpl3.isLoaded();
        boolean boolean21 = empiricalDistributionImpl3.isLoaded();
        double[] doubleArray22 = empiricalDistributionImpl3.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray22);
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.6140525331474422d) + "'", double19 == (-1.6140525331474422d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double[] doubleArray17 = empiricalDistributionImpl1.getUpperBounds();
        double double18 = empiricalDistributionImpl1.getNextValue();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        int int20 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int27 = empiricalDistributionImpl26.getBinCount();
        double[] doubleArray29 = new double[] { 100.0d };
        empiricalDistributionImpl26.load(doubleArray29);
        boolean boolean31 = empiricalDistributionImpl26.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl26.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl26.getSampleStats();
        double[] doubleArray35 = empiricalDistributionImpl26.getUpperBounds();
        empiricalDistributionImpl24.load(doubleArray35);
        empiricalDistributionImpl1.load(doubleArray35);
        java.util.List list38 = empiricalDistributionImpl1.getBinStats();
        boolean boolean39 = empiricalDistributionImpl1.isLoaded();
        java.util.List list40 = empiricalDistributionImpl1.getBinStats();
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.6795900630215785d) + "'", double18 == (-1.6795900630215785d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(statisticalSummary32);
        org.junit.Assert.assertNotNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(list40);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        int int12 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray13 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        java.util.List list23 = empiricalDistributionImpl15.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int28 = empiricalDistributionImpl27.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        double[] doubleArray33 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl27.load(doubleArray33);
        empiricalDistributionImpl25.load(doubleArray33);
        double double36 = empiricalDistributionImpl25.getNextValue();
        double[] doubleArray37 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl25.getUpperBounds();
        empiricalDistributionImpl15.load(doubleArray38);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl42 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int45 = empiricalDistributionImpl44.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        double[] doubleArray50 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl44.load(doubleArray50);
        empiricalDistributionImpl42.load(doubleArray50);
        empiricalDistributionImpl15.load(doubleArray50);
        empiricalDistributionImpl1.load(doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl1.getSampleStats();
        double double56 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray57 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary55);
// flaky:         org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray24 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray24);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray34 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl29.load(doubleArray34);
        double[] doubleArray36 = empiricalDistributionImpl29.getUpperBounds();
        empiricalDistributionImpl27.load(doubleArray36);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int40 = empiricalDistributionImpl39.getBinCount();
        double[] doubleArray42 = new double[] { 100.0d };
        empiricalDistributionImpl39.load(doubleArray42);
        empiricalDistributionImpl27.load(doubleArray42);
        double[] doubleArray45 = empiricalDistributionImpl27.getUpperBounds();
        empiricalDistributionImpl13.load(doubleArray45);
        empiricalDistributionImpl1.load(doubleArray45);
        int int48 = empiricalDistributionImpl1.getBinCount();
        java.io.File file49 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double double12 = empiricalDistributionImpl1.getNextValue();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        int int15 = empiricalDistributionImpl1.getBinCount();
        boolean boolean16 = empiricalDistributionImpl1.isLoaded();
        java.util.List list17 = empiricalDistributionImpl1.getBinStats();
        int int18 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray7 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        int int9 = empiricalDistributionImpl1.getBinCount();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        java.util.List list11 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        java.util.List list13 = empiricalDistributionImpl1.getBinStats();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(list13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        empiricalDistributionImpl1.load(doubleArray18);
        double double22 = empiricalDistributionImpl1.getNextValue();
        double double23 = empiricalDistributionImpl1.getNextValue();
        double[] doubleArray24 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list25 = empiricalDistributionImpl1.getBinStats();
        double double26 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertNotNull(list25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        java.util.List list9 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int14 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        double[] doubleArray19 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl13.load(doubleArray19);
        empiricalDistributionImpl11.load(doubleArray19);
        double double22 = empiricalDistributionImpl11.getNextValue();
        double[] doubleArray23 = empiricalDistributionImpl11.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl11.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray24);
        boolean boolean26 = empiricalDistributionImpl1.isLoaded();
        double double27 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl1.getSampleStats();
        double double29 = empiricalDistributionImpl1.getNextValue();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32.0d + "'", double22 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.6666666666666666d + "'", double27 == 0.6666666666666666d);
        org.junit.Assert.assertNotNull(statisticalSummary28);
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.6666666666666666d + "'", double29 == 0.6666666666666666d);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        double double14 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int17 = empiricalDistributionImpl16.getBinCount();
        double[] doubleArray19 = new double[] { 100.0d };
        empiricalDistributionImpl16.load(doubleArray19);
        boolean boolean21 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean23 = empiricalDistributionImpl16.isLoaded();
        boolean boolean24 = empiricalDistributionImpl16.isLoaded();
        double[] doubleArray25 = empiricalDistributionImpl16.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        java.util.List list27 = empiricalDistributionImpl1.getBinStats();
        double double28 = empiricalDistributionImpl1.getNextValue();
        double double29 = empiricalDistributionImpl1.getNextValue();
        int int30 = empiricalDistributionImpl1.getBinCount();
        java.util.List list31 = empiricalDistributionImpl1.getBinStats();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int4 = empiricalDistributionImpl3.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        double[] doubleArray9 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl3.load(doubleArray9);
        empiricalDistributionImpl1.load(doubleArray9);
        double[] doubleArray15 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl1.load(doubleArray15);
        double double17 = empiricalDistributionImpl1.getNextValue();
        boolean boolean18 = empiricalDistributionImpl1.isLoaded();
        boolean boolean19 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray20 = empiricalDistributionImpl1.getUpperBounds();
        int int21 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int26 = empiricalDistributionImpl25.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        double[] doubleArray31 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl25.load(doubleArray31);
        empiricalDistributionImpl23.load(doubleArray31);
        double[] doubleArray37 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl23.load(doubleArray37);
        double[] doubleArray39 = empiricalDistributionImpl23.getUpperBounds();
        double double40 = empiricalDistributionImpl23.getNextValue();
        double[] doubleArray41 = empiricalDistributionImpl23.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray41);
        double double43 = empiricalDistributionImpl1.getNextValue();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int46 = empiricalDistributionImpl45.getBinCount();
        double[] doubleArray48 = new double[] { 100.0d };
        empiricalDistributionImpl45.load(doubleArray48);
        boolean boolean50 = empiricalDistributionImpl45.isLoaded();
        double[] doubleArray51 = empiricalDistributionImpl45.getUpperBounds();
        double double52 = empiricalDistributionImpl45.getNextValue();
        double[] doubleArray53 = empiricalDistributionImpl45.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray53);
        double[] doubleArray55 = empiricalDistributionImpl1.getUpperBounds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.28682167098691386d) + "'", double17 == (-0.28682167098691386d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.28682167098691386d) + "'", double40 == (-0.28682167098691386d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        double double11 = empiricalDistributionImpl1.getNextValue();
        int int12 = empiricalDistributionImpl1.getBinCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertNotNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray6 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl1.load(doubleArray6);
        double[] doubleArray8 = empiricalDistributionImpl1.getUpperBounds();
        int int9 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray10 = empiricalDistributionImpl1.getUpperBounds();
        int int11 = empiricalDistributionImpl1.getBinCount();
        java.util.List list12 = empiricalDistributionImpl1.getBinStats();
        int int13 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray20 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl15.load(doubleArray20);
        double[] doubleArray22 = empiricalDistributionImpl15.getUpperBounds();
        int int23 = empiricalDistributionImpl15.getBinCount();
        int int24 = empiricalDistributionImpl15.getBinCount();
        double[] doubleArray25 = empiricalDistributionImpl15.getUpperBounds();
        empiricalDistributionImpl1.load(doubleArray25);
        boolean boolean27 = empiricalDistributionImpl1.isLoaded();
        java.lang.Class<?> wildcardClass28 = empiricalDistributionImpl1.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean8 = empiricalDistributionImpl1.isLoaded();
        boolean boolean9 = empiricalDistributionImpl1.isLoaded();
        boolean boolean10 = empiricalDistributionImpl1.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int16 = empiricalDistributionImpl15.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        double[] doubleArray21 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl15.load(doubleArray21);
        empiricalDistributionImpl13.load(doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl13.load(doubleArray27);
        double double29 = empiricalDistributionImpl13.getNextValue();
        boolean boolean30 = empiricalDistributionImpl13.isLoaded();
        boolean boolean31 = empiricalDistributionImpl13.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean34 = empiricalDistributionImpl33.isLoaded();
        int int35 = empiricalDistributionImpl33.getBinCount();
        boolean boolean36 = empiricalDistributionImpl33.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int39 = empiricalDistributionImpl38.getBinCount();
        double[] doubleArray41 = new double[] { 100.0d };
        empiricalDistributionImpl38.load(doubleArray41);
        empiricalDistributionImpl33.load(doubleArray41);
        empiricalDistributionImpl13.load(doubleArray41);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray51 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl46.load(doubleArray51);
        double[] doubleArray53 = empiricalDistributionImpl46.getUpperBounds();
        int int54 = empiricalDistributionImpl46.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl58 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        double[] doubleArray63 = new double[] { 10, (-1.0d), (byte) 1, (byte) 1 };
        empiricalDistributionImpl58.load(doubleArray63);
        double[] doubleArray65 = empiricalDistributionImpl58.getUpperBounds();
        empiricalDistributionImpl56.load(doubleArray65);
        empiricalDistributionImpl46.load(doubleArray65);
        empiricalDistributionImpl13.load(doubleArray65);
        empiricalDistributionImpl1.load(doubleArray65);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean71 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.03267680651092865d) + "'", double29 == (-0.03267680651092865d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.0]");
        org.junit.Assert.assertNotNull(statisticalSummary70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        int int3 = empiricalDistributionImpl1.getBinCount();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        int int5 = empiricalDistributionImpl1.getBinCount();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int2 = empiricalDistributionImpl1.getBinCount();
        double[] doubleArray4 = new double[] { 100.0d };
        empiricalDistributionImpl1.load(doubleArray4);
        boolean boolean6 = empiricalDistributionImpl1.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl1.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int13 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl12.getSampleStats();
        double[] doubleArray18 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl12.load(doubleArray18);
        empiricalDistributionImpl10.load(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0d), (short) 0, 1L };
        empiricalDistributionImpl10.load(doubleArray24);
        empiricalDistributionImpl1.load(doubleArray24);
        double[] doubleArray27 = empiricalDistributionImpl1.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl(100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '#');
        int int32 = empiricalDistributionImpl31.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        double[] doubleArray37 = new double[] { (byte) 10, ' ', 1.0f };
        empiricalDistributionImpl31.load(doubleArray37);
        empiricalDistributionImpl29.load(doubleArray37);
        empiricalDistributionImpl1.load(doubleArray37);
        int int41 = empiricalDistributionImpl1.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl1.getSampleStats();
        double[] doubleArray43 = empiricalDistributionImpl1.getUpperBounds();
        java.net.URL uRL44 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(statisticalSummary42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1.0]");
    }
}

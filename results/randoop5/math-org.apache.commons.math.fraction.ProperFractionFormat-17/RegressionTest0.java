import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.text.NumberFormat numberFormat0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat1 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = fractionFormat0.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction7 = properFractionFormat2.parse("", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.Fraction fraction3 = null;
        java.lang.StringBuffer stringBuffer4 = null;
        java.text.FieldPosition fieldPosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer6 = properFractionFormat2.format(fraction3, stringBuffer4, fieldPosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Class<?> wildcardClass3 = numberFormat1.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj2 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator3 = fractionFormat0.formatToCharacterIterator(obj2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.math.fraction.Fraction fraction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction6 = null;
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.FieldPosition fieldPosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer9 = properFractionFormat2.format(fraction6, stringBuffer7, fieldPosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction8 = properFractionFormat2.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.lang.Class<?> wildcardClass1 = properFractionFormat0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.AttributedCharacterIterator attributedCharacterIterator2 = fractionFormat0.formatToCharacterIterator((java.lang.Object) (byte) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.AttributedCharacterIterator attributedCharacterIterator5 = fractionFormat3.formatToCharacterIterator((java.lang.Object) (byte) 0);
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.FieldPosition fieldPosition7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer8 = fractionFormat0.format((java.lang.Object) (byte) 0, stringBuffer6, fieldPosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(attributedCharacterIterator2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(attributedCharacterIterator5);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = properFractionFormat0.parseObject("-1 0 / 1", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = properFractionFormat0.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = numberFormat1.format(obj2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = properFractionFormat3.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        java.lang.String str14 = numberFormat12.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = numberFormat12.format((java.lang.Object) fractionFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(fractionFormat15);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        fractionFormat1.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        fractionFormat1.setDenominatorFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = fractionFormat1.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat1.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.FieldPosition fieldPosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = properFractionFormat0.format(fraction15, stringBuffer16, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction15);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = fractionFormat0.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = fractionFormat0.format(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.String str8 = properFractionFormat6.format((java.lang.Object) (-1));
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.FieldPosition fieldPosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer11 = properFractionFormat3.format((java.lang.Object) properFractionFormat6, stringBuffer9, fieldPosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 0 / 1" + "'", str8, "-1 0 / 1");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = fractionFormat0.format((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Class<?> wildcardClass7 = properFractionFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        java.lang.String str14 = numberFormat12.format((java.lang.Object) (byte) 1);
        java.lang.Class<?> wildcardClass15 = numberFormat12.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = fractionFormat0.parseObject("10", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fractionFormat0.parseObject("10", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fractionFormat0.parseObject("-1 0 / 1", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        fractionFormat7.setDenominatorFormat(numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        fractionFormat7.setDenominatorFormat(numberFormat17);
        java.text.NumberFormat numberFormat19 = fractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction21 = fractionFormat7.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.FieldPosition fieldPosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = properFractionFormat2.format(fraction21, stringBuffer22, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fraction21);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction8 = properFractionFormat2.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.text.ParsePosition parsePosition3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = fractionFormat0.parseObject("1", parsePosition3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.lang.Class<?> wildcardClass2 = fractionFormat0.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("10", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction13 = fractionFormat0.parse("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj15 = fractionFormat14.clone();
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.FieldPosition fieldPosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = fractionFormat0.format(obj15, stringBuffer16, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        java.text.ParsePosition parsePosition4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = properFractionFormat0.parseObject("1", parsePosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getNumeratorFormat();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat16.parse("1 / 1", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator21 = fractionFormat0.formatToCharacterIterator((java.lang.Object) numberFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.lang.Class<?> wildcardClass6 = numberFormat5.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj2 = fractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator8 = fractionFormat0.formatToCharacterIterator((java.lang.Object) numberFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.lang.Object obj14 = numberFormat12.parseObject("1 / 1");
        properFractionFormat2.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.Fraction fraction29 = fractionFormat16.parse("1");
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.FieldPosition fieldPosition32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer33 = properFractionFormat2.format(fraction29, stringBuffer31, fieldPosition32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 1L + "'", obj14, 1L);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.ParsePosition parsePosition19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("10", parsePosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        java.lang.String str21 = numberFormat17.format((java.lang.Object) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        java.text.NumberFormat numberFormat28 = properFractionFormat24.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = numberFormat17.format((java.lang.Object) properFractionFormat24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator10 = numberFormat8.formatToCharacterIterator((java.lang.Object) "1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        fractionFormat1.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        fractionFormat1.setDenominatorFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = fractionFormat1.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat1.parse("-1 0 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = properFractionFormat0.format((java.lang.Object) fractionFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction15);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = properFractionFormat2.parseObject("-1 0 / 1", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = properFractionFormat29.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj34 = properFractionFormat29.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator35 = numberFormat25.formatToCharacterIterator((java.lang.Object) properFractionFormat29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator33);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat7.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = properFractionFormat4.format((java.lang.Object) numberFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = fractionFormat0.parseObject("", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = fractionFormat0.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.lang.Object obj27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = numberFormat25.format(obj27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Class<?> wildcardClass18 = properFractionFormat16.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction7 = null;
        java.lang.StringBuffer stringBuffer8 = null;
        java.text.FieldPosition fieldPosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer10 = properFractionFormat2.format(fraction7, stringBuffer8, fieldPosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction23 = fractionFormat9.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat24 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        properFractionFormat25.setDenominatorFormat(numberFormat34);
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.FieldPosition fieldPosition37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = properFractionFormat2.format((java.lang.Object) properFractionFormat25, stringBuffer36, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat12.getNumeratorFormat();
        java.text.NumberFormat numberFormat25 = fractionFormat12.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = properFractionFormat2.format((java.lang.Object) fractionFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = properFractionFormat16.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        java.lang.Object obj13 = numberFormat12.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getNumeratorFormat();
        java.lang.Object obj26 = numberFormat24.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        fractionFormat27.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        fractionFormat27.setDenominatorFormat(numberFormat37);
        java.text.NumberFormat numberFormat39 = fractionFormat27.getNumeratorFormat();
        java.lang.String str41 = numberFormat39.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        properFractionFormat44.setWholeFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        properFractionFormat57.setWholeFormat(numberFormat59);
        properFractionFormat44.setWholeFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        fractionFormat62.setDenominatorFormat(numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        fractionFormat62.setDenominatorFormat(numberFormat72);
        java.text.NumberFormat numberFormat74 = fractionFormat62.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction76 = fractionFormat62.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat77 = fractionFormat62.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.lang.String str83 = properFractionFormat81.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat84 = properFractionFormat81.getWholeFormat();
        java.text.NumberFormat numberFormat85 = properFractionFormat81.getNumeratorFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat81.getWholeFormat();
        java.text.NumberFormat numberFormat87 = properFractionFormat81.getWholeFormat();
        properFractionFormat78.setDenominatorFormat(numberFormat87);
        properFractionFormat44.setWholeFormat(numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat39, numberFormat87);
        java.lang.StringBuffer stringBuffer91 = null;
        java.text.FieldPosition fieldPosition92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = properFractionFormat16.format((java.lang.Object) numberFormat24, stringBuffer91, fieldPosition92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-1 0 / 1" + "'", str83, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        java.lang.Object obj6 = numberFormat2.parseObject("10");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = properFractionFormat9.formatToCharacterIterator((java.lang.Object) 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = numberFormat2.format((java.lang.Object) properFractionFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 10L + "'", obj6, 10L);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat16.parse("10", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        properFractionFormat11.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        properFractionFormat24.setWholeFormat(numberFormat26);
        properFractionFormat11.setWholeFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        fractionFormat29.setDenominatorFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat39 = properFractionFormat36.getWholeFormat();
        fractionFormat29.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat29.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat44 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat48.getNumeratorFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        properFractionFormat45.setDenominatorFormat(numberFormat54);
        properFractionFormat11.setWholeFormat(numberFormat54);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator57 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) properFractionFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getNumeratorFormat();
        java.lang.Object obj16 = numberFormat14.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat17.getNumeratorFormat();
        java.lang.String str31 = numberFormat29.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        properFractionFormat34.setWholeFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        properFractionFormat47.setWholeFormat(numberFormat49);
        properFractionFormat34.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        fractionFormat52.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.lang.String str61 = properFractionFormat59.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        fractionFormat52.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat52.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat67 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat70 = fractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.lang.String str73 = properFractionFormat71.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat74 = properFractionFormat71.getWholeFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat71.getNumeratorFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat71.getWholeFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat71.getWholeFormat();
        properFractionFormat68.setDenominatorFormat(numberFormat77);
        properFractionFormat34.setWholeFormat(numberFormat77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat29, numberFormat77);
        java.lang.StringBuffer stringBuffer81 = null;
        java.text.FieldPosition fieldPosition82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = properFractionFormat2.format((java.lang.Object) numberFormat29, stringBuffer81, fieldPosition82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1L + "'", obj16, 1L);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 0 / 1" + "'", str61, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1 0 / 1" + "'", str73, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.Fraction fraction29 = fractionFormat16.parse("1");
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.FieldPosition fieldPosition32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer33 = properFractionFormat2.format(fraction29, stringBuffer31, fieldPosition32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        java.lang.Class<?> wildcardClass16 = fraction14.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 1" + "'", str15, "-1 / 1");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.lang.Object obj18 = null;
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.FieldPosition fieldPosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = properFractionFormat16.format(obj18, stringBuffer19, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = fractionFormat0.format((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        java.lang.StringBuffer stringBuffer4 = null;
        java.text.FieldPosition fieldPosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer6 = properFractionFormat0.format((java.lang.Object) "10", stringBuffer4, fieldPosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.AttributedCharacterIterator attributedCharacterIterator15 = fractionFormat13.formatToCharacterIterator((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass16 = attributedCharacterIterator15.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator17 = fractionFormat0.formatToCharacterIterator((java.lang.Object) attributedCharacterIterator15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(attributedCharacterIterator15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getDenominatorFormat();
        fractionFormat48.setDenominatorFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat63 = properFractionFormat60.getWholeFormat();
        java.text.NumberFormat numberFormat64 = properFractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat55, numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        properFractionFormat75.setWholeFormat(numberFormat77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.lang.String str84 = properFractionFormat82.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat85 = properFractionFormat82.getWholeFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat82.getDenominatorFormat();
        fractionFormat79.setDenominatorFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71, numberFormat77, numberFormat86);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator90 = properFractionFormat65.formatToCharacterIterator((java.lang.Object) numberFormat77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1 0 / 1" + "'", str84, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = properFractionFormat13.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        java.text.ParsePosition parsePosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = fractionFormat0.parseObject("10", parsePosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("1 / 1", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj3 = numberFormat1.parseObject("10");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Class<?> wildcardClass5 = numberFormat1.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 10L + "'", obj3, 10L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.lang.Class<?> wildcardClass26 = numberFormat10.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat9.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator7 = properFractionFormat3.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj8 = properFractionFormat3.clone();
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.FieldPosition fieldPosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer11 = fractionFormat0.format((java.lang.Object) properFractionFormat3, stringBuffer9, fieldPosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.Fraction fraction32 = fractionFormat19.parse("1");
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.FieldPosition fieldPosition34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = properFractionFormat16.format(fraction32, stringBuffer33, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction32);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        fractionFormat37.setDenominatorFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        fractionFormat37.setDenominatorFormat(numberFormat47);
        java.text.NumberFormat numberFormat49 = fractionFormat37.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator50 = numberFormat35.formatToCharacterIterator((java.lang.Object) fractionFormat37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat49);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = fractionFormat0.parseObject("hi!", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj10 = numberFormat8.parseObject("1 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1L + "'", obj10, 1L);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        java.lang.Object obj10 = numberFormat6.parseObject("-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-1L) + "'", obj10, (-1L));
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getNumeratorFormat();
        java.lang.Object obj26 = numberFormat24.parseObject("1 / 1");
        properFractionFormat14.setWholeFormat(numberFormat24);
        properFractionFormat2.setWholeFormat(numberFormat24);
        java.text.ParsePosition parsePosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = properFractionFormat2.parseObject("-1 / 1", parsePosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator18 = properFractionFormat14.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj19 = properFractionFormat14.clone();
        java.lang.Object obj20 = properFractionFormat14.clone();
        org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat14.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.FieldPosition fieldPosition24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = properFractionFormat2.format(fraction22, stringBuffer23, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(fraction22);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = properFractionFormat2.parseObject("-1 / 1", parsePosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getDenominatorFormat();
        java.text.ParsePosition parsePosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat16.parse("1 / 1", parsePosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        java.lang.Object obj22 = numberFormat21.clone();
        fractionFormat18.setDenominatorFormat(numberFormat21);
        properFractionFormat0.setWholeFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = fractionFormat25.clone();
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.FieldPosition fieldPosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = properFractionFormat0.format((java.lang.Object) fractionFormat25, stringBuffer28, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        properFractionFormat22.setWholeFormat(numberFormat24);
        fractionFormat18.setNumeratorFormat(numberFormat24);
        org.apache.commons.math.fraction.Fraction fraction28 = fractionFormat18.parse("-1 / 1");
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.FieldPosition fieldPosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = properFractionFormat16.format(fraction28, stringBuffer29, fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fraction28);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        properFractionFormat13.setWholeFormat(numberFormat15);
        fractionFormat9.setNumeratorFormat(numberFormat15);
        org.apache.commons.math.fraction.Fraction fraction19 = fractionFormat9.parse("-1 / 1");
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.FieldPosition fieldPosition21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat3.format(fraction19, stringBuffer20, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fraction19);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getNumeratorFormat();
        java.lang.Object obj19 = numberFormat18.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getDenominatorFormat();
        fractionFormat20.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator30 = numberFormat18.formatToCharacterIterator((java.lang.Object) numberFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.FieldPosition fieldPosition15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer16 = fractionFormat0.format((java.lang.Object) str13, stringBuffer14, fieldPosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.ParsePosition parsePosition19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = properFractionFormat16.parseObject("-1 / 1", parsePosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.String str6 = properFractionFormat4.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat7 = properFractionFormat4.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        properFractionFormat4.setWholeFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        properFractionFormat17.setWholeFormat(numberFormat19);
        properFractionFormat4.setWholeFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        fractionFormat22.setDenominatorFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        fractionFormat22.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = fractionFormat22.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction36 = fractionFormat22.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat37 = fractionFormat22.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat41.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat41.getWholeFormat();
        properFractionFormat38.setDenominatorFormat(numberFormat47);
        properFractionFormat4.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        fractionFormat50.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        java.text.NumberFormat numberFormat66 = properFractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat57, numberFormat66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = fractionFormat0.format((java.lang.Object) properFractionFormat67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1 0 / 1" + "'", str6, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction7 = null;
        java.lang.StringBuffer stringBuffer8 = null;
        java.text.FieldPosition fieldPosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer10 = properFractionFormat2.format(fraction7, stringBuffer8, fieldPosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat36.setDenominatorFormat(numberFormat37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = properFractionFormat2.parseObject("hi!", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.ParsePosition parsePosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("1", parsePosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.lang.Object obj37 = numberFormat35.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator42 = numberFormat35.formatToCharacterIterator((java.lang.Object) numberFormat39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        java.text.ParsePosition parsePosition25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = properFractionFormat23.parseObject("1", parsePosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.ParsePosition parsePosition38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat36.parse("1", parsePosition38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        fractionFormat18.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.lang.String str27 = properFractionFormat25.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat28 = properFractionFormat25.getWholeFormat();
        fractionFormat18.setDenominatorFormat(numberFormat28);
        java.text.NumberFormat numberFormat30 = fractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat16.formatToCharacterIterator((java.lang.Object) numberFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 0 / 1" + "'", str27, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getDenominatorFormat();
        fractionFormat10.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat29, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat63.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat29, numberFormat65);
        java.lang.Class<?> wildcardClass67 = properFractionFormat66.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        properFractionFormat12.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        properFractionFormat25.setWholeFormat(numberFormat27);
        properFractionFormat12.setWholeFormat(numberFormat27);
        java.lang.Object obj31 = properFractionFormat12.parseObject("10");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = numberFormat6.format((java.lang.Object) "10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        java.text.NumberFormat numberFormat12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setNumeratorFormat(numberFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("10", parsePosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat3.parse("", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat2.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat2.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat48);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.lang.Object obj24 = numberFormat21.parseObject("1 / 1");
        java.text.NumberFormat numberFormat25 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat28.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj33 = properFractionFormat28.clone();
        java.lang.Object obj34 = properFractionFormat28.clone();
        java.text.NumberFormat numberFormat35 = properFractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat25, numberFormat35);
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setDenominatorFormat(numberFormat25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 1L + "'", obj24, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        java.lang.Object obj22 = numberFormat21.clone();
        fractionFormat18.setDenominatorFormat(numberFormat21);
        properFractionFormat0.setWholeFormat(numberFormat21);
        java.text.ParsePosition parsePosition26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = properFractionFormat0.parseObject("1 / 1", parsePosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = properFractionFormat16.format((java.lang.Object) properFractionFormat29, stringBuffer34, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj3 = fractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.String str8 = properFractionFormat6.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat9 = properFractionFormat6.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        properFractionFormat13.setWholeFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getDenominatorFormat();
        fractionFormat17.setDenominatorFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat15, numberFormat24);
        java.lang.Object obj28 = numberFormat15.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = fractionFormat0.format(obj28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 0 / 1" + "'", str8, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj9 = properFractionFormat2.clone();
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.FieldPosition fieldPosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer13 = properFractionFormat2.format((java.lang.Object) (short) 100, stringBuffer11, fieldPosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        java.text.ParsePosition parsePosition87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction88 = properFractionFormat85.parse("hi!", parsePosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator45 = numberFormat19.formatToCharacterIterator((java.lang.Object) properFractionFormat39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.lang.Class<?> wildcardClass37 = numberFormat19.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator17 = properFractionFormat13.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj18 = properFractionFormat13.clone();
        java.lang.Object obj19 = properFractionFormat13.clone();
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat13.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.FieldPosition fieldPosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = properFractionFormat9.format(fraction21, stringBuffer22, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(fraction21);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        java.lang.Class<?> wildcardClass24 = numberFormat20.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.ParsePosition parsePosition15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat13.parse("-1 0 / 1", parsePosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getNumeratorFormat();
        java.lang.Object obj19 = numberFormat17.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        java.lang.String str34 = numberFormat32.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        properFractionFormat37.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        properFractionFormat50.setWholeFormat(numberFormat52);
        properFractionFormat37.setWholeFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.text.NumberFormat numberFormat67 = fractionFormat55.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction69 = fractionFormat55.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat70 = fractionFormat55.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.lang.String str76 = properFractionFormat74.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat77 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat78 = properFractionFormat74.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat74.getWholeFormat();
        properFractionFormat71.setDenominatorFormat(numberFormat80);
        properFractionFormat37.setWholeFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat32, numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat86 = fractionFormat85.getDenominatorFormat();
        properFractionFormat84.setNumeratorFormat(numberFormat86);
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat89 = fractionFormat88.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat89);
        java.lang.String str92 = properFractionFormat90.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat93 = properFractionFormat90.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat86, numberFormat93);
        org.apache.commons.math.fraction.FractionFormat fractionFormat95 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat96 = fractionFormat95.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat97 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat96);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator98 = numberFormat93.formatToCharacterIterator((java.lang.Object) properFractionFormat97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + 1L + "'", obj19, 1L);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1 0 / 1" + "'", str76, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(fractionFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-1 0 / 1" + "'", str92, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(fractionFormat95);
        org.junit.Assert.assertNotNull(numberFormat96);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat2.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = properFractionFormat16.parseObject("hi!", parsePosition18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        java.lang.Class<?> wildcardClass19 = properFractionFormat16.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("-1 / 1", parsePosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.ParsePosition parsePosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("", parsePosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getDenominatorFormat();
        fractionFormat10.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat29, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat63.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat29, numberFormat65);
        java.lang.Class<?> wildcardClass67 = numberFormat9.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        java.lang.Object obj13 = numberFormat11.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat26 = fractionFormat14.getNumeratorFormat();
        java.lang.String str28 = numberFormat26.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat31.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        properFractionFormat31.setWholeFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        properFractionFormat44.setWholeFormat(numberFormat46);
        properFractionFormat31.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        fractionFormat49.setDenominatorFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        fractionFormat49.setDenominatorFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat49.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat64 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat68.getNumeratorFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat68.getWholeFormat();
        properFractionFormat65.setDenominatorFormat(numberFormat74);
        properFractionFormat31.setWholeFormat(numberFormat74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat26, numberFormat74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.FieldPosition fieldPosition80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = properFractionFormat2.format((java.lang.Object) numberFormat11, stringBuffer79, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        properFractionFormat73.setNumeratorFormat(numberFormat75);
        java.lang.Object obj78 = properFractionFormat73.parseObject("1");
        java.text.ParsePosition parsePosition80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat73.parse("-1 0 / 1", parsePosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(obj78);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getDenominatorFormat();
        fractionFormat7.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        java.lang.Object obj29 = numberFormat26.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.text.NumberFormat numberFormat42 = fractionFormat30.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat26, numberFormat42);
        java.lang.Object obj44 = numberFormat26.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator45 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) numberFormat26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + 1L + "'", obj29, 1L);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(obj44);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.ParsePosition parsePosition38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = properFractionFormat36.parseObject("", parsePosition38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        java.text.ParsePosition parsePosition87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = properFractionFormat85.parseObject("hi!", parsePosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Class<?> wildcardClass2 = fractionFormat0.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator12 = properFractionFormat8.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj13 = properFractionFormat8.clone();
        java.lang.Object obj14 = properFractionFormat8.clone();
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat8.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer17 = null;
        java.text.FieldPosition fieldPosition18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer19 = properFractionFormat2.format(fraction16, stringBuffer17, fieldPosition18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(fraction16);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.String str7 = properFractionFormat5.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator9 = properFractionFormat5.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj10 = properFractionFormat5.clone();
        java.lang.Object obj11 = properFractionFormat5.clone();
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat5.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat14 = properFractionFormat5.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = numberFormat1.format((java.lang.Object) numberFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1 0 / 1" + "'", str7, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.NumberFormat numberFormat42 = properFractionFormat41.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat41.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.FieldPosition fieldPosition46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer47 = properFractionFormat36.format(fraction44, stringBuffer45, fieldPosition46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = properFractionFormat2.parseObject("10 / 1", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction8 = null;
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.FieldPosition fieldPosition10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer11 = properFractionFormat2.format(fraction8, stringBuffer9, fieldPosition10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator11 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) "10 0 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat18.getNumeratorFormat();
        java.lang.Object obj24 = numberFormat22.parseObject("1 / 1");
        properFractionFormat12.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat26 = properFractionFormat12.getWholeFormat();
        java.lang.StringBuffer stringBuffer27 = null;
        java.text.FieldPosition fieldPosition28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer29 = properFractionFormat9.format((java.lang.Object) numberFormat26, stringBuffer27, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 1L + "'", obj24, 1L);
        org.junit.Assert.assertNotNull(numberFormat26);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        java.text.NumberFormat numberFormat93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat23.setNumeratorFormat(numberFormat93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        java.lang.Object obj12 = fractionFormat10.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        fractionFormat13.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        fractionFormat13.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        java.lang.Object obj29 = numberFormat28.clone();
        fractionFormat25.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        fractionFormat31.setDenominatorFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        fractionFormat31.setDenominatorFormat(numberFormat41);
        java.lang.Object obj44 = numberFormat41.parseObject("1 / 1");
        java.text.NumberFormat numberFormat45 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.lang.Object obj54 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat55 = properFractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat45, numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat28, numberFormat41);
        fractionFormat10.setDenominatorFormat(numberFormat41);
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.FieldPosition fieldPosition60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = properFractionFormat9.format((java.lang.Object) fractionFormat10, stringBuffer59, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + 1L + "'", obj44, 1L);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(numberFormat55);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        java.lang.String str14 = numberFormat12.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        properFractionFormat17.setWholeFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        properFractionFormat30.setWholeFormat(numberFormat32);
        properFractionFormat17.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        fractionFormat35.setDenominatorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.lang.String str44 = properFractionFormat42.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat45 = properFractionFormat42.getWholeFormat();
        fractionFormat35.setDenominatorFormat(numberFormat45);
        java.text.NumberFormat numberFormat47 = fractionFormat35.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction49 = fractionFormat35.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat50 = fractionFormat35.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        java.text.NumberFormat numberFormat58 = properFractionFormat54.getNumeratorFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat54.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat54.getWholeFormat();
        properFractionFormat51.setDenominatorFormat(numberFormat60);
        properFractionFormat17.setWholeFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getDenominatorFormat();
        fractionFormat63.setDenominatorFormat(numberFormat70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60, numberFormat70, numberFormat79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = numberFormat12.format((java.lang.Object) numberFormat79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1 0 / 1" + "'", str44, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat9.parse("-1 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat2.parse("10 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat3.parse("10 / 1", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.lang.Object obj27 = numberFormat24.parseObject("1 / 1");
        java.text.NumberFormat numberFormat28 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator35 = properFractionFormat31.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj36 = properFractionFormat31.clone();
        java.lang.Object obj37 = properFractionFormat31.clone();
        java.text.NumberFormat numberFormat38 = properFractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat13, numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        properFractionFormat45.setWholeFormat(numberFormat47);
        fractionFormat41.setNumeratorFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.Class<?> wildcardClass51 = properFractionFormat50.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = numberFormat8.format((java.lang.Object) wildcardClass51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 1L + "'", obj27, 1L);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = numberFormat19.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        fractionFormat8.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.lang.String str17 = properFractionFormat15.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat18 = properFractionFormat15.getWholeFormat();
        fractionFormat8.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.Fraction fraction21 = fractionFormat8.parse("1");
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.FieldPosition fieldPosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = properFractionFormat3.format(fraction21, stringBuffer22, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1 0 / 1" + "'", str17, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fraction21);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        java.lang.String str13 = properFractionFormat2.format((java.lang.Object) 10L);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat26 = fractionFormat14.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction28 = fractionFormat14.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat29 = fractionFormat14.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        java.lang.Object obj32 = properFractionFormat30.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        java.text.NumberFormat numberFormat39 = properFractionFormat35.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        properFractionFormat35.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        properFractionFormat48.setWholeFormat(numberFormat50);
        properFractionFormat35.setWholeFormat(numberFormat50);
        java.lang.String str54 = numberFormat50.format((java.lang.Object) (short) 10);
        properFractionFormat30.setNumeratorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.lang.String str60 = properFractionFormat58.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat61 = properFractionFormat58.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat58.getNumeratorFormat();
        java.text.NumberFormat numberFormat63 = properFractionFormat58.getWholeFormat();
        properFractionFormat30.setDenominatorFormat(numberFormat63);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator65 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) properFractionFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10 0 / 1" + "'", str13, "10 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1 0 / 1" + "'", str60, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction23 = fractionFormat9.parse("-1 0 / 1");
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        java.lang.StringBuffer stringBuffer25 = null;
        java.text.FieldPosition fieldPosition26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = properFractionFormat3.format(fraction23, stringBuffer25, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1 / 1" + "'", str24, "-1 / 1");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator12 = numberFormat9.formatToCharacterIterator((java.lang.Object) numberFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.lang.Object obj23 = numberFormat20.parseObject("1 / 1");
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator31 = properFractionFormat27.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj32 = properFractionFormat27.clone();
        java.lang.Object obj33 = properFractionFormat27.clone();
        java.text.NumberFormat numberFormat34 = properFractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat24, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat38.getWholeFormat();
        java.lang.Object obj46 = numberFormat44.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat49.getNumeratorFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat49.getWholeFormat();
        java.lang.Object obj57 = numberFormat55.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat44, numberFormat55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = numberFormat7.format((java.lang.Object) numberFormat44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 1L + "'", obj23, 1L);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1L) + "'", obj46, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + (-1L) + "'", obj57, (-1L));
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat24.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        fractionFormat24.setDenominatorFormat(numberFormat34);
        java.text.NumberFormat numberFormat36 = fractionFormat24.getNumeratorFormat();
        java.text.NumberFormat numberFormat37 = fractionFormat24.getNumeratorFormat();
        java.text.NumberFormat numberFormat38 = fractionFormat24.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator39 = properFractionFormat23.formatToCharacterIterator((java.lang.Object) numberFormat38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        properFractionFormat21.setWholeFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getDenominatorFormat();
        fractionFormat25.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat23, numberFormat32);
        java.lang.Object obj36 = numberFormat23.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator37 = numberFormat10.formatToCharacterIterator((java.lang.Object) numberFormat23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = properFractionFormat0.parse("1 / 1", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.FieldPosition fieldPosition13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer14 = properFractionFormat9.format((java.lang.Object) (-1), stringBuffer12, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat9.parse("hi!", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        java.lang.Object obj5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = numberFormat2.format(obj5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat19.getNumeratorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat32);
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = properFractionFormat16.format((java.lang.Object) (-1L), stringBuffer35, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        java.lang.Class<?> wildcardClass9 = numberFormat8.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction7 = properFractionFormat2.parse("10 / 1", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator16 = properFractionFormat12.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj17 = properFractionFormat12.clone();
        java.lang.Object obj18 = properFractionFormat12.clone();
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat12.parse("-1 0 / 1");
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.FieldPosition fieldPosition24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = properFractionFormat2.format(fraction20, stringBuffer23, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 / 1" + "'", str21, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 / 1" + "'", str22, "-1 / 1");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getDenominatorFormat();
        fractionFormat18.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        fractionFormat27.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        fractionFormat27.setDenominatorFormat(numberFormat37);
        java.lang.Object obj40 = numberFormat37.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        fractionFormat41.setDenominatorFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        fractionFormat41.setDenominatorFormat(numberFormat51);
        java.text.NumberFormat numberFormat53 = fractionFormat41.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat37, numberFormat53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = numberFormat16.format((java.lang.Object) numberFormat53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + 1L + "'", obj40, 1L);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat53);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        java.text.ParsePosition parsePosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = fractionFormat0.parseObject("1 / 1", parsePosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.AttributedCharacterIterator attributedCharacterIterator2 = fractionFormat0.formatToCharacterIterator((java.lang.Object) (byte) 0);
        java.text.NumberFormat numberFormat3 = fractionFormat0.getDenominatorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(attributedCharacterIterator2);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator25 = properFractionFormat21.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj26 = properFractionFormat21.clone();
        java.lang.Object obj27 = properFractionFormat21.clone();
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat21.parse("-1 0 / 1");
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.FieldPosition fieldPosition33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = properFractionFormat16.format(fraction29, stringBuffer32, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 / 1" + "'", str30, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 / 1" + "'", str31, "-1 / 1");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat30.parse("10 0 / 1");
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = properFractionFormat16.format(fraction32, stringBuffer35, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10 / 1" + "'", str33, "10 / 1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10 / 1" + "'", str34, "10 / 1");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        java.text.ParsePosition parsePosition21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat2.parse("-1 0 / 1", parsePosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        java.lang.Object obj27 = numberFormat25.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat28.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        fractionFormat28.setDenominatorFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = fractionFormat28.getNumeratorFormat();
        java.lang.String str42 = numberFormat40.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat48 = properFractionFormat45.getWholeFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat45.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        properFractionFormat45.setWholeFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        properFractionFormat58.setWholeFormat(numberFormat60);
        properFractionFormat45.setWholeFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        fractionFormat63.setDenominatorFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        fractionFormat63.setDenominatorFormat(numberFormat73);
        java.text.NumberFormat numberFormat75 = fractionFormat63.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction77 = fractionFormat63.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat78 = fractionFormat63.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.lang.String str84 = properFractionFormat82.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat85 = properFractionFormat82.getWholeFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat82.getNumeratorFormat();
        java.text.NumberFormat numberFormat87 = properFractionFormat82.getWholeFormat();
        java.text.NumberFormat numberFormat88 = properFractionFormat82.getWholeFormat();
        properFractionFormat79.setDenominatorFormat(numberFormat88);
        properFractionFormat45.setWholeFormat(numberFormat88);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat40, numberFormat88);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        properFractionFormat92.setNumeratorFormat(numberFormat94);
        java.lang.StringBuffer stringBuffer96 = null;
        java.text.FieldPosition fieldPosition97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer98 = properFractionFormat16.format((java.lang.Object) properFractionFormat92, stringBuffer96, fieldPosition97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 1L + "'", obj27, 1L);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1 0 / 1" + "'", str84, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Object obj8 = numberFormat7.clone();
        java.text.NumberFormat numberFormat9 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat7, numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction25 = fractionFormat11.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat26 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat27.getNumeratorFormat();
        java.lang.Object obj30 = numberFormat29.clone();
        properFractionFormat10.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        fractionFormat32.setDenominatorFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        fractionFormat32.setDenominatorFormat(numberFormat42);
        org.apache.commons.math.fraction.Fraction fraction45 = fractionFormat32.parse("1");
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        java.lang.StringBuffer stringBuffer47 = null;
        java.text.FieldPosition fieldPosition48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer49 = properFractionFormat10.format(fraction45, stringBuffer47, fieldPosition48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1 / 1" + "'", str46, "1 / 1");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat73.parse("hi!", parsePosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat21.getNumeratorFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat22);
        java.text.ParsePosition parsePosition25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction26 = properFractionFormat16.parse("10", parsePosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer4 = null;
        java.text.FieldPosition fieldPosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer6 = fractionFormat0.format((java.lang.Object) numberFormat3, stringBuffer4, fieldPosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        java.lang.Object obj21 = properFractionFormat2.parseObject("10");
        java.text.NumberFormat numberFormat22 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = numberFormat22.format(obj23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        java.text.ParsePosition parsePosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = properFractionFormat36.parseObject("-1 0 / 1", parsePosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.Fraction fraction25 = fractionFormat12.parse("1");
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.FieldPosition fieldPosition27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer28 = properFractionFormat11.format(fraction25, stringBuffer26, fieldPosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction25);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.lang.Object obj4 = numberFormat3.clone();
        fractionFormat0.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        java.lang.Object obj14 = numberFormat13.clone();
        java.text.NumberFormat numberFormat15 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat13, numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator25 = properFractionFormat21.formatToCharacterIterator((java.lang.Object) 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator26 = numberFormat17.formatToCharacterIterator((java.lang.Object) attributedCharacterIterator25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator25);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getNumeratorFormat();
        java.lang.Object obj5 = properFractionFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        fractionFormat6.setDenominatorFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        fractionFormat6.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = fractionFormat6.getNumeratorFormat();
        properFractionFormat3.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = properFractionFormat3.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.FieldPosition fieldPosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = properFractionFormat0.format((java.lang.Object) properFractionFormat3, stringBuffer22, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.lang.String str59 = properFractionFormat57.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat60 = properFractionFormat57.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat57.getDenominatorFormat();
        fractionFormat54.setDenominatorFormat(numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        fractionFormat63.setDenominatorFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        fractionFormat63.setDenominatorFormat(numberFormat73);
        java.lang.Object obj76 = numberFormat73.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        fractionFormat77.setDenominatorFormat(numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat87 = properFractionFormat84.getWholeFormat();
        fractionFormat77.setDenominatorFormat(numberFormat87);
        java.text.NumberFormat numberFormat89 = fractionFormat77.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61, numberFormat73, numberFormat89);
        properFractionFormat51.setNumeratorFormat(numberFormat61);
        java.lang.StringBuffer stringBuffer92 = null;
        java.text.FieldPosition fieldPosition93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = properFractionFormat48.format((java.lang.Object) properFractionFormat51, stringBuffer92, fieldPosition93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 0 / 1" + "'", str59, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + 1L + "'", obj76, 1L);
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat89);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction23 = fractionFormat9.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat24 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getNumeratorFormat();
        properFractionFormat25.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = properFractionFormat25.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = fractionFormat0.format((java.lang.Object) numberFormat33, stringBuffer34, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        java.lang.Object obj87 = properFractionFormat85.parseObject("10 / 1");
        java.text.NumberFormat numberFormat88 = properFractionFormat85.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat90 = fractionFormat89.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat90);
        java.lang.String str93 = properFractionFormat91.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat94 = properFractionFormat91.getWholeFormat();
        java.text.NumberFormat numberFormat95 = properFractionFormat91.getNumeratorFormat();
        java.text.NumberFormat numberFormat96 = properFractionFormat91.getWholeFormat();
        java.text.NumberFormat numberFormat97 = properFractionFormat91.getWholeFormat();
        java.text.NumberFormat numberFormat98 = properFractionFormat91.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator99 = properFractionFormat85.formatToCharacterIterator((java.lang.Object) numberFormat98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(fractionFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "-1 0 / 1" + "'", str93, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertNotNull(numberFormat95);
        org.junit.Assert.assertNotNull(numberFormat96);
        org.junit.Assert.assertNotNull(numberFormat97);
        org.junit.Assert.assertNotNull(numberFormat98);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.lang.Object obj11 = fractionFormat9.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        java.lang.Object obj28 = numberFormat27.clone();
        fractionFormat24.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.lang.Object obj43 = numberFormat40.parseObject("1 / 1");
        java.text.NumberFormat numberFormat44 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat47.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj52 = properFractionFormat47.clone();
        java.lang.Object obj53 = properFractionFormat47.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat44, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat27, numberFormat40);
        fractionFormat9.setDenominatorFormat(numberFormat40);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator58 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) numberFormat40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + 1L + "'", obj43, 1L);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.Fraction fraction33 = fractionFormat20.parse("1");
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = properFractionFormat2.format(fraction33, stringBuffer35, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1 / 1" + "'", str34, "1 / 1");
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = properFractionFormat4.parseObject("1 / 1", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        java.text.ParsePosition parsePosition66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat64.parse("10 / 1", parsePosition66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        fractionFormat59.setDenominatorFormat(numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        fractionFormat59.setDenominatorFormat(numberFormat69);
        java.text.NumberFormat numberFormat71 = fractionFormat59.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat59.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.FieldPosition fieldPosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = properFractionFormat55.format(fraction73, stringBuffer74, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fraction73);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator14 = numberFormat12.formatToCharacterIterator((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Object obj8 = numberFormat7.clone();
        java.text.NumberFormat numberFormat9 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat7, numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction25 = fractionFormat11.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat26 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat27.getNumeratorFormat();
        java.lang.Object obj30 = numberFormat29.clone();
        properFractionFormat10.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        fractionFormat32.setDenominatorFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        fractionFormat32.setDenominatorFormat(numberFormat42);
        java.text.NumberFormat numberFormat44 = fractionFormat32.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction46 = fractionFormat32.parse("-1 0 / 1");
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator49 = numberFormat29.formatToCharacterIterator((java.lang.Object) str48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 / 1" + "'", str47, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1 / 1" + "'", str48, "-1 / 1");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.text.AttributedCharacterIterator attributedCharacterIterator9 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        java.lang.Object obj26 = numberFormat25.clone();
        fractionFormat22.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat28.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        fractionFormat28.setDenominatorFormat(numberFormat38);
        java.lang.Object obj41 = numberFormat38.parseObject("1 / 1");
        java.text.NumberFormat numberFormat42 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator49 = properFractionFormat45.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj50 = properFractionFormat45.clone();
        java.lang.Object obj51 = properFractionFormat45.clone();
        java.text.NumberFormat numberFormat52 = properFractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat42, numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat25, numberFormat38);
        properFractionFormat2.setWholeFormat(numberFormat38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = properFractionFormat2.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(attributedCharacterIterator9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 1L + "'", obj41, 1L);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction7 = properFractionFormat2.parse("-1 / 1", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj2 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.String str7 = properFractionFormat5.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat8 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat5.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        properFractionFormat5.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        properFractionFormat18.setWholeFormat(numberFormat20);
        properFractionFormat5.setWholeFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction37 = fractionFormat23.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat38 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.lang.String str44 = properFractionFormat42.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat45 = properFractionFormat42.getWholeFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat42.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat42.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat42.getWholeFormat();
        properFractionFormat39.setDenominatorFormat(numberFormat48);
        properFractionFormat5.setWholeFormat(numberFormat48);
        java.text.NumberFormat numberFormat51 = properFractionFormat5.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = numberFormat1.format((java.lang.Object) numberFormat51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1 0 / 1" + "'", str7, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1 0 / 1" + "'", str44, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = fractionFormat11.formatToCharacterIterator((java.lang.Object) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator14 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) fractionFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.ParsePosition parsePosition3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = fractionFormat0.parseObject("10 / 1", parsePosition3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getDenominatorFormat();
        properFractionFormat11.setNumeratorFormat(numberFormat23);
        properFractionFormat2.setDenominatorFormat(numberFormat23);
        java.text.ParsePosition parsePosition27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat2.parse("", parsePosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        properFractionFormat14.setWholeFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getDenominatorFormat();
        fractionFormat18.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat16, numberFormat25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = properFractionFormat4.format((java.lang.Object) properFractionFormat28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction7 = properFractionFormat4.parse("-1 0 / 1");
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat4.parse("1 / 1", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fraction7);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat3.getDenominatorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat16.parse("1 / 1");
        java.lang.Class<?> wildcardClass20 = fraction19.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat11.getWholeFormat();
        java.lang.Object obj20 = properFractionFormat11.parseObject("-1 0 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = numberFormat8.format((java.lang.Object) "-1 0 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction5 = properFractionFormat2.parse("-1 0 / 1", parsePosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getNumeratorFormat();
        java.lang.Object obj16 = numberFormat14.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat17.getNumeratorFormat();
        java.lang.String str31 = numberFormat29.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        properFractionFormat34.setWholeFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        properFractionFormat47.setWholeFormat(numberFormat49);
        properFractionFormat34.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        fractionFormat52.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.lang.String str61 = properFractionFormat59.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        fractionFormat52.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat52.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat67 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat70 = fractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.lang.String str73 = properFractionFormat71.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat74 = properFractionFormat71.getWholeFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat71.getNumeratorFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat71.getWholeFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat71.getWholeFormat();
        properFractionFormat68.setDenominatorFormat(numberFormat77);
        properFractionFormat34.setWholeFormat(numberFormat77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat29, numberFormat77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        java.lang.Object obj85 = numberFormat84.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat82, numberFormat84);
        java.lang.Class<?> wildcardClass87 = properFractionFormat86.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = numberFormat7.format((java.lang.Object) properFractionFormat86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1L + "'", obj16, 1L);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 0 / 1" + "'", str61, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1 0 / 1" + "'", str73, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj2 = fractionFormat0.clone();
        java.text.ParsePosition parsePosition4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = fractionFormat0.parseObject("10 0 / 1", parsePosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.NumberFormat numberFormat53 = properFractionFormat52.getWholeFormat();
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.FieldPosition fieldPosition55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = properFractionFormat2.format((java.lang.Object) properFractionFormat52, stringBuffer54, fieldPosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat53);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.text.ParsePosition parsePosition3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = fractionFormat0.parseObject("1 / 1", parsePosition3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        java.lang.Class<?> wildcardClass10 = properFractionFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat7.getNumeratorFormat();
        properFractionFormat4.setDenominatorFormat(numberFormat13);
        java.lang.Class<?> wildcardClass15 = properFractionFormat4.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator34 = properFractionFormat30.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj35 = properFractionFormat30.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = properFractionFormat16.format(obj35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator34);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat25.clone();
        java.lang.Object obj28 = properFractionFormat25.clone();
        java.text.ParsePosition parsePosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat25.parse("1 / 1", parsePosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getDenominatorFormat();
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat0.setDenominatorFormat(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        properFractionFormat21.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        properFractionFormat34.setWholeFormat(numberFormat36);
        properFractionFormat21.setWholeFormat(numberFormat36);
        java.lang.String str40 = numberFormat36.format((java.lang.Object) (short) 10);
        properFractionFormat16.setNumeratorFormat(numberFormat36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = properFractionFormat16.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        java.lang.Class<?> wildcardClass49 = numberFormat34.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getDenominatorFormat();
        fractionFormat48.setDenominatorFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat63 = properFractionFormat60.getWholeFormat();
        java.text.NumberFormat numberFormat64 = properFractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat55, numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat68.getDenominatorFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat68.parse("-1 0 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator76 = numberFormat55.formatToCharacterIterator((java.lang.Object) fraction75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fraction75);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("10 / 1");
        java.text.ParsePosition parsePosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat2.parse("1", parsePosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fraction10);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        java.lang.StringBuffer stringBuffer24 = null;
        java.text.FieldPosition fieldPosition25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = fractionFormat0.format((java.lang.Object) fractionFormat12, stringBuffer24, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        properFractionFormat19.setWholeFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        properFractionFormat32.setWholeFormat(numberFormat34);
        properFractionFormat19.setWholeFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        fractionFormat37.setDenominatorFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        fractionFormat37.setDenominatorFormat(numberFormat47);
        java.text.NumberFormat numberFormat49 = fractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction51 = fractionFormat37.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat52 = fractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat56.getNumeratorFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat56.getWholeFormat();
        properFractionFormat53.setDenominatorFormat(numberFormat62);
        properFractionFormat19.setWholeFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat68.getDenominatorFormat();
        fractionFormat65.setDenominatorFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.lang.String str79 = properFractionFormat77.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat80 = properFractionFormat77.getWholeFormat();
        java.text.NumberFormat numberFormat81 = properFractionFormat77.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62, numberFormat72, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat83.parse("10 / 1");
        java.lang.StringBuffer stringBuffer86 = null;
        java.text.FieldPosition fieldPosition87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = properFractionFormat2.format(fraction85, stringBuffer86, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1 0 / 1" + "'", str79, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fraction85);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj9 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat2.parseObject("1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        java.text.NumberFormat numberFormat93 = properFractionFormat23.getWholeFormat();
        java.lang.Object obj94 = null;
        java.lang.StringBuffer stringBuffer95 = null;
        java.text.FieldPosition fieldPosition96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer97 = properFractionFormat23.format(obj94, stringBuffer95, fieldPosition96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(numberFormat93);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.lang.Object obj38 = properFractionFormat36.parseObject("10");
        java.text.ParsePosition parsePosition40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = properFractionFormat36.parseObject("10", parsePosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.lang.Object obj4 = numberFormat3.clone();
        fractionFormat0.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        java.lang.Object obj14 = numberFormat13.clone();
        java.text.NumberFormat numberFormat15 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat13, numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat17);
        java.lang.Object obj20 = numberFormat17.parseObject("-1 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1L) + "'", obj20, (-1L));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        java.lang.Object obj25 = numberFormat22.parseObject("1 / 1");
        java.text.NumberFormat numberFormat26 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = properFractionFormat29.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj34 = properFractionFormat29.clone();
        java.lang.Object obj35 = properFractionFormat29.clone();
        java.text.NumberFormat numberFormat36 = properFractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat26, numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat40.getWholeFormat();
        java.lang.Object obj48 = numberFormat46.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getNumeratorFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat51.getWholeFormat();
        java.lang.Object obj59 = numberFormat57.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat46, numberFormat57);
        properFractionFormat2.setNumeratorFormat(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 1L + "'", obj25, 1L);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + (-1L) + "'", obj48, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + (-1L) + "'", obj59, (-1L));
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat9.getDenominatorFormat();
        fractionFormat6.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = fractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction30 = fractionFormat16.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat31 = fractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getNumeratorFormat();
        properFractionFormat32.setDenominatorFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = properFractionFormat32.getDenominatorFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat32.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        fractionFormat42.setDenominatorFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        fractionFormat42.setDenominatorFormat(numberFormat52);
        java.text.NumberFormat numberFormat54 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction56 = fractionFormat42.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat57 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.lang.String str63 = properFractionFormat61.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat64 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat61.getNumeratorFormat();
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat61.getWholeFormat();
        properFractionFormat58.setDenominatorFormat(numberFormat67);
        java.text.NumberFormat numberFormat69 = properFractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat41, numberFormat69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        fractionFormat71.setDenominatorFormat(numberFormat73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.lang.String str80 = properFractionFormat78.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat81 = properFractionFormat78.getWholeFormat();
        fractionFormat71.setDenominatorFormat(numberFormat81);
        java.text.NumberFormat numberFormat83 = fractionFormat71.getNumeratorFormat();
        java.text.NumberFormat numberFormat84 = fractionFormat71.getNumeratorFormat();
        java.text.NumberFormat numberFormat85 = fractionFormat71.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat87 = fractionFormat86.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat85, numberFormat87);
        properFractionFormat2.setDenominatorFormat(numberFormat85);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1 0 / 1" + "'", str63, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-1 0 / 1" + "'", str80, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(fractionFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        properFractionFormat21.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        properFractionFormat34.setWholeFormat(numberFormat36);
        properFractionFormat21.setWholeFormat(numberFormat36);
        java.lang.String str40 = numberFormat36.format((java.lang.Object) (short) 10);
        properFractionFormat16.setNumeratorFormat(numberFormat36);
        java.text.ParsePosition parsePosition43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat16.parse("", parsePosition43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        java.lang.Object obj96 = numberFormat94.parseObject("10");
        properFractionFormat23.setNumeratorFormat(numberFormat94);
        java.text.NumberFormat numberFormat98 = properFractionFormat23.getNumeratorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + 10L + "'", obj96, 10L);
        org.junit.Assert.assertNotNull(numberFormat98);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        fractionFormat49.setDenominatorFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        fractionFormat49.setDenominatorFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat49.parse("-1 0 / 1");
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        java.lang.StringBuffer stringBuffer66 = null;
        java.text.FieldPosition fieldPosition67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer68 = properFractionFormat2.format(fraction63, stringBuffer66, fieldPosition67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 / 1" + "'", str64, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 / 1" + "'", str65, "-1 / 1");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.ParsePosition parsePosition19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = properFractionFormat16.parseObject("hi!", parsePosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        properFractionFormat21.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        properFractionFormat34.setWholeFormat(numberFormat36);
        properFractionFormat21.setWholeFormat(numberFormat36);
        java.lang.String str40 = numberFormat36.format((java.lang.Object) (short) 10);
        properFractionFormat16.setNumeratorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        java.text.NumberFormat numberFormat58 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat53.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat53.parse("10 / 1");
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.FieldPosition fieldPosition63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = properFractionFormat16.format(fraction61, stringBuffer62, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat9.formatToCharacterIterator(obj10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatToCharacterIterator must be passed non-null object");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj3 = numberFormat1.parseObject("10");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = properFractionFormat4.format((java.lang.Object) "10 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 10L + "'", obj3, 10L);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.lang.Object obj80 = numberFormat76.clone();
        properFractionFormat74.setWholeFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.text.NumberFormat numberFormat85 = properFractionFormat84.getWholeFormat();
        java.lang.String str87 = properFractionFormat84.format((java.lang.Object) (-1.0f));
        java.text.NumberFormat numberFormat88 = properFractionFormat84.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator89 = properFractionFormat74.formatToCharacterIterator((java.lang.Object) properFractionFormat84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1 0 / 1" + "'", str87, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat88);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getNumeratorFormat();
        java.lang.Object obj19 = numberFormat17.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        java.lang.String str34 = numberFormat32.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        properFractionFormat37.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        properFractionFormat50.setWholeFormat(numberFormat52);
        properFractionFormat37.setWholeFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.text.NumberFormat numberFormat67 = fractionFormat55.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction69 = fractionFormat55.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat70 = fractionFormat55.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.lang.String str76 = properFractionFormat74.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat77 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat78 = properFractionFormat74.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat74.getWholeFormat();
        properFractionFormat71.setDenominatorFormat(numberFormat80);
        properFractionFormat37.setWholeFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat32, numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat86 = fractionFormat85.getDenominatorFormat();
        properFractionFormat84.setNumeratorFormat(numberFormat86);
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat89 = fractionFormat88.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat89);
        java.lang.String str92 = properFractionFormat90.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat93 = properFractionFormat90.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat86, numberFormat93);
        java.lang.Object obj95 = numberFormat86.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + 1L + "'", obj19, 1L);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1 0 / 1" + "'", str76, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(fractionFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-1 0 / 1" + "'", str92, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        properFractionFormat17.setWholeFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        java.text.NumberFormat numberFormat28 = properFractionFormat24.getDenominatorFormat();
        fractionFormat21.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat19, numberFormat28);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) numberFormat28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat2.parse("hi!", parsePosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        java.lang.Class<?> wildcardClass10 = numberFormat9.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Class<?> wildcardClass8 = numberFormat7.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat48.parse("1");
        java.text.NumberFormat numberFormat51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat48.setDenominatorFormat(numberFormat51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction50);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.lang.Object obj38 = properFractionFormat36.parseObject("10");
        java.text.ParsePosition parsePosition40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat36.parse("hi!", parsePosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj3 = fractionFormat0.clone();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Class<?> wildcardClass5 = properFractionFormat4.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.lang.Object obj24 = numberFormat21.parseObject("1 / 1");
        java.text.NumberFormat numberFormat25 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat28.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj33 = properFractionFormat28.clone();
        java.lang.Object obj34 = properFractionFormat28.clone();
        java.text.NumberFormat numberFormat35 = properFractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat25, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getDenominatorFormat();
        java.lang.Object obj38 = properFractionFormat36.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator39 = properFractionFormat2.formatToCharacterIterator(obj38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 1L + "'", obj24, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = properFractionFormat0.getDenominatorFormat();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = properFractionFormat0.parseObject("", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.lang.String str5 = properFractionFormat2.format((java.lang.Object) (-1.0f));
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.lang.Object obj14 = numberFormat12.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        fractionFormat15.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.String str24 = properFractionFormat22.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat25 = properFractionFormat22.getWholeFormat();
        fractionFormat15.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = fractionFormat15.getNumeratorFormat();
        java.lang.String str29 = numberFormat27.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat32.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        properFractionFormat32.setWholeFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        properFractionFormat45.setWholeFormat(numberFormat47);
        properFractionFormat32.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        fractionFormat50.setDenominatorFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.lang.String str59 = properFractionFormat57.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat60 = properFractionFormat57.getWholeFormat();
        fractionFormat50.setDenominatorFormat(numberFormat60);
        java.text.NumberFormat numberFormat62 = fractionFormat50.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction64 = fractionFormat50.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat65 = fractionFormat50.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat69.getWholeFormat();
        properFractionFormat66.setDenominatorFormat(numberFormat75);
        properFractionFormat32.setWholeFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat27, numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        properFractionFormat79.setNumeratorFormat(numberFormat81);
        java.lang.Object obj84 = properFractionFormat79.parseObject("1");
        java.lang.Class<?> wildcardClass85 = properFractionFormat79.getClass();
        java.lang.StringBuffer stringBuffer86 = null;
        java.text.FieldPosition fieldPosition87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = properFractionFormat2.format((java.lang.Object) properFractionFormat79, stringBuffer86, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 1L + "'", obj14, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1 0 / 1" + "'", str24, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 0 / 1" + "'", str59, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.Fraction fraction19 = null;
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.FieldPosition fieldPosition21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat16.format(fraction19, stringBuffer20, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat19.getNumeratorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat32);
        java.text.ParsePosition parsePosition35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat16.parse("1", parsePosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        java.lang.Object obj87 = properFractionFormat85.parseObject("10 / 1");
        java.text.NumberFormat numberFormat88 = properFractionFormat85.getDenominatorFormat();
        java.text.ParsePosition parsePosition90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = properFractionFormat85.parseObject("-1 0 / 1", parsePosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertNotNull(numberFormat88);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat3.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        java.lang.Object obj18 = numberFormat17.clone();
        java.text.NumberFormat numberFormat19 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat17, numberFormat19);
        java.text.NumberFormat numberFormat21 = properFractionFormat20.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator22 = numberFormat9.formatToCharacterIterator((java.lang.Object) properFractionFormat20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        java.lang.Object obj5 = fractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        fractionFormat6.setDenominatorFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        fractionFormat6.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = fractionFormat6.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat6.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat21 = fractionFormat6.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator23 = fractionFormat0.formatToCharacterIterator((java.lang.Object) properFractionFormat22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat16 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.lang.Object obj30 = numberFormat27.parseObject("1 / 1");
        java.text.NumberFormat numberFormat31 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator38 = properFractionFormat34.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj39 = properFractionFormat34.clone();
        java.lang.Object obj40 = properFractionFormat34.clone();
        java.text.NumberFormat numberFormat41 = properFractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat31, numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat48 = properFractionFormat45.getWholeFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat45.getNumeratorFormat();
        java.text.NumberFormat numberFormat50 = properFractionFormat45.getWholeFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat45.getWholeFormat();
        java.lang.Object obj53 = numberFormat51.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat56.getNumeratorFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat56.getWholeFormat();
        java.lang.Object obj64 = numberFormat62.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat51, numberFormat62);
        properFractionFormat2.setNumeratorFormat(numberFormat51);
        java.text.ParsePosition parsePosition68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat2.parse("", parsePosition68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + 1L + "'", obj30, 1L);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + (-1L) + "'", obj53, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + (-1L) + "'", obj64, (-1L));
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = numberFormat10.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = properFractionFormat2.parseObject("-1 / 1", parsePosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction31 = fractionFormat17.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat32 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        properFractionFormat33.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = properFractionFormat33.getDenominatorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = numberFormat41.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj10 = null;
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.FieldPosition fieldPosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer13 = properFractionFormat2.format(obj10, stringBuffer11, fieldPosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.lang.Object obj27 = numberFormat24.parseObject("1 / 1");
        java.text.NumberFormat numberFormat28 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator35 = properFractionFormat31.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj36 = properFractionFormat31.clone();
        java.lang.Object obj37 = properFractionFormat31.clone();
        java.text.NumberFormat numberFormat38 = properFractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat13, numberFormat38);
        java.lang.Object obj41 = properFractionFormat40.clone();
        java.lang.StringBuffer stringBuffer43 = null;
        java.text.FieldPosition fieldPosition44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer45 = properFractionFormat40.format((java.lang.Object) false, stringBuffer43, fieldPosition44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 1L + "'", obj27, 1L);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Object obj8 = numberFormat7.clone();
        java.text.NumberFormat numberFormat9 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat7, numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        properFractionFormat21.setWholeFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getDenominatorFormat();
        fractionFormat25.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat23, numberFormat32);
        java.lang.Object obj36 = numberFormat23.clone();
        fractionFormat11.setDenominatorFormat(numberFormat23);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator38 = numberFormat5.formatToCharacterIterator((java.lang.Object) fractionFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.lang.String str5 = properFractionFormat2.format((java.lang.Object) (-1.0f));
        java.text.ParsePosition parsePosition7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = properFractionFormat2.parseObject("-1 / 1", parsePosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat21.getNumeratorFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat27.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.FieldPosition fieldPosition33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = properFractionFormat16.format((java.lang.Object) numberFormat31, stringBuffer32, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.Class<?> wildcardClass11 = properFractionFormat10.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = fractionFormat0.parseObject("", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getDenominatorFormat();
        java.text.ParsePosition parsePosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = properFractionFormat16.parseObject("", parsePosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = properFractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat50 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat47.getNumeratorFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat47.getWholeFormat();
        java.lang.Object obj55 = numberFormat53.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.lang.String str60 = properFractionFormat58.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat61 = properFractionFormat58.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat58.getNumeratorFormat();
        java.text.NumberFormat numberFormat63 = properFractionFormat58.getWholeFormat();
        java.text.NumberFormat numberFormat64 = properFractionFormat58.getWholeFormat();
        java.lang.Object obj66 = numberFormat64.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat53, numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.Object obj70 = properFractionFormat68.parseObject("10 0 / 1");
        java.text.AttributedCharacterIterator attributedCharacterIterator71 = properFractionFormat0.formatToCharacterIterator(obj70);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + (-1L) + "'", obj55, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1 0 / 1" + "'", str60, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + (-1L) + "'", obj66, (-1L));
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(attributedCharacterIterator71);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.lang.Class<?> wildcardClass18 = properFractionFormat16.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat7.getNumeratorFormat();
        properFractionFormat4.setDenominatorFormat(numberFormat13);
        java.lang.Object obj15 = properFractionFormat4.clone();
        java.text.ParsePosition parsePosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction18 = properFractionFormat4.parse("10", parsePosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.lang.Object obj2 = numberFormat1.clone();
        java.lang.Object obj4 = numberFormat1.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction8 = properFractionFormat5.parse("10 0 / 1", parsePosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1L + "'", obj4, 1L);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        properFractionFormat10.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat17.getDenominatorFormat();
        fractionFormat14.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat12, numberFormat21);
        java.lang.Object obj25 = numberFormat12.clone();
        fractionFormat0.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        properFractionFormat29.setWholeFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        properFractionFormat42.setWholeFormat(numberFormat44);
        properFractionFormat29.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat66.getWholeFormat();
        properFractionFormat63.setDenominatorFormat(numberFormat72);
        properFractionFormat29.setWholeFormat(numberFormat72);
        java.text.NumberFormat numberFormat75 = properFractionFormat29.getWholeFormat();
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.FieldPosition fieldPosition77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = fractionFormat0.format((java.lang.Object) numberFormat75, stringBuffer76, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat9.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat17 = properFractionFormat9.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.FieldPosition fieldPosition19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer20 = properFractionFormat6.format((java.lang.Object) numberFormat17, stringBuffer18, fieldPosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        properFractionFormat78.setWholeFormat(numberFormat80);
        java.lang.StringBuffer stringBuffer82 = null;
        java.text.FieldPosition fieldPosition83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer84 = properFractionFormat74.format((java.lang.Object) properFractionFormat78, stringBuffer82, fieldPosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat2.parse("10 0 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat2.parse("10 / 1", parsePosition49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.lang.String str54 = properFractionFormat52.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat55 = properFractionFormat52.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat52.getNumeratorFormat();
        java.lang.Object obj58 = numberFormat56.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat66 = fractionFormat65.getDenominatorFormat();
        properFractionFormat64.setWholeFormat(numberFormat66);
        fractionFormat60.setNumeratorFormat(numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        properFractionFormat59.setDenominatorFormat(numberFormat66);
        properFractionFormat2.setDenominatorFormat(numberFormat66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        fractionFormat72.setDenominatorFormat(numberFormat74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat78 = fractionFormat77.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        java.lang.String str81 = properFractionFormat79.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat82 = properFractionFormat79.getWholeFormat();
        fractionFormat72.setDenominatorFormat(numberFormat82);
        java.text.NumberFormat numberFormat84 = fractionFormat72.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction86 = fractionFormat72.parse("-1 0 / 1");
        java.lang.String str87 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction86);
        java.lang.String str88 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction86);
        java.lang.StringBuffer stringBuffer89 = null;
        java.text.FieldPosition fieldPosition90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer91 = properFractionFormat2.format(fraction86, stringBuffer89, fieldPosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 0 / 1" + "'", str54, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 1L + "'", obj58, 1L);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-1 0 / 1" + "'", str81, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1 / 1" + "'", str87, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-1 / 1" + "'", str88, "-1 / 1");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = properFractionFormat16.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat19.getNumeratorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat41.getDenominatorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat41.getNumeratorFormat();
        properFractionFormat38.setDenominatorFormat(numberFormat47);
        properFractionFormat16.setNumeratorFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.lang.String str54 = properFractionFormat52.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat55 = properFractionFormat52.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        properFractionFormat52.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        properFractionFormat65.setWholeFormat(numberFormat67);
        properFractionFormat52.setWholeFormat(numberFormat67);
        java.lang.String str71 = numberFormat67.format((java.lang.Object) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator72 = properFractionFormat16.formatToCharacterIterator((java.lang.Object) numberFormat67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 0 / 1" + "'", str54, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "10" + "'", str71, "10");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getDenominatorFormat();
        fractionFormat10.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat29, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat63.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat29, numberFormat65);
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = numberFormat9.formatToCharacterIterator((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getNumeratorFormat();
        java.lang.Object obj20 = numberFormat18.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat21.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator23 = numberFormat6.formatToCharacterIterator((java.lang.Object) properFractionFormat21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + 1L + "'", obj20, 1L);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.lang.Object obj11 = numberFormat10.clone();
        fractionFormat7.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.lang.String str17 = properFractionFormat15.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat18 = properFractionFormat15.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        java.lang.Object obj21 = numberFormat20.clone();
        java.text.NumberFormat numberFormat22 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat20, numberFormat22);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getNumeratorFormat();
        fractionFormat7.setDenominatorFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        fractionFormat7.setDenominatorFormat(numberFormat33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = properFractionFormat2.format((java.lang.Object) numberFormat33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1 0 / 1" + "'", str17, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getDenominatorFormat();
        properFractionFormat72.setDenominatorFormat(numberFormat79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction82 = properFractionFormat72.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        java.lang.Object obj87 = properFractionFormat85.parseObject("10 / 1");
        java.lang.Object obj89 = properFractionFormat85.parseObject("-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat25.clone();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat0.parse("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat24.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        fractionFormat24.setDenominatorFormat(numberFormat34);
        java.text.NumberFormat numberFormat36 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction38 = fractionFormat24.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat39 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.lang.String str44 = properFractionFormat42.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat45 = properFractionFormat42.getWholeFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        properFractionFormat42.setWholeFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        fractionFormat54.setDenominatorFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.lang.String str63 = properFractionFormat61.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat64 = properFractionFormat61.getWholeFormat();
        fractionFormat54.setDenominatorFormat(numberFormat64);
        java.lang.Object obj67 = numberFormat64.parseObject("1 / 1");
        java.text.NumberFormat numberFormat68 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat70 = fractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.lang.String str73 = properFractionFormat71.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator75 = properFractionFormat71.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj76 = properFractionFormat71.clone();
        java.lang.Object obj77 = properFractionFormat71.clone();
        java.text.NumberFormat numberFormat78 = properFractionFormat71.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64, numberFormat68, numberFormat78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48, numberFormat53, numberFormat78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat39, numberFormat78);
        fractionFormat0.setDenominatorFormat(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1 0 / 1" + "'", str44, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1 0 / 1" + "'", str63, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + 1L + "'", obj67, 1L);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1 0 / 1" + "'", str73, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat27.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        properFractionFormat27.setWholeFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        fractionFormat39.setDenominatorFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str48 = properFractionFormat46.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat49 = properFractionFormat46.getWholeFormat();
        fractionFormat39.setDenominatorFormat(numberFormat49);
        java.lang.Object obj52 = numberFormat49.parseObject("1 / 1");
        java.text.NumberFormat numberFormat53 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator60 = properFractionFormat56.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj61 = properFractionFormat56.clone();
        java.lang.Object obj62 = properFractionFormat56.clone();
        java.text.NumberFormat numberFormat63 = properFractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat53, numberFormat63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat38, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = properFractionFormat68.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj73 = properFractionFormat68.clone();
        java.text.NumberFormat numberFormat74 = properFractionFormat68.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat33, numberFormat74);
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat75.parse("-1 0 / 1");
        java.lang.String str78 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction77);
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.FieldPosition fieldPosition80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = properFractionFormat2.format(fraction77, stringBuffer79, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1 0 / 1" + "'", str48, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 1L + "'", obj52, 1L);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1 / 1" + "'", str78, "-1 / 1");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        properFractionFormat21.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.lang.Object obj46 = numberFormat43.parseObject("1 / 1");
        java.text.NumberFormat numberFormat47 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator54 = properFractionFormat50.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj55 = properFractionFormat50.clone();
        java.lang.Object obj56 = properFractionFormat50.clone();
        java.text.NumberFormat numberFormat57 = properFractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat47, numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator66 = properFractionFormat62.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj67 = properFractionFormat62.clone();
        java.text.NumberFormat numberFormat68 = properFractionFormat62.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat27, numberFormat68);
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.FieldPosition fieldPosition71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer72 = properFractionFormat13.format((java.lang.Object) numberFormat68, stringBuffer70, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + 1L + "'", obj46, 1L);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        properFractionFormat29.setWholeFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        properFractionFormat42.setWholeFormat(numberFormat44);
        properFractionFormat29.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat66.getWholeFormat();
        properFractionFormat63.setDenominatorFormat(numberFormat72);
        properFractionFormat29.setWholeFormat(numberFormat72);
        java.text.NumberFormat numberFormat75 = properFractionFormat29.getWholeFormat();
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.FieldPosition fieldPosition77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = properFractionFormat16.format((java.lang.Object) numberFormat75, stringBuffer76, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        java.text.ParsePosition parsePosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = properFractionFormat36.parseObject("10", parsePosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        java.lang.Object obj13 = properFractionFormat11.clone();
        java.text.ParsePosition parsePosition15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = properFractionFormat11.parseObject("-1 / 1", parsePosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getDenominatorFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat12.getDenominatorFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat12.getWholeFormat();
        java.lang.Object obj21 = numberFormat19.parseObject("1 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = properFractionFormat2.format((java.lang.Object) numberFormat19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + 1L + "'", obj21, 1L);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        java.lang.Object obj16 = numberFormat15.clone();
        fractionFormat12.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        fractionFormat18.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.lang.String str27 = properFractionFormat25.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat28 = properFractionFormat25.getWholeFormat();
        fractionFormat18.setDenominatorFormat(numberFormat28);
        java.lang.Object obj31 = numberFormat28.parseObject("1 / 1");
        java.text.NumberFormat numberFormat32 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator39 = properFractionFormat35.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj40 = properFractionFormat35.clone();
        java.lang.Object obj41 = properFractionFormat35.clone();
        java.text.NumberFormat numberFormat42 = properFractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat32, numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat15, numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat47.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat52 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat47.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.FieldPosition fieldPosition55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = properFractionFormat44.format((java.lang.Object) properFractionFormat47, stringBuffer54, fieldPosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 0 / 1" + "'", str27, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 1L + "'", obj31, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = numberFormat69.format((java.lang.Object) properFractionFormat77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        properFractionFormat14.setWholeFormat(numberFormat16);
        fractionFormat10.setNumeratorFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        properFractionFormat9.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.String str26 = properFractionFormat23.format((java.lang.Object) (-1.0f));
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = properFractionFormat9.format((java.lang.Object) numberFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getWholeFormat();
        java.text.ParsePosition parsePosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = properFractionFormat16.parseObject("", parsePosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getNumeratorFormat();
        java.lang.Object obj20 = numberFormat18.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        fractionFormat21.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        fractionFormat21.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = fractionFormat21.getNumeratorFormat();
        java.lang.String str35 = numberFormat33.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat38.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        properFractionFormat38.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        properFractionFormat51.setWholeFormat(numberFormat53);
        properFractionFormat38.setWholeFormat(numberFormat53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        fractionFormat56.setDenominatorFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        fractionFormat56.setDenominatorFormat(numberFormat66);
        java.text.NumberFormat numberFormat68 = fractionFormat56.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction70 = fractionFormat56.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat71 = fractionFormat56.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getNumeratorFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat81 = properFractionFormat75.getWholeFormat();
        properFractionFormat72.setDenominatorFormat(numberFormat81);
        properFractionFormat38.setWholeFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat33, numberFormat81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat86 = fractionFormat85.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat88 = fractionFormat87.getDenominatorFormat();
        java.lang.Object obj89 = numberFormat88.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat86, numberFormat88);
        properFractionFormat2.setWholeFormat(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + 1L + "'", obj20, 1L);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        java.text.ParsePosition parsePosition74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = properFractionFormat72.parseObject("-1 / 1", parsePosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat2.parse("-1 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.String str6 = properFractionFormat4.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat7 = properFractionFormat4.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat4.getNumeratorFormat();
        java.lang.Object obj10 = numberFormat8.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat11.getNumeratorFormat();
        java.lang.String str25 = numberFormat23.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        properFractionFormat28.setWholeFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        properFractionFormat41.setWholeFormat(numberFormat43);
        properFractionFormat28.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        fractionFormat46.setDenominatorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        fractionFormat46.setDenominatorFormat(numberFormat56);
        java.text.NumberFormat numberFormat58 = fractionFormat46.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat46.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat61 = fractionFormat46.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.lang.String str67 = properFractionFormat65.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat68 = properFractionFormat65.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat65.getWholeFormat();
        java.text.NumberFormat numberFormat71 = properFractionFormat65.getWholeFormat();
        properFractionFormat62.setDenominatorFormat(numberFormat71);
        properFractionFormat28.setWholeFormat(numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat23, numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        properFractionFormat75.setNumeratorFormat(numberFormat77);
        java.lang.Object obj80 = properFractionFormat75.parseObject("1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = fractionFormat0.format((java.lang.Object) "1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1 0 / 1" + "'", str6, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1L + "'", obj10, 1L);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1 0 / 1" + "'", str67, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        java.lang.Object obj96 = numberFormat94.parseObject("10");
        properFractionFormat23.setNumeratorFormat(numberFormat94);
        java.lang.Object obj99 = numberFormat94.parseObject("10 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + 10L + "'", obj96, 10L);
        org.junit.Assert.assertEquals("'" + obj99 + "' != '" + 10L + "'", obj99, 10L);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getDenominatorFormat();
        fractionFormat5.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.lang.Object obj27 = numberFormat24.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat28.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        fractionFormat28.setDenominatorFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = fractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat24, numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Object obj43 = fractionFormat42.clone();
        java.text.NumberFormat numberFormat44 = fractionFormat42.getDenominatorFormat();
        properFractionFormat41.setNumeratorFormat(numberFormat44);
        java.lang.StringBuffer stringBuffer46 = null;
        java.text.FieldPosition fieldPosition47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer48 = properFractionFormat2.format((java.lang.Object) properFractionFormat41, stringBuffer46, fieldPosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 1L + "'", obj27, 1L);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(numberFormat44);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getDenominatorFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat51.getWholeFormat();
        java.lang.Object obj58 = properFractionFormat51.clone();
        org.apache.commons.math.fraction.Fraction fraction60 = properFractionFormat51.parse("10");
        java.lang.String str61 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.FieldPosition fieldPosition63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = properFractionFormat2.format(fraction60, stringBuffer62, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "10 / 1" + "'", str61, "10 / 1");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj11 = properFractionFormat2.parseObject("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat14.parse("10 0 / 1");
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.FieldPosition fieldPosition21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat2.format(fraction16, stringBuffer20, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10 / 1" + "'", str17, "10 / 1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10 / 1" + "'", str18, "10 / 1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10 / 1" + "'", str19, "10 / 1");
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.lang.String str63 = properFractionFormat61.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat64 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat61.getDenominatorFormat();
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat61.parse("10 / 1");
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.FieldPosition fieldPosition71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer72 = properFractionFormat55.format(fraction69, stringBuffer70, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1 0 / 1" + "'", str63, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fraction69);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator5 = properFractionFormat2.formatToCharacterIterator(obj4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        java.text.ParsePosition parsePosition94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj95 = properFractionFormat23.parseObject("10 / 1", parsePosition94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat19.getNumeratorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat41.getDenominatorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat41.getNumeratorFormat();
        properFractionFormat38.setDenominatorFormat(numberFormat47);
        properFractionFormat16.setNumeratorFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        fractionFormat50.setDenominatorFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.lang.String str59 = properFractionFormat57.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat60 = properFractionFormat57.getWholeFormat();
        fractionFormat50.setDenominatorFormat(numberFormat60);
        java.lang.Object obj63 = numberFormat60.parseObject("1 / 1");
        java.text.NumberFormat numberFormat64 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat66 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.lang.String str69 = properFractionFormat67.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator71 = properFractionFormat67.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj72 = properFractionFormat67.clone();
        java.lang.Object obj73 = properFractionFormat67.clone();
        java.text.NumberFormat numberFormat74 = properFractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60, numberFormat64, numberFormat74);
        java.text.NumberFormat numberFormat76 = properFractionFormat75.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator77 = properFractionFormat16.formatToCharacterIterator((java.lang.Object) numberFormat76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 0 / 1" + "'", str59, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + 1L + "'", obj63, 1L);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1 0 / 1" + "'", str69, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat76);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        properFractionFormat69.setWholeFormat(numberFormat71);
        fractionFormat65.setNumeratorFormat(numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.NumberFormat numberFormat78 = properFractionFormat77.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        java.lang.Object obj83 = numberFormat82.clone();
        fractionFormat79.setDenominatorFormat(numberFormat82);
        properFractionFormat77.setWholeFormat(numberFormat82);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat71, numberFormat82);
        java.lang.Class<?> wildcardClass87 = numberFormat82.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        properFractionFormat8.setNumeratorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = properFractionFormat8.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = properFractionFormat4.format((java.lang.Object) numberFormat22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        properFractionFormat78.setWholeFormat(numberFormat80);
        fractionFormat74.setNumeratorFormat(numberFormat80);
        org.apache.commons.math.fraction.Fraction fraction84 = fractionFormat74.parse("-1 / 1");
        java.lang.StringBuffer stringBuffer85 = null;
        java.text.FieldPosition fieldPosition86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer87 = properFractionFormat73.format(fraction84, stringBuffer85, fieldPosition86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fraction84);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.Object obj8 = properFractionFormat6.parseObject("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getDenominatorFormat();
        fractionFormat9.setDenominatorFormat(numberFormat16);
        properFractionFormat6.setDenominatorFormat(numberFormat16);
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = properFractionFormat6.parseObject("1 / 1", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.String str8 = properFractionFormat6.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat9 = properFractionFormat6.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat6.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        properFractionFormat6.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        properFractionFormat19.setWholeFormat(numberFormat21);
        properFractionFormat6.setWholeFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat24.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        fractionFormat24.setDenominatorFormat(numberFormat34);
        java.text.NumberFormat numberFormat36 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction38 = fractionFormat24.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat39 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat43.getWholeFormat();
        properFractionFormat40.setDenominatorFormat(numberFormat49);
        properFractionFormat6.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        fractionFormat52.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.lang.String str61 = properFractionFormat59.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        fractionFormat52.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat52.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat67 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.NumberFormat numberFormat69 = properFractionFormat68.getWholeFormat();
        java.lang.Object obj70 = properFractionFormat68.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat72 = fractionFormat71.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.lang.String str75 = properFractionFormat73.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat76 = properFractionFormat73.getWholeFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat73.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        properFractionFormat73.setWholeFormat(numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat88 = fractionFormat87.getDenominatorFormat();
        properFractionFormat86.setWholeFormat(numberFormat88);
        properFractionFormat73.setWholeFormat(numberFormat88);
        java.lang.String str92 = numberFormat88.format((java.lang.Object) (short) 10);
        properFractionFormat68.setNumeratorFormat(numberFormat88);
        properFractionFormat6.setNumeratorFormat(numberFormat88);
        fractionFormat3.setDenominatorFormat(numberFormat88);
        properFractionFormat0.setDenominatorFormat(numberFormat88);
        java.text.ParsePosition parsePosition98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = properFractionFormat0.parseObject("1 / 1", parsePosition98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 0 / 1" + "'", str8, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 0 / 1" + "'", str61, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1 0 / 1" + "'", str75, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10" + "'", str92, "10");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        properFractionFormat20.setWholeFormat(numberFormat22);
        properFractionFormat7.setWholeFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        fractionFormat25.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        fractionFormat25.setDenominatorFormat(numberFormat35);
        java.text.NumberFormat numberFormat37 = fractionFormat25.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction39 = fractionFormat25.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat40 = fractionFormat25.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat50 = properFractionFormat44.getWholeFormat();
        properFractionFormat41.setDenominatorFormat(numberFormat50);
        properFractionFormat7.setWholeFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat56.getDenominatorFormat();
        fractionFormat53.setDenominatorFormat(numberFormat60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.lang.String str67 = properFractionFormat65.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat68 = properFractionFormat65.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50, numberFormat60, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat71.parse("10 / 1");
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.FieldPosition fieldPosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = properFractionFormat4.format((java.lang.Object) "10 / 1", stringBuffer74, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1 0 / 1" + "'", str67, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fraction73);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        java.lang.Object obj9 = fractionFormat0.clone();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = fractionFormat0.parseObject("-1 0 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat16.parse("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        java.lang.Object obj38 = properFractionFormat36.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat41.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        properFractionFormat41.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        properFractionFormat54.setWholeFormat(numberFormat56);
        properFractionFormat41.setWholeFormat(numberFormat56);
        java.lang.String str60 = numberFormat56.format((java.lang.Object) (short) 10);
        properFractionFormat36.setNumeratorFormat(numberFormat56);
        java.lang.Class<?> wildcardClass62 = properFractionFormat36.getClass();
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.FieldPosition fieldPosition64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = properFractionFormat16.format((java.lang.Object) properFractionFormat36, stringBuffer63, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "10" + "'", str60, "10");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getDenominatorFormat();
        java.lang.Class<?> wildcardClass3 = numberFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        java.text.NumberFormat numberFormat23 = fractionFormat10.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = fractionFormat10.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator25 = numberFormat9.formatToCharacterIterator((java.lang.Object) numberFormat24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat3.parse("10");
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.FieldPosition fieldPosition13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer14 = properFractionFormat3.format((java.lang.Object) 10, stringBuffer12, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fraction10);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        java.lang.Class<?> wildcardClass73 = numberFormat21.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat21.getNumeratorFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator31 = properFractionFormat27.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat32 = properFractionFormat27.getDenominatorFormat();
        java.lang.Object obj34 = properFractionFormat27.parseObject("1 / 1");
        java.text.NumberFormat numberFormat35 = properFractionFormat27.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator36 = properFractionFormat16.formatToCharacterIterator((java.lang.Object) numberFormat35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.String str7 = properFractionFormat5.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat8 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat5.getNumeratorFormat();
        java.lang.Object obj11 = numberFormat9.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat12.getNumeratorFormat();
        java.lang.String str26 = numberFormat24.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        properFractionFormat29.setWholeFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        properFractionFormat42.setWholeFormat(numberFormat44);
        properFractionFormat29.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat66.getWholeFormat();
        properFractionFormat63.setDenominatorFormat(numberFormat72);
        properFractionFormat29.setWholeFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat24, numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.NumberFormat numberFormat78 = properFractionFormat77.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.FieldPosition fieldPosition80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = properFractionFormat0.format((java.lang.Object) properFractionFormat77, stringBuffer79, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1 0 / 1" + "'", str7, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + 1L + "'", obj11, 1L);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        properFractionFormat46.setWholeFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        fractionFormat50.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat48, numberFormat57);
        java.lang.Object obj61 = numberFormat48.clone();
        fractionFormat36.setDenominatorFormat(numberFormat48);
        properFractionFormat23.setNumeratorFormat(numberFormat48);
        java.lang.Class<?> wildcardClass64 = numberFormat48.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat48.parse("1");
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat48.parse("-1", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        java.text.ParsePosition parsePosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = properFractionFormat36.parseObject("1", parsePosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat9.getNumeratorFormat();
        properFractionFormat6.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat20.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = properFractionFormat6.format((java.lang.Object) numberFormat21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getDenominatorFormat();
        properFractionFormat11.setNumeratorFormat(numberFormat23);
        properFractionFormat2.setDenominatorFormat(numberFormat23);
        java.text.ParsePosition parsePosition27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = properFractionFormat2.parseObject("hi!", parsePosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.lang.Object obj4 = numberFormat3.clone();
        fractionFormat0.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        java.lang.Object obj14 = numberFormat13.clone();
        java.text.NumberFormat numberFormat15 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat13, numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat17);
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = fractionFormat0.parseObject("1", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction13 = fractionFormat0.parse("1");
        java.lang.Class<?> wildcardClass14 = fractionFormat0.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        java.text.NumberFormat numberFormat20 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        fractionFormat21.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        fractionFormat21.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction35 = fractionFormat21.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat36 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getNumeratorFormat();
        properFractionFormat37.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = properFractionFormat37.getDenominatorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat47.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat62 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat66.getWholeFormat();
        properFractionFormat63.setDenominatorFormat(numberFormat72);
        java.text.NumberFormat numberFormat74 = properFractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat46, numberFormat74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat78 = fractionFormat77.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        fractionFormat76.setDenominatorFormat(numberFormat78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.lang.String str85 = properFractionFormat83.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat86 = properFractionFormat83.getWholeFormat();
        fractionFormat76.setDenominatorFormat(numberFormat86);
        java.text.NumberFormat numberFormat88 = fractionFormat76.getNumeratorFormat();
        java.text.NumberFormat numberFormat89 = fractionFormat76.getNumeratorFormat();
        java.text.NumberFormat numberFormat90 = fractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat92 = fractionFormat91.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat92);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat92);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat95 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat92);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat96 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat90, numberFormat92);
        properFractionFormat2.setWholeFormat(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1 0 / 1" + "'", str85, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat91);
        org.junit.Assert.assertNotNull(numberFormat92);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        properFractionFormat3.setWholeFormat(numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        properFractionFormat16.setWholeFormat(numberFormat18);
        properFractionFormat3.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        fractionFormat21.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        fractionFormat21.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction35 = fractionFormat21.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat36 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat40.getWholeFormat();
        properFractionFormat37.setDenominatorFormat(numberFormat46);
        properFractionFormat3.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        fractionFormat49.setDenominatorFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        fractionFormat49.setDenominatorFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat49.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat64 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.NumberFormat numberFormat66 = properFractionFormat65.getWholeFormat();
        java.lang.Object obj67 = properFractionFormat65.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat70.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        properFractionFormat70.setWholeFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat85 = fractionFormat84.getDenominatorFormat();
        properFractionFormat83.setWholeFormat(numberFormat85);
        properFractionFormat70.setWholeFormat(numberFormat85);
        java.lang.String str89 = numberFormat85.format((java.lang.Object) (short) 10);
        properFractionFormat65.setNumeratorFormat(numberFormat85);
        properFractionFormat3.setNumeratorFormat(numberFormat85);
        fractionFormat0.setDenominatorFormat(numberFormat85);
        java.lang.Object obj94 = numberFormat85.parseObject("-1 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fractionFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "10" + "'", str89, "10");
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + (-1L) + "'", obj94, (-1L));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Object obj8 = numberFormat7.clone();
        fractionFormat4.setDenominatorFormat(numberFormat7);
        properFractionFormat2.setWholeFormat(numberFormat7);
        java.lang.Object obj12 = numberFormat7.parseObject("-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (-1L) + "'", obj12, (-1L));
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.lang.StringBuffer stringBuffer38 = null;
        java.text.FieldPosition fieldPosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer40 = properFractionFormat36.format((java.lang.Object) (short) 1, stringBuffer38, fieldPosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat25.clone();
        java.lang.Object obj28 = properFractionFormat25.clone();
        java.text.ParsePosition parsePosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat25.parse("-1 / 1", parsePosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        java.lang.Object obj9 = fractionFormat0.clone();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = fractionFormat0.parseObject("1 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        java.lang.Object obj96 = numberFormat94.parseObject("10");
        properFractionFormat23.setNumeratorFormat(numberFormat94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = numberFormat94.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + 10L + "'", obj96, 10L);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        fractionFormat12.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction26 = fractionFormat12.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat27 = fractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        fractionFormat10.setNumeratorFormat(numberFormat29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = numberFormat9.format((java.lang.Object) numberFormat29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("10 / 1");
        java.text.NumberFormat numberFormat11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setDenominatorFormat(numberFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fraction10);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat15);
        java.text.ParsePosition parsePosition18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat2.parse("1 / 1", parsePosition18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat6.parse("-1", parsePosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("-1 0 / 1");
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("10 / 1");
        java.text.ParsePosition parsePosition61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = properFractionFormat55.parseObject("10", parsePosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction59);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction31 = fractionFormat17.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat32 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        properFractionFormat33.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = properFractionFormat33.getDenominatorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat41);
        java.text.NumberFormat numberFormat43 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat43, numberFormat45);
        java.lang.Class<?> wildcardClass47 = numberFormat41.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        fractionFormat13.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        fractionFormat13.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat25 = fractionFormat13.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction27 = fractionFormat13.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat28 = fractionFormat13.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat31.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        properFractionFormat31.setWholeFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        fractionFormat43.setDenominatorFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat53 = properFractionFormat50.getWholeFormat();
        fractionFormat43.setDenominatorFormat(numberFormat53);
        java.lang.Object obj56 = numberFormat53.parseObject("1 / 1");
        java.text.NumberFormat numberFormat57 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator64 = properFractionFormat60.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj65 = properFractionFormat60.clone();
        java.lang.Object obj66 = properFractionFormat60.clone();
        java.text.NumberFormat numberFormat67 = properFractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat57, numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat42, numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat28, numberFormat67);
        java.lang.Object obj72 = properFractionFormat70.parseObject("10 0 / 1");
        java.text.NumberFormat numberFormat73 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat70.setDenominatorFormat(numberFormat73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + 1L + "'", obj56, 1L);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat9.getNumeratorFormat();
        properFractionFormat6.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator30 = properFractionFormat26.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat31 = properFractionFormat26.getDenominatorFormat();
        properFractionFormat19.setNumeratorFormat(numberFormat31);
        java.lang.Object obj34 = properFractionFormat19.parseObject("-1 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = properFractionFormat6.format((java.lang.Object) "-1 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.Object obj77 = properFractionFormat75.parseObject("-1 / 1");
        java.lang.Object obj79 = properFractionFormat75.parseObject("10 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("-1 0 / 1");
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("10 / 1");
        java.lang.String str60 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "10 / 1" + "'", str60, "10 / 1");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.lang.Object obj14 = numberFormat12.parseObject("1 / 1");
        properFractionFormat2.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        properFractionFormat18.setWholeFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.lang.Object obj43 = numberFormat40.parseObject("1 / 1");
        java.text.NumberFormat numberFormat44 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat47.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj52 = properFractionFormat47.clone();
        java.lang.Object obj53 = properFractionFormat47.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat44, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat54);
        properFractionFormat2.setWholeFormat(numberFormat29);
        java.text.NumberFormat numberFormat58 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat2.parse("10 / 1", parsePosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 1L + "'", obj14, 1L);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + 1L + "'", obj43, 1L);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.Object obj8 = properFractionFormat6.parseObject("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getDenominatorFormat();
        fractionFormat9.setDenominatorFormat(numberFormat16);
        properFractionFormat6.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat23.parse("10");
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.FieldPosition fieldPosition32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer33 = properFractionFormat19.format(fraction30, stringBuffer31, fieldPosition32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fraction30);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator25 = numberFormat5.formatToCharacterIterator(obj24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatToCharacterIterator must be passed non-null object");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator34 = properFractionFormat30.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj35 = properFractionFormat30.clone();
        java.lang.Object obj36 = properFractionFormat30.clone();
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat30.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat39 = properFractionFormat30.getDenominatorFormat();
        java.lang.String str41 = properFractionFormat30.format((java.lang.Object) 10L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = properFractionFormat27.format((java.lang.Object) properFractionFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10 0 / 1" + "'", str41, "10 0 / 1");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.lang.Object obj14 = numberFormat12.parseObject("1 / 1");
        properFractionFormat2.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        properFractionFormat18.setWholeFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.lang.Object obj43 = numberFormat40.parseObject("1 / 1");
        java.text.NumberFormat numberFormat44 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat47.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj52 = properFractionFormat47.clone();
        java.lang.Object obj53 = properFractionFormat47.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat44, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat54);
        properFractionFormat2.setWholeFormat(numberFormat29);
        java.text.NumberFormat numberFormat58 = properFractionFormat2.getWholeFormat();
        java.lang.Class<?> wildcardClass59 = properFractionFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 1L + "'", obj14, 1L);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + 1L + "'", obj43, 1L);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat3.parse("10");
        java.text.ParsePosition parsePosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat3.parse("10", parsePosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fraction10);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        properFractionFormat11.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        properFractionFormat24.setWholeFormat(numberFormat26);
        properFractionFormat11.setWholeFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        fractionFormat29.setDenominatorFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat39 = properFractionFormat36.getWholeFormat();
        fractionFormat29.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat29.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat44 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat48.getNumeratorFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        properFractionFormat45.setDenominatorFormat(numberFormat54);
        properFractionFormat11.setWholeFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat63 = properFractionFormat60.getWholeFormat();
        java.text.NumberFormat numberFormat64 = properFractionFormat60.getDenominatorFormat();
        fractionFormat57.setDenominatorFormat(numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54, numberFormat64, numberFormat73);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator75 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) numberFormat73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator9 = numberFormat7.formatToCharacterIterator(obj8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatToCharacterIterator must be passed non-null object");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getNumeratorFormat();
        java.lang.Object obj29 = numberFormat27.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.text.NumberFormat numberFormat42 = fractionFormat30.getNumeratorFormat();
        java.lang.String str44 = numberFormat42.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat50 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        properFractionFormat47.setWholeFormat(numberFormat53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        properFractionFormat60.setWholeFormat(numberFormat62);
        properFractionFormat47.setWholeFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction79 = fractionFormat65.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat80 = fractionFormat65.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat87 = properFractionFormat84.getWholeFormat();
        java.text.NumberFormat numberFormat88 = properFractionFormat84.getNumeratorFormat();
        java.text.NumberFormat numberFormat89 = properFractionFormat84.getWholeFormat();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        properFractionFormat81.setDenominatorFormat(numberFormat90);
        properFractionFormat47.setWholeFormat(numberFormat90);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat42, numberFormat90);
        java.lang.Object obj95 = numberFormat90.parseObject("10 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat96 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat20, numberFormat90);
        java.lang.Object obj98 = numberFormat20.parseObject("1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + 1L + "'", obj29, 1L);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertEquals("'" + obj95 + "' != '" + 10L + "'", obj95, 10L);
        org.junit.Assert.assertEquals("'" + obj98 + "' != '" + 1L + "'", obj98, 1L);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getNumeratorFormat();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat16.parse("-1 0 / 1", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.lang.String str5 = properFractionFormat2.format((java.lang.Object) (-1.0f));
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = numberFormat6.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getNumeratorFormat();
        fractionFormat0.setNumeratorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = numberFormat12.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = properFractionFormat9.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        java.lang.Object obj17 = properFractionFormat2.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator24 = properFractionFormat20.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat20.parseObject("1 / 1");
        java.text.NumberFormat numberFormat28 = properFractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat32.getDenominatorFormat();
        fractionFormat29.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        fractionFormat38.setDenominatorFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat48 = properFractionFormat45.getWholeFormat();
        fractionFormat38.setDenominatorFormat(numberFormat48);
        java.lang.Object obj51 = numberFormat48.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        fractionFormat52.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.lang.String str61 = properFractionFormat59.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        fractionFormat52.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat48, numberFormat64);
        java.text.NumberFormat numberFormat66 = properFractionFormat65.getNumeratorFormat();
        properFractionFormat20.setNumeratorFormat(numberFormat66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat70.getNumeratorFormat();
        java.lang.Object obj76 = numberFormat74.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        properFractionFormat82.setWholeFormat(numberFormat84);
        fractionFormat78.setNumeratorFormat(numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        properFractionFormat77.setDenominatorFormat(numberFormat84);
        properFractionFormat20.setDenominatorFormat(numberFormat84);
        java.text.NumberFormat numberFormat90 = properFractionFormat20.getWholeFormat();
        java.lang.StringBuffer stringBuffer91 = null;
        java.text.FieldPosition fieldPosition92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = properFractionFormat2.format((java.lang.Object) properFractionFormat20, stringBuffer91, fieldPosition92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + 1L + "'", obj51, 1L);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 0 / 1" + "'", str61, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + 1L + "'", obj76, 1L);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj28 = numberFormat26.parseObject("-1 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + (-1L) + "'", obj28, (-1L));
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getNumeratorFormat();
        java.lang.Object obj26 = numberFormat24.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        fractionFormat27.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        fractionFormat27.setDenominatorFormat(numberFormat37);
        java.text.NumberFormat numberFormat39 = fractionFormat27.getNumeratorFormat();
        java.lang.String str41 = numberFormat39.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        properFractionFormat44.setWholeFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        properFractionFormat57.setWholeFormat(numberFormat59);
        properFractionFormat44.setWholeFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        fractionFormat62.setDenominatorFormat(numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        fractionFormat62.setDenominatorFormat(numberFormat72);
        java.text.NumberFormat numberFormat74 = fractionFormat62.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction76 = fractionFormat62.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat77 = fractionFormat62.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.lang.String str83 = properFractionFormat81.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat84 = properFractionFormat81.getWholeFormat();
        java.text.NumberFormat numberFormat85 = properFractionFormat81.getNumeratorFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat81.getWholeFormat();
        java.text.NumberFormat numberFormat87 = properFractionFormat81.getWholeFormat();
        properFractionFormat78.setDenominatorFormat(numberFormat87);
        properFractionFormat44.setWholeFormat(numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat39, numberFormat87);
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat92 = fractionFormat91.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        java.lang.Object obj95 = numberFormat94.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat96 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat92, numberFormat94);
        java.lang.Object obj97 = numberFormat92.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = properFractionFormat0.format((java.lang.Object) numberFormat92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-1 0 / 1" + "'", str83, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(fractionFormat91);
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        java.lang.Object obj21 = properFractionFormat2.parseObject("10");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        properFractionFormat2.setNumeratorFormat(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Object obj8 = numberFormat7.clone();
        java.text.NumberFormat numberFormat9 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat7, numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.lang.Object obj24 = numberFormat21.parseObject("1 / 1");
        java.text.NumberFormat numberFormat25 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat28.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj33 = properFractionFormat28.clone();
        java.lang.Object obj34 = properFractionFormat28.clone();
        java.text.NumberFormat numberFormat35 = properFractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat25, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getDenominatorFormat();
        java.lang.Object obj38 = properFractionFormat36.clone();
        java.lang.Object obj39 = properFractionFormat36.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        fractionFormat40.setDenominatorFormat(numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat50 = properFractionFormat47.getWholeFormat();
        fractionFormat40.setDenominatorFormat(numberFormat50);
        java.text.NumberFormat numberFormat52 = fractionFormat40.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat40.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat55 = fractionFormat40.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        fractionFormat57.setDenominatorFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat67 = properFractionFormat64.getWholeFormat();
        fractionFormat57.setDenominatorFormat(numberFormat67);
        java.text.NumberFormat numberFormat69 = fractionFormat57.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat57.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat72 = fractionFormat57.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.text.NumberFormat numberFormat79 = properFractionFormat78.getNumeratorFormat();
        properFractionFormat73.setDenominatorFormat(numberFormat79);
        java.text.NumberFormat numberFormat81 = properFractionFormat73.getDenominatorFormat();
        properFractionFormat56.setNumeratorFormat(numberFormat81);
        properFractionFormat36.setNumeratorFormat(numberFormat81);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator84 = numberFormat7.formatToCharacterIterator((java.lang.Object) numberFormat81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 1L + "'", obj24, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat81);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat16.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.FieldPosition fieldPosition21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat11.format(fraction19, stringBuffer20, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction19);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.text.AttributedCharacterIterator attributedCharacterIterator9 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        java.lang.Object obj26 = numberFormat25.clone();
        fractionFormat22.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat28.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        fractionFormat28.setDenominatorFormat(numberFormat38);
        java.lang.Object obj41 = numberFormat38.parseObject("1 / 1");
        java.text.NumberFormat numberFormat42 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator49 = properFractionFormat45.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj50 = properFractionFormat45.clone();
        java.lang.Object obj51 = properFractionFormat45.clone();
        java.text.NumberFormat numberFormat52 = properFractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat42, numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat25, numberFormat38);
        properFractionFormat2.setWholeFormat(numberFormat38);
        java.lang.Class<?> wildcardClass56 = properFractionFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(attributedCharacterIterator9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 1L + "'", obj41, 1L);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat2.parseObject("", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        fractionFormat2.setDenominatorFormat(numberFormat4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        fractionFormat2.setDenominatorFormat(numberFormat12);
        java.text.NumberFormat numberFormat14 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction16 = fractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat17 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        fractionFormat0.setNumeratorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        properFractionFormat23.setWholeFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        properFractionFormat36.setWholeFormat(numberFormat38);
        properFractionFormat23.setWholeFormat(numberFormat38);
        java.lang.Object obj42 = properFractionFormat23.parseObject("10");
        java.text.NumberFormat numberFormat43 = properFractionFormat23.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = fractionFormat0.format((java.lang.Object) properFractionFormat23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat48.parse("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        java.text.NumberFormat numberFormat58 = properFractionFormat53.getWholeFormat();
        properFractionFormat48.setNumeratorFormat(numberFormat58);
        java.text.ParsePosition parsePosition61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = properFractionFormat48.parseObject("10 0 / 1", parsePosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj11 = properFractionFormat2.parseObject("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        properFractionFormat16.setWholeFormat(numberFormat18);
        fractionFormat12.setNumeratorFormat(numberFormat18);
        org.apache.commons.math.fraction.Fraction fraction22 = fractionFormat12.parse("-1 / 1");
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.FieldPosition fieldPosition24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = properFractionFormat2.format(fraction22, stringBuffer23, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fraction22);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.text.NumberFormat numberFormat0 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat8 = properFractionFormat7.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat2, numberFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat9.setWholeFormat(numberFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat49.parse("10");
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        properFractionFormat57.setWholeFormat(numberFormat59);
        fractionFormat53.setNumeratorFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.Object obj63 = numberFormat59.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        properFractionFormat49.setDenominatorFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = properFractionFormat68.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat68.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator75 = properFractionFormat49.formatToCharacterIterator((java.lang.Object) properFractionFormat68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        fractionFormat48.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        fractionFormat48.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat48.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat63 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat65 = properFractionFormat64.getWholeFormat();
        java.lang.Object obj66 = properFractionFormat64.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        properFractionFormat69.setWholeFormat(numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        properFractionFormat82.setWholeFormat(numberFormat84);
        properFractionFormat69.setWholeFormat(numberFormat84);
        java.lang.String str88 = numberFormat84.format((java.lang.Object) (short) 10);
        properFractionFormat64.setNumeratorFormat(numberFormat84);
        properFractionFormat2.setNumeratorFormat(numberFormat84);
        java.text.NumberFormat numberFormat91 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction93 = properFractionFormat2.parse("1 / 1");
        java.text.NumberFormat numberFormat94 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat95 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction98 = properFractionFormat2.parse("-1 / 1", parsePosition97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertNotNull(numberFormat95);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        java.lang.Class<?> wildcardClass11 = numberFormat10.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.Fraction fraction4 = properFractionFormat2.parse("10 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        properFractionFormat20.setWholeFormat(numberFormat22);
        properFractionFormat7.setWholeFormat(numberFormat22);
        properFractionFormat2.setDenominatorFormat(numberFormat22);
        java.text.ParsePosition parsePosition27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat2.parse("-1", parsePosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getNumeratorFormat();
        java.lang.Object obj20 = numberFormat18.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        fractionFormat21.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        fractionFormat21.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = fractionFormat21.getNumeratorFormat();
        java.lang.String str35 = numberFormat33.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat38.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        properFractionFormat38.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        properFractionFormat51.setWholeFormat(numberFormat53);
        properFractionFormat38.setWholeFormat(numberFormat53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        fractionFormat56.setDenominatorFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        fractionFormat56.setDenominatorFormat(numberFormat66);
        java.text.NumberFormat numberFormat68 = fractionFormat56.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction70 = fractionFormat56.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat71 = fractionFormat56.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getNumeratorFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat81 = properFractionFormat75.getWholeFormat();
        properFractionFormat72.setDenominatorFormat(numberFormat81);
        properFractionFormat38.setWholeFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat33, numberFormat81);
        java.lang.Object obj86 = properFractionFormat84.parseObject("1 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = fractionFormat0.format((java.lang.Object) properFractionFormat84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + 1L + "'", obj20, 1L);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(obj86);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        fractionFormat2.setDenominatorFormat(numberFormat4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        fractionFormat2.setDenominatorFormat(numberFormat12);
        java.text.NumberFormat numberFormat14 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction16 = fractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat17 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        fractionFormat0.setNumeratorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = numberFormat19.format((java.lang.Object) properFractionFormat23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = properFractionFormat2.format((java.lang.Object) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat48.getDenominatorFormat();
        properFractionFormat40.setNumeratorFormat(numberFormat52);
        properFractionFormat36.setDenominatorFormat(numberFormat52);
        java.text.ParsePosition parsePosition56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat36.parse("10 / 1", parsePosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = numberFormat8.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        properFractionFormat3.setWholeFormat(numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        properFractionFormat16.setWholeFormat(numberFormat18);
        properFractionFormat3.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        fractionFormat21.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        fractionFormat21.setDenominatorFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction35 = fractionFormat21.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat36 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat40.getWholeFormat();
        properFractionFormat37.setDenominatorFormat(numberFormat46);
        properFractionFormat3.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        fractionFormat49.setDenominatorFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        fractionFormat49.setDenominatorFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat49.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat64 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.NumberFormat numberFormat66 = properFractionFormat65.getWholeFormat();
        java.lang.Object obj67 = properFractionFormat65.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat70.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        properFractionFormat70.setWholeFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat85 = fractionFormat84.getDenominatorFormat();
        properFractionFormat83.setWholeFormat(numberFormat85);
        properFractionFormat70.setWholeFormat(numberFormat85);
        java.lang.String str89 = numberFormat85.format((java.lang.Object) (short) 10);
        properFractionFormat65.setNumeratorFormat(numberFormat85);
        properFractionFormat3.setNumeratorFormat(numberFormat85);
        fractionFormat0.setDenominatorFormat(numberFormat85);
        java.lang.Object obj93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = numberFormat85.format(obj93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fractionFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "10" + "'", str89, "10");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("10 0 / 1", parsePosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat48.parse("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        java.text.NumberFormat numberFormat58 = properFractionFormat53.getWholeFormat();
        properFractionFormat48.setNumeratorFormat(numberFormat58);
        java.text.ParsePosition parsePosition61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = properFractionFormat48.parseObject("hi!", parsePosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        java.text.NumberFormat numberFormat49 = properFractionFormat48.getNumeratorFormat();
        java.lang.Object obj51 = properFractionFormat48.parseObject("10 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(obj51);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj9 = properFractionFormat2.parseObject("10 / 1");
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        java.lang.Object obj17 = numberFormat15.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat18.parse("10");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getDenominatorFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat29.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        properFractionFormat18.setWholeFormat(numberFormat37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = numberFormat7.format((java.lang.Object) numberFormat37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 1L + "'", obj17, 1L);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        java.lang.Object obj24 = numberFormat11.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        fractionFormat25.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        fractionFormat25.setDenominatorFormat(numberFormat35);
        java.text.NumberFormat numberFormat37 = fractionFormat25.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction39 = fractionFormat25.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat40 = fractionFormat25.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat50 = properFractionFormat44.getWholeFormat();
        properFractionFormat41.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        properFractionFormat61.setWholeFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat68.getDenominatorFormat();
        fractionFormat65.setDenominatorFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat63, numberFormat72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.lang.String str80 = properFractionFormat78.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat81 = properFractionFormat78.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        java.lang.Object obj84 = numberFormat83.clone();
        java.text.NumberFormat numberFormat85 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81, numberFormat83, numberFormat85);
        properFractionFormat75.setNumeratorFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat50, numberFormat81);
        java.lang.Class<?> wildcardClass89 = properFractionFormat88.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-1 0 / 1" + "'", str80, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        java.lang.Object obj13 = properFractionFormat11.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat18 = properFractionFormat17.getWholeFormat();
        properFractionFormat11.setDenominatorFormat(numberFormat18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat11.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        fractionFormat14.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat24);
        java.lang.Object obj27 = numberFormat24.parseObject("1 / 1");
        java.text.NumberFormat numberFormat28 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator35 = properFractionFormat31.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj36 = properFractionFormat31.clone();
        java.lang.Object obj37 = properFractionFormat31.clone();
        java.text.NumberFormat numberFormat38 = properFractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat13, numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.NumberFormat numberFormat46 = properFractionFormat45.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat53 = properFractionFormat50.getWholeFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat50.getDenominatorFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat50.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat50.getNumeratorFormat();
        properFractionFormat47.setDenominatorFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        fractionFormat58.setDenominatorFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.lang.String str67 = properFractionFormat65.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat68 = properFractionFormat65.getWholeFormat();
        fractionFormat58.setDenominatorFormat(numberFormat68);
        java.text.NumberFormat numberFormat70 = fractionFormat58.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction72 = fractionFormat58.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat73 = fractionFormat58.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.text.NumberFormat numberFormat75 = properFractionFormat74.getWholeFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat74.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat56, numberFormat76);
        java.text.ParsePosition parsePosition79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = properFractionFormat77.parseObject("1 / 1", parsePosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 1L + "'", obj27, 1L);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1 0 / 1" + "'", str67, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        java.lang.Object obj5 = fractionFormat0.clone();
        java.lang.Object obj6 = null;
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.FieldPosition fieldPosition8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer9 = fractionFormat0.format(obj6, stringBuffer7, fieldPosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.lang.String str54 = properFractionFormat52.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat55 = properFractionFormat52.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat52.getNumeratorFormat();
        java.lang.Object obj58 = numberFormat56.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat66 = fractionFormat65.getDenominatorFormat();
        properFractionFormat64.setWholeFormat(numberFormat66);
        fractionFormat60.setNumeratorFormat(numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        properFractionFormat59.setDenominatorFormat(numberFormat66);
        properFractionFormat2.setDenominatorFormat(numberFormat66);
        java.text.NumberFormat numberFormat72 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction73 = null;
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.FieldPosition fieldPosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = properFractionFormat2.format(fraction73, stringBuffer74, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 0 / 1" + "'", str54, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 1L + "'", obj58, 1L);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        java.lang.Class<?> wildcardClass56 = numberFormat1.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        fractionFormat48.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        fractionFormat48.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat48.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat63 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat65 = properFractionFormat64.getWholeFormat();
        java.lang.Object obj66 = properFractionFormat64.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        properFractionFormat69.setWholeFormat(numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        properFractionFormat82.setWholeFormat(numberFormat84);
        properFractionFormat69.setWholeFormat(numberFormat84);
        java.lang.String str88 = numberFormat84.format((java.lang.Object) (short) 10);
        properFractionFormat64.setNumeratorFormat(numberFormat84);
        properFractionFormat2.setNumeratorFormat(numberFormat84);
        org.apache.commons.math.fraction.Fraction fraction92 = properFractionFormat2.parse("10");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(fraction92);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        properFractionFormat12.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        properFractionFormat25.setWholeFormat(numberFormat27);
        properFractionFormat12.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.text.NumberFormat numberFormat42 = fractionFormat30.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction44 = fractionFormat30.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat45 = fractionFormat30.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat49.getNumeratorFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat49.getWholeFormat();
        properFractionFormat46.setDenominatorFormat(numberFormat55);
        properFractionFormat12.setWholeFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.lang.String str63 = properFractionFormat61.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat64 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat61.getDenominatorFormat();
        fractionFormat58.setDenominatorFormat(numberFormat65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55, numberFormat65, numberFormat74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = numberFormat9.format((java.lang.Object) numberFormat55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1 0 / 1" + "'", str63, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setWholeFormat(numberFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat25.clone();
        java.lang.Object obj28 = properFractionFormat25.clone();
        java.text.NumberFormat numberFormat29 = properFractionFormat25.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator36 = properFractionFormat32.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj37 = properFractionFormat32.clone();
        java.lang.Object obj38 = properFractionFormat32.clone();
        org.apache.commons.math.fraction.Fraction fraction40 = properFractionFormat32.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat41 = properFractionFormat32.getDenominatorFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat32.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer44 = null;
        java.text.FieldPosition fieldPosition45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer46 = properFractionFormat25.format((java.lang.Object) numberFormat43, stringBuffer44, fieldPosition45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat48);
        java.text.NumberFormat numberFormat50 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat2.parse("10 0 / 1");
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10 / 1" + "'", str53, "10 / 1");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        fractionFormat55.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        fractionFormat55.setDenominatorFormat(numberFormat65);
        java.lang.Object obj68 = numberFormat65.parseObject("1 / 1");
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator76 = properFractionFormat72.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj77 = properFractionFormat72.clone();
        java.lang.Object obj78 = properFractionFormat72.clone();
        java.text.NumberFormat numberFormat79 = properFractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat69, numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat83 = fractionFormat82.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        java.lang.String str86 = properFractionFormat84.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator88 = properFractionFormat84.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj89 = properFractionFormat84.clone();
        java.text.NumberFormat numberFormat90 = properFractionFormat84.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat49, numberFormat90);
        properFractionFormat23.setNumeratorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat94 = fractionFormat93.getDenominatorFormat();
        java.lang.Object obj96 = numberFormat94.parseObject("10");
        properFractionFormat23.setNumeratorFormat(numberFormat94);
        java.text.NumberFormat numberFormat98 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat99 = properFractionFormat23.getNumeratorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 1L + "'", obj68, 1L);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1 0 / 1" + "'", str86, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + 10L + "'", obj96, 10L);
        org.junit.Assert.assertNotNull(numberFormat98);
        org.junit.Assert.assertNotNull(numberFormat99);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.String str7 = properFractionFormat5.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat8 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat5.getNumeratorFormat();
        java.lang.Object obj11 = numberFormat9.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction15 = properFractionFormat12.parse("10");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getDenominatorFormat();
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat23.getNumeratorFormat();
        properFractionFormat20.setDenominatorFormat(numberFormat29);
        java.text.NumberFormat numberFormat31 = properFractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        properFractionFormat12.setWholeFormat(numberFormat31);
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = properFractionFormat0.format((java.lang.Object) numberFormat31, stringBuffer34, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1 0 / 1" + "'", str7, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + 1L + "'", obj11, 1L);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat31);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        fractionFormat27.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        fractionFormat27.setDenominatorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        java.lang.Object obj43 = numberFormat42.clone();
        fractionFormat39.setDenominatorFormat(numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        fractionFormat45.setDenominatorFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.lang.String str54 = properFractionFormat52.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat55 = properFractionFormat52.getWholeFormat();
        fractionFormat45.setDenominatorFormat(numberFormat55);
        java.lang.Object obj58 = numberFormat55.parseObject("1 / 1");
        java.text.NumberFormat numberFormat59 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator66 = properFractionFormat62.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj67 = properFractionFormat62.clone();
        java.lang.Object obj68 = properFractionFormat62.clone();
        java.text.NumberFormat numberFormat69 = properFractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55, numberFormat59, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat42, numberFormat55);
        java.lang.Object obj72 = numberFormat37.clone();
        properFractionFormat16.setWholeFormat(numberFormat37);
        java.text.ParsePosition parsePosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat16.parse("-1", parsePosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 0 / 1" + "'", str54, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 1L + "'", obj58, 1L);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.lang.Object obj48 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj50 = fractionFormat49.clone();
        java.text.NumberFormat numberFormat51 = fractionFormat49.getDenominatorFormat();
        java.lang.Class<?> wildcardClass52 = fractionFormat49.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = properFractionFormat2.format((java.lang.Object) wildcardClass52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getNumeratorFormat();
        java.lang.Object obj26 = numberFormat24.parseObject("1 / 1");
        properFractionFormat14.setWholeFormat(numberFormat24);
        properFractionFormat2.setWholeFormat(numberFormat24);
        java.text.ParsePosition parsePosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat2.parse("hi!", parsePosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj50 = properFractionFormat2.parseObject("-1 0 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = properFractionFormat2.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getDenominatorFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat19.getDenominatorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat3.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getNumeratorFormat();
        java.lang.Object obj18 = numberFormat16.parseObject("1 / 1");
        properFractionFormat3.setWholeFormat(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + 1L + "'", obj18, 1L);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.lang.Object obj48 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat2.parse("10 / 1", parsePosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Object obj1 = fractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.String str6 = properFractionFormat4.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator8 = properFractionFormat4.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat9 = properFractionFormat4.getDenominatorFormat();
        java.lang.Object obj11 = properFractionFormat4.parseObject("1 / 1");
        java.text.NumberFormat numberFormat12 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat4.parse("1");
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.FieldPosition fieldPosition16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer17 = fractionFormat0.format((java.lang.Object) properFractionFormat4, stringBuffer15, fieldPosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1 0 / 1" + "'", str6, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        fractionFormat48.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        fractionFormat48.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat48.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat63 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat65 = properFractionFormat64.getWholeFormat();
        java.lang.Object obj66 = properFractionFormat64.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        properFractionFormat69.setWholeFormat(numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        properFractionFormat82.setWholeFormat(numberFormat84);
        properFractionFormat69.setWholeFormat(numberFormat84);
        java.lang.String str88 = numberFormat84.format((java.lang.Object) (short) 10);
        properFractionFormat64.setNumeratorFormat(numberFormat84);
        properFractionFormat2.setNumeratorFormat(numberFormat84);
        java.text.NumberFormat numberFormat91 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj94 = properFractionFormat2.parseObject("1 / 1", parsePosition93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        java.text.NumberFormat numberFormat56 = properFractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        fractionFormat57.setDenominatorFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat67 = properFractionFormat64.getWholeFormat();
        fractionFormat57.setDenominatorFormat(numberFormat67);
        java.text.NumberFormat numberFormat69 = fractionFormat57.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat57.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat72 = fractionFormat57.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.lang.String str78 = properFractionFormat76.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat79 = properFractionFormat76.getWholeFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat76.getNumeratorFormat();
        java.text.NumberFormat numberFormat81 = properFractionFormat76.getWholeFormat();
        java.text.NumberFormat numberFormat82 = properFractionFormat76.getWholeFormat();
        properFractionFormat73.setDenominatorFormat(numberFormat82);
        properFractionFormat55.setDenominatorFormat(numberFormat82);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1 0 / 1" + "'", str78, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.lang.String str80 = properFractionFormat78.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator82 = properFractionFormat78.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat83 = properFractionFormat78.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer84 = null;
        java.text.FieldPosition fieldPosition85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer86 = properFractionFormat75.format((java.lang.Object) properFractionFormat78, stringBuffer84, fieldPosition85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-1 0 / 1" + "'", str80, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator82);
        org.junit.Assert.assertNotNull(numberFormat83);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.lang.Object obj25 = numberFormat23.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        fractionFormat26.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.String str35 = properFractionFormat33.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat36 = properFractionFormat33.getWholeFormat();
        fractionFormat26.setDenominatorFormat(numberFormat36);
        java.text.NumberFormat numberFormat38 = fractionFormat26.getNumeratorFormat();
        java.lang.String str40 = numberFormat38.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        properFractionFormat56.setWholeFormat(numberFormat58);
        properFractionFormat43.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        fractionFormat61.setDenominatorFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        fractionFormat61.setDenominatorFormat(numberFormat71);
        java.text.NumberFormat numberFormat73 = fractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat61.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat76 = fractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.lang.String str82 = properFractionFormat80.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat83 = properFractionFormat80.getWholeFormat();
        java.text.NumberFormat numberFormat84 = properFractionFormat80.getNumeratorFormat();
        java.text.NumberFormat numberFormat85 = properFractionFormat80.getWholeFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat80.getWholeFormat();
        properFractionFormat77.setDenominatorFormat(numberFormat86);
        properFractionFormat43.setWholeFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat38, numberFormat86);
        java.lang.Object obj91 = numberFormat86.parseObject("10 / 1");
        properFractionFormat16.setDenominatorFormat(numberFormat86);
        java.text.NumberFormat numberFormat93 = properFractionFormat16.getWholeFormat();
        java.text.ParsePosition parsePosition95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction96 = properFractionFormat16.parse("1 / 1", parsePosition95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 1L + "'", obj25, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1 0 / 1" + "'", str35, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1 0 / 1" + "'", str82, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + 10L + "'", obj91, 10L);
        org.junit.Assert.assertNotNull(numberFormat93);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat16 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.lang.Object obj30 = numberFormat27.parseObject("1 / 1");
        java.text.NumberFormat numberFormat31 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator38 = properFractionFormat34.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj39 = properFractionFormat34.clone();
        java.lang.Object obj40 = properFractionFormat34.clone();
        java.text.NumberFormat numberFormat41 = properFractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat31, numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat48 = properFractionFormat45.getWholeFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat45.getNumeratorFormat();
        java.text.NumberFormat numberFormat50 = properFractionFormat45.getWholeFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat45.getWholeFormat();
        java.lang.Object obj53 = numberFormat51.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.lang.String str58 = properFractionFormat56.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat59 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat56.getNumeratorFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat56.getWholeFormat();
        java.lang.Object obj64 = numberFormat62.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat51, numberFormat62);
        properFractionFormat2.setNumeratorFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        java.lang.Object obj75 = numberFormat73.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.text.NumberFormat numberFormat77 = properFractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat76.parse("10");
        java.lang.StringBuffer stringBuffer80 = null;
        java.text.FieldPosition fieldPosition81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer82 = properFractionFormat2.format(fraction79, stringBuffer80, fieldPosition81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + 1L + "'", obj30, 1L);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + (-1L) + "'", obj53, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 0 / 1" + "'", str58, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + (-1L) + "'", obj64, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + 1L + "'", obj75, 1L);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fraction79);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat23.getDenominatorFormat();
        fractionFormat20.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.Object obj31 = properFractionFormat29.parseObject("-1 0 / 1");
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getDenominatorFormat();
        properFractionFormat2.setWholeFormat(numberFormat32);
        java.lang.Object obj34 = properFractionFormat2.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        properFractionFormat9.setNumeratorFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat18.getDenominatorFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat18.parse("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        java.lang.Object obj28 = fractionFormat26.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        fractionFormat29.setDenominatorFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat39 = properFractionFormat36.getWholeFormat();
        fractionFormat29.setDenominatorFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        java.lang.Object obj45 = numberFormat44.clone();
        fractionFormat41.setDenominatorFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.lang.Object obj60 = numberFormat57.parseObject("1 / 1");
        java.text.NumberFormat numberFormat61 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat64.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj69 = properFractionFormat64.clone();
        java.lang.Object obj70 = properFractionFormat64.clone();
        java.text.NumberFormat numberFormat71 = properFractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat61, numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat44, numberFormat57);
        fractionFormat26.setDenominatorFormat(numberFormat57);
        properFractionFormat18.setNumeratorFormat(numberFormat57);
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat18.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer78 = null;
        java.text.FieldPosition fieldPosition79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer80 = properFractionFormat15.format(fraction77, stringBuffer78, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + 1L + "'", obj60, 1L);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fraction77);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getNumeratorFormat();
        fractionFormat0.setNumeratorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.String str24 = properFractionFormat22.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat25 = properFractionFormat22.getWholeFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat22.getDenominatorFormat();
        properFractionFormat14.setNumeratorFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = properFractionFormat14.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        fractionFormat29.setDenominatorFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat39 = properFractionFormat36.getWholeFormat();
        fractionFormat29.setDenominatorFormat(numberFormat39);
        java.lang.Object obj42 = numberFormat39.parseObject("1 / 1");
        java.text.NumberFormat numberFormat43 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str48 = properFractionFormat46.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator50 = properFractionFormat46.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj51 = properFractionFormat46.clone();
        java.lang.Object obj52 = properFractionFormat46.clone();
        java.text.NumberFormat numberFormat53 = properFractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat43, numberFormat53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.lang.String str59 = properFractionFormat57.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat60 = properFractionFormat57.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat57.getNumeratorFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat57.getWholeFormat();
        java.text.NumberFormat numberFormat63 = properFractionFormat57.getWholeFormat();
        java.lang.Object obj65 = numberFormat63.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat68.getNumeratorFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat68.getWholeFormat();
        java.lang.Object obj76 = numberFormat74.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat63, numberFormat74);
        properFractionFormat14.setNumeratorFormat(numberFormat63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = numberFormat10.format((java.lang.Object) numberFormat63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1 0 / 1" + "'", str24, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + 1L + "'", obj42, 1L);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1 0 / 1" + "'", str48, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 0 / 1" + "'", str59, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + (-1L) + "'", obj65, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (-1L) + "'", obj76, (-1L));
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = properFractionFormat0.getDenominatorFormat();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = properFractionFormat0.parseObject("1 / 1", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.text.NumberFormat numberFormat54 = properFractionFormat53.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.Object obj56 = numberFormat54.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat67 = properFractionFormat64.getWholeFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat64.getDenominatorFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat64.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat64.getNumeratorFormat();
        properFractionFormat61.setDenominatorFormat(numberFormat70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48, numberFormat54, numberFormat70);
        java.text.ParsePosition parsePosition74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat72.parse("-1", parsePosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat8.getNumeratorFormat();
        java.lang.Object obj14 = numberFormat12.parseObject("1 / 1");
        properFractionFormat2.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        properFractionFormat18.setWholeFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.lang.Object obj43 = numberFormat40.parseObject("1 / 1");
        java.text.NumberFormat numberFormat44 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = properFractionFormat47.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj52 = properFractionFormat47.clone();
        java.lang.Object obj53 = properFractionFormat47.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat44, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat54);
        properFractionFormat2.setWholeFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator64 = properFractionFormat60.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat65 = properFractionFormat60.getDenominatorFormat();
        java.lang.Object obj67 = properFractionFormat60.parseObject("1 / 1");
        java.text.NumberFormat numberFormat68 = properFractionFormat60.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat60.parse("1");
        java.lang.StringBuffer stringBuffer71 = null;
        java.text.FieldPosition fieldPosition72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer73 = properFractionFormat2.format(fraction70, stringBuffer71, fieldPosition72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 1L + "'", obj14, 1L);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + 1L + "'", obj43, 1L);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(fraction70);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        properFractionFormat28.setWholeFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        fractionFormat40.setDenominatorFormat(numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat50 = properFractionFormat47.getWholeFormat();
        fractionFormat40.setDenominatorFormat(numberFormat50);
        java.lang.Object obj53 = numberFormat50.parseObject("1 / 1");
        java.text.NumberFormat numberFormat54 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.lang.String str59 = properFractionFormat57.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator61 = properFractionFormat57.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj62 = properFractionFormat57.clone();
        java.lang.Object obj63 = properFractionFormat57.clone();
        java.text.NumberFormat numberFormat64 = properFractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50, numberFormat54, numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat39, numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        properFractionFormat25.setWholeFormat(numberFormat64);
        java.lang.Object obj69 = numberFormat64.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + 1L + "'", obj53, 1L);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 0 / 1" + "'", str59, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        properFractionFormat11.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.lang.Object obj36 = numberFormat33.parseObject("1 / 1");
        java.text.NumberFormat numberFormat37 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = properFractionFormat40.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj45 = properFractionFormat40.clone();
        java.lang.Object obj46 = properFractionFormat40.clone();
        java.text.NumberFormat numberFormat47 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat37, numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat22, numberFormat47);
        properFractionFormat3.setDenominatorFormat(numberFormat17);
        java.lang.Object obj52 = numberFormat17.parseObject("1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + 1L + "'", obj36, 1L);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 1L + "'", obj52, 1L);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        properFractionFormat69.setWholeFormat(numberFormat71);
        fractionFormat65.setNumeratorFormat(numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.NumberFormat numberFormat78 = properFractionFormat77.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        java.lang.Object obj83 = numberFormat82.clone();
        fractionFormat79.setDenominatorFormat(numberFormat82);
        properFractionFormat77.setWholeFormat(numberFormat82);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat71, numberFormat82);
        java.lang.Object obj87 = numberFormat71.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = numberFormat71.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(obj87);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        java.lang.Object obj41 = numberFormat40.clone();
        java.text.NumberFormat numberFormat42 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat40, numberFormat42);
        java.text.NumberFormat numberFormat44 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat45.getNumeratorFormat();
        java.lang.Object obj47 = properFractionFormat45.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        fractionFormat48.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        fractionFormat48.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = fractionFormat48.getNumeratorFormat();
        java.text.NumberFormat numberFormat61 = fractionFormat48.getNumeratorFormat();
        properFractionFormat45.setDenominatorFormat(numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat44, numberFormat61);
        java.lang.Object obj64 = numberFormat44.clone();
        java.lang.StringBuffer stringBuffer65 = null;
        java.text.FieldPosition fieldPosition66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer67 = properFractionFormat16.format((java.lang.Object) numberFormat44, stringBuffer65, fieldPosition66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(obj64);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat9.getDenominatorFormat();
        java.text.ParsePosition parsePosition13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = properFractionFormat9.parseObject("1 / 1", parsePosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        fractionFormat13.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        fractionFormat13.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat25 = fractionFormat13.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction27 = fractionFormat13.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat28 = fractionFormat13.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat31.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        properFractionFormat31.setWholeFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        fractionFormat43.setDenominatorFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat53 = properFractionFormat50.getWholeFormat();
        fractionFormat43.setDenominatorFormat(numberFormat53);
        java.lang.Object obj56 = numberFormat53.parseObject("1 / 1");
        java.text.NumberFormat numberFormat57 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator64 = properFractionFormat60.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj65 = properFractionFormat60.clone();
        java.lang.Object obj66 = properFractionFormat60.clone();
        java.text.NumberFormat numberFormat67 = properFractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat57, numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat42, numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat28, numberFormat67);
        java.text.NumberFormat numberFormat71 = properFractionFormat70.getDenominatorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + 1L + "'", obj56, 1L);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat71);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        properFractionFormat11.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.lang.Object obj36 = numberFormat33.parseObject("1 / 1");
        java.text.NumberFormat numberFormat37 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = properFractionFormat40.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj45 = properFractionFormat40.clone();
        java.lang.Object obj46 = properFractionFormat40.clone();
        java.text.NumberFormat numberFormat47 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat37, numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat22, numberFormat47);
        properFractionFormat3.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat3.parse("1");
        java.lang.Class<?> wildcardClass53 = fraction52.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + 1L + "'", obj36, 1L);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        properFractionFormat21.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        properFractionFormat34.setWholeFormat(numberFormat36);
        properFractionFormat21.setWholeFormat(numberFormat36);
        java.lang.String str40 = numberFormat36.format((java.lang.Object) (short) 10);
        properFractionFormat16.setNumeratorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        fractionFormat48.setDenominatorFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        fractionFormat48.setDenominatorFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat48.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat63 = fractionFormat48.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat65 = properFractionFormat64.getWholeFormat();
        java.lang.Object obj66 = properFractionFormat64.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.lang.String str71 = properFractionFormat69.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat72 = properFractionFormat69.getWholeFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat69.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        properFractionFormat69.setWholeFormat(numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat84 = fractionFormat83.getDenominatorFormat();
        properFractionFormat82.setWholeFormat(numberFormat84);
        properFractionFormat69.setWholeFormat(numberFormat84);
        java.lang.String str88 = numberFormat84.format((java.lang.Object) (short) 10);
        properFractionFormat64.setNumeratorFormat(numberFormat84);
        properFractionFormat2.setNumeratorFormat(numberFormat84);
        java.text.NumberFormat numberFormat91 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction93 = properFractionFormat2.parse("1 / 1");
        java.text.NumberFormat numberFormat94 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat95 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat96 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setWholeFormat(numberFormat96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 0 / 1" + "'", str71, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertNotNull(numberFormat95);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = properFractionFormat9.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        java.lang.Object obj17 = properFractionFormat2.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.lang.String str27 = properFractionFormat25.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat28 = properFractionFormat25.getWholeFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat25.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        properFractionFormat25.setWholeFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        fractionFormat37.setDenominatorFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str46 = properFractionFormat44.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getWholeFormat();
        fractionFormat37.setDenominatorFormat(numberFormat47);
        java.lang.Object obj50 = numberFormat47.parseObject("1 / 1");
        java.text.NumberFormat numberFormat51 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator58 = properFractionFormat54.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj59 = properFractionFormat54.clone();
        java.lang.Object obj60 = properFractionFormat54.clone();
        java.text.NumberFormat numberFormat61 = properFractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat51, numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat36, numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator70 = properFractionFormat66.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj71 = properFractionFormat66.clone();
        java.text.NumberFormat numberFormat72 = properFractionFormat66.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19, numberFormat31, numberFormat72);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat73.parse("-1 0 / 1");
        java.lang.String str76 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction75);
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.FieldPosition fieldPosition78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = properFractionFormat2.format(fraction75, stringBuffer77, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 0 / 1" + "'", str27, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 0 / 1" + "'", str46, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 1L + "'", obj50, 1L);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1 / 1" + "'", str76, "-1 / 1");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat2.parse("-1 0 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat2.parseObject("10", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getDenominatorFormat();
        properFractionFormat72.setDenominatorFormat(numberFormat79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.text.NumberFormat numberFormat82 = properFractionFormat81.getNumeratorFormat();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat82);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = numberFormat8.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.lang.String str17 = properFractionFormat15.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat18 = properFractionFormat15.getWholeFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat15.getDenominatorFormat();
        fractionFormat12.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        properFractionFormat21.setNumeratorFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        properFractionFormat11.setDenominatorFormat(numberFormat23);
        java.lang.Class<?> wildcardClass29 = numberFormat23.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1 0 / 1" + "'", str17, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        properFractionFormat12.setWholeFormat(numberFormat14);
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat12.parse("10");
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.FieldPosition fieldPosition22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer23 = properFractionFormat2.format(fraction19, stringBuffer21, fieldPosition22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10 / 1" + "'", str20, "10 / 1");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj2 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        fractionFormat3.setDenominatorFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        fractionFormat3.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat16 = fractionFormat3.getNumeratorFormat();
        properFractionFormat0.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        java.lang.Object obj22 = numberFormat21.clone();
        fractionFormat18.setDenominatorFormat(numberFormat21);
        properFractionFormat0.setWholeFormat(numberFormat21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = properFractionFormat0.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        java.lang.Object obj38 = numberFormat37.clone();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str34 = properFractionFormat32.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat32.getDenominatorFormat();
        fractionFormat29.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        fractionFormat38.setDenominatorFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.lang.String str47 = properFractionFormat45.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat48 = properFractionFormat45.getWholeFormat();
        fractionFormat38.setDenominatorFormat(numberFormat48);
        java.lang.Object obj51 = numberFormat48.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        fractionFormat52.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.lang.String str61 = properFractionFormat59.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        fractionFormat52.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = fractionFormat52.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat48, numberFormat64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Object obj67 = fractionFormat66.clone();
        java.text.NumberFormat numberFormat68 = fractionFormat66.getDenominatorFormat();
        properFractionFormat65.setNumeratorFormat(numberFormat68);
        properFractionFormat28.setDenominatorFormat(numberFormat68);
        java.lang.Class<?> wildcardClass71 = numberFormat68.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 0 / 1" + "'", str34, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 0 / 1" + "'", str47, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + 1L + "'", obj51, 1L);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 0 / 1" + "'", str61, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Class<?> wildcardClass15 = fractionFormat14.getClass();
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.FieldPosition fieldPosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = properFractionFormat2.format((java.lang.Object) wildcardClass15, stringBuffer16, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction8 = properFractionFormat2.parse("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.String str13 = properFractionFormat11.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator15 = properFractionFormat11.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj16 = properFractionFormat11.clone();
        java.lang.Object obj17 = properFractionFormat11.clone();
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.FieldPosition fieldPosition19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer20 = properFractionFormat2.format((java.lang.Object) properFractionFormat11, stringBuffer18, fieldPosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1 0 / 1" + "'", str13, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator40 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj41 = properFractionFormat36.clone();
        java.lang.Object obj42 = properFractionFormat36.clone();
        java.text.NumberFormat numberFormat43 = properFractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat33, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat18, numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat54 = properFractionFormat48.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat13, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat55.parse("-1 0 / 1");
        java.text.ParsePosition parsePosition59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = properFractionFormat55.parseObject("hi!", parsePosition59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        properFractionFormat2.setWholeFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        properFractionFormat15.setWholeFormat(numberFormat17);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat20.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat35 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        properFractionFormat36.setDenominatorFormat(numberFormat45);
        properFractionFormat2.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getDenominatorFormat();
        fractionFormat48.setDenominatorFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat63 = properFractionFormat60.getWholeFormat();
        java.text.NumberFormat numberFormat64 = properFractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat55, numberFormat64);
        java.lang.Object obj66 = numberFormat45.clone();
        java.lang.Object obj67 = numberFormat45.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(obj67);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction3 = fractionFormat0.parse("-1 / 1");
        java.lang.Class<?> wildcardClass4 = fraction3.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getNumeratorFormat();
        properFractionFormat26.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat34 = properFractionFormat26.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.text.NumberFormat numberFormat48 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat36.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat51 = fractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str57 = properFractionFormat55.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat58 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat55.getNumeratorFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        properFractionFormat52.setDenominatorFormat(numberFormat61);
        java.text.NumberFormat numberFormat63 = properFractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat35, numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        fractionFormat65.setDenominatorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        fractionFormat65.setDenominatorFormat(numberFormat75);
        java.text.NumberFormat numberFormat77 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat79, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat88 = fractionFormat87.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat88);
        java.lang.String str91 = properFractionFormat89.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat92 = properFractionFormat89.getWholeFormat();
        java.text.NumberFormat numberFormat93 = properFractionFormat89.getNumeratorFormat();
        java.lang.Object obj95 = numberFormat93.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat96 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat93);
        java.text.NumberFormat numberFormat97 = properFractionFormat96.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator98 = numberFormat81.formatToCharacterIterator((java.lang.Object) numberFormat97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 0 / 1" + "'", str57, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-1 0 / 1" + "'", str91, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertEquals("'" + obj95 + "' != '" + 1L + "'", obj95, 1L);
        org.junit.Assert.assertNotNull(numberFormat97);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getNumeratorFormat();
        java.lang.Object obj28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.FieldPosition fieldPosition30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = properFractionFormat16.format(obj28, stringBuffer29, fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj9 = numberFormat7.parseObject("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getDenominatorFormat();
        fractionFormat10.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        fractionFormat19.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat29, numberFormat45);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat53 = properFractionFormat50.getWholeFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat50.getNumeratorFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.lang.String str60 = properFractionFormat58.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat61 = properFractionFormat58.getWholeFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat58.getDenominatorFormat();
        properFractionFormat50.setNumeratorFormat(numberFormat62);
        properFractionFormat46.setDenominatorFormat(numberFormat62);
        java.lang.Object obj65 = numberFormat62.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = numberFormat7.format(obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 1L + "'", obj9, 1L);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 1L + "'", obj32, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1 0 / 1" + "'", str60, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat48);
        java.text.NumberFormat numberFormat50 = properFractionFormat2.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat2.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat50);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat13 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        java.lang.Object obj18 = numberFormat16.parseObject("10");
        fractionFormat0.setNumeratorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator45 = properFractionFormat41.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getDenominatorFormat();
        properFractionFormat34.setNumeratorFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.Object obj55 = numberFormat50.parseObject("1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30, numberFormat46, numberFormat50);
        fractionFormat0.setNumeratorFormat(numberFormat50);
        java.text.ParsePosition parsePosition59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = fractionFormat0.parseObject("1", parsePosition59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + 10L + "'", obj18, 10L);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + 1L + "'", obj55, 1L);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat9.parse("10");
        java.text.ParsePosition parsePosition14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction15 = properFractionFormat9.parse("10", parsePosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction12);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat48.parse("1");
        java.lang.Class<?> wildcardClass51 = fraction50.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction3 = fractionFormat0.parse("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        properFractionFormat8.setWholeFormat(numberFormat10);
        fractionFormat4.setNumeratorFormat(numberFormat10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.lang.Object obj14 = numberFormat10.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat17.getNumeratorFormat();
        java.lang.Object obj23 = numberFormat21.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat24.setDenominatorFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str33 = properFractionFormat31.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat34 = properFractionFormat31.getWholeFormat();
        fractionFormat24.setDenominatorFormat(numberFormat34);
        java.text.NumberFormat numberFormat36 = fractionFormat24.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat41.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        properFractionFormat41.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat56 = fractionFormat55.getDenominatorFormat();
        properFractionFormat54.setWholeFormat(numberFormat56);
        properFractionFormat41.setWholeFormat(numberFormat56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        fractionFormat59.setDenominatorFormat(numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        fractionFormat59.setDenominatorFormat(numberFormat69);
        java.text.NumberFormat numberFormat71 = fractionFormat59.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat59.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat74 = fractionFormat59.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.lang.String str80 = properFractionFormat78.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat81 = properFractionFormat78.getWholeFormat();
        java.text.NumberFormat numberFormat82 = properFractionFormat78.getNumeratorFormat();
        java.text.NumberFormat numberFormat83 = properFractionFormat78.getWholeFormat();
        java.text.NumberFormat numberFormat84 = properFractionFormat78.getWholeFormat();
        properFractionFormat75.setDenominatorFormat(numberFormat84);
        properFractionFormat41.setWholeFormat(numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat36, numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat90 = fractionFormat89.getDenominatorFormat();
        properFractionFormat88.setNumeratorFormat(numberFormat90);
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat93 = fractionFormat92.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat93);
        java.lang.String str96 = properFractionFormat94.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat97 = properFractionFormat94.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat98 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat90, numberFormat97);
        fractionFormat0.setDenominatorFormat(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 1L + "'", obj23, 1L);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 0 / 1" + "'", str33, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-1 0 / 1" + "'", str80, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(fractionFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat92);
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "-1 0 / 1" + "'", str96, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat97);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj12 = numberFormat11.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj11 = numberFormat10.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.Object obj8 = properFractionFormat6.parseObject("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat16 = properFractionFormat12.getDenominatorFormat();
        fractionFormat9.setDenominatorFormat(numberFormat16);
        properFractionFormat6.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        java.lang.Object obj23 = numberFormat22.clone();
        fractionFormat19.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        java.lang.Object obj33 = numberFormat32.clone();
        java.text.NumberFormat numberFormat34 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30, numberFormat32, numberFormat34);
        java.text.NumberFormat numberFormat36 = properFractionFormat35.getNumeratorFormat();
        fractionFormat19.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getDenominatorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        fractionFormat19.setDenominatorFormat(numberFormat45);
        java.text.NumberFormat numberFormat47 = fractionFormat19.getDenominatorFormat();
        properFractionFormat6.setDenominatorFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator55 = properFractionFormat51.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj56 = properFractionFormat51.clone();
        java.lang.Object obj57 = properFractionFormat51.clone();
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat51.parse("-1 0 / 1");
        java.lang.String str60 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        java.lang.String str61 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        java.lang.String str62 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.FieldPosition fieldPosition64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = properFractionFormat6.format(fraction59, stringBuffer63, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1 / 1" + "'", str60, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 / 1" + "'", str61, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 / 1" + "'", str62, "-1 / 1");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.text.ParsePosition parsePosition12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat10.parse("", parsePosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat49.parse("10");
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        properFractionFormat56.setWholeFormat(numberFormat58);
        java.text.NumberFormat numberFormat60 = properFractionFormat56.getWholeFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat56.parse("10");
        java.lang.StringBuffer stringBuffer64 = null;
        java.text.FieldPosition fieldPosition65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = properFractionFormat49.format(fraction63, stringBuffer64, fieldPosition65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fraction63);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        fractionFormat5.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.String str14 = properFractionFormat12.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat15 = properFractionFormat12.getWholeFormat();
        fractionFormat5.setDenominatorFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = fractionFormat5.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction19 = fractionFormat5.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat20 = fractionFormat5.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getNumeratorFormat();
        properFractionFormat21.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = properFractionFormat21.getDenominatorFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat21.getNumeratorFormat();
        properFractionFormat2.setWholeFormat(numberFormat30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = numberFormat30.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1 0 / 1" + "'", str14, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.lang.Object obj25 = numberFormat23.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        fractionFormat26.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.String str35 = properFractionFormat33.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat36 = properFractionFormat33.getWholeFormat();
        fractionFormat26.setDenominatorFormat(numberFormat36);
        java.text.NumberFormat numberFormat38 = fractionFormat26.getNumeratorFormat();
        java.lang.String str40 = numberFormat38.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        properFractionFormat43.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        properFractionFormat56.setWholeFormat(numberFormat58);
        properFractionFormat43.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        fractionFormat61.setDenominatorFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.lang.String str70 = properFractionFormat68.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat71 = properFractionFormat68.getWholeFormat();
        fractionFormat61.setDenominatorFormat(numberFormat71);
        java.text.NumberFormat numberFormat73 = fractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat61.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat76 = fractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.lang.String str82 = properFractionFormat80.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat83 = properFractionFormat80.getWholeFormat();
        java.text.NumberFormat numberFormat84 = properFractionFormat80.getNumeratorFormat();
        java.text.NumberFormat numberFormat85 = properFractionFormat80.getWholeFormat();
        java.text.NumberFormat numberFormat86 = properFractionFormat80.getWholeFormat();
        properFractionFormat77.setDenominatorFormat(numberFormat86);
        properFractionFormat43.setWholeFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat38, numberFormat86);
        java.lang.Object obj91 = numberFormat86.parseObject("10 / 1");
        properFractionFormat16.setDenominatorFormat(numberFormat86);
        java.text.NumberFormat numberFormat93 = properFractionFormat16.getWholeFormat();
        java.lang.Class<?> wildcardClass94 = properFractionFormat16.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 1L + "'", obj25, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1 0 / 1" + "'", str35, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1 0 / 1" + "'", str70, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1 0 / 1" + "'", str82, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + 10L + "'", obj91, 10L);
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        fractionFormat27.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.lang.String str36 = properFractionFormat34.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat37 = properFractionFormat34.getWholeFormat();
        fractionFormat27.setDenominatorFormat(numberFormat37);
        java.text.NumberFormat numberFormat39 = fractionFormat27.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction41 = fractionFormat27.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat42 = fractionFormat27.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.NumberFormat numberFormat66 = properFractionFormat65.getNumeratorFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat66);
        java.text.NumberFormat numberFormat68 = properFractionFormat60.getDenominatorFormat();
        properFractionFormat43.setNumeratorFormat(numberFormat68);
        java.text.NumberFormat numberFormat70 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat72 = fractionFormat71.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68, numberFormat70, numberFormat72);
        properFractionFormat25.setWholeFormat(numberFormat68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat25.parse("-1");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 0 / 1" + "'", str36, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat11.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction25 = fractionFormat11.parse("-1 0 / 1");
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.FieldPosition fieldPosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = properFractionFormat9.format(fraction25, stringBuffer28, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 / 1" + "'", str26, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 / 1" + "'", str27, "-1 / 1");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        properFractionFormat12.setWholeFormat(numberFormat14);
        fractionFormat8.setNumeratorFormat(numberFormat14);
        org.apache.commons.math.fraction.Fraction fraction18 = fractionFormat8.parse("-1 / 1");
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.FieldPosition fieldPosition22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer23 = properFractionFormat3.format(fraction18, stringBuffer21, fieldPosition22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 / 1" + "'", str19, "-1 / 1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 / 1" + "'", str20, "-1 / 1");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj9 = properFractionFormat2.parseObject("1 / 1");
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat2.parseObject("hi!", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat2.parse("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        java.lang.Object obj12 = fractionFormat10.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        fractionFormat13.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        fractionFormat13.setDenominatorFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        java.lang.Object obj29 = numberFormat28.clone();
        fractionFormat25.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        fractionFormat31.setDenominatorFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        fractionFormat31.setDenominatorFormat(numberFormat41);
        java.lang.Object obj44 = numberFormat41.parseObject("1 / 1");
        java.text.NumberFormat numberFormat45 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = properFractionFormat48.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj53 = properFractionFormat48.clone();
        java.lang.Object obj54 = properFractionFormat48.clone();
        java.text.NumberFormat numberFormat55 = properFractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat45, numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat28, numberFormat41);
        fractionFormat10.setDenominatorFormat(numberFormat41);
        properFractionFormat2.setNumeratorFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.lang.String str64 = properFractionFormat62.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat65 = properFractionFormat62.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        properFractionFormat69.setWholeFormat(numberFormat71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat75 = fractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.lang.String str78 = properFractionFormat76.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat79 = properFractionFormat76.getWholeFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat76.getDenominatorFormat();
        fractionFormat73.setDenominatorFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65, numberFormat71, numberFormat80);
        java.lang.Object obj84 = numberFormat71.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat86 = properFractionFormat85.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator87 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) properFractionFormat85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + 1L + "'", obj44, 1L);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1 0 / 1" + "'", str64, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1 0 / 1" + "'", str78, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(numberFormat86);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.lang.Object obj38 = fractionFormat37.clone();
        java.text.NumberFormat numberFormat39 = fractionFormat37.getDenominatorFormat();
        properFractionFormat36.setNumeratorFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator47 = properFractionFormat43.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj48 = properFractionFormat43.clone();
        java.lang.Object obj49 = properFractionFormat43.clone();
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat43.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer52 = null;
        java.text.FieldPosition fieldPosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer54 = properFractionFormat36.format(fraction51, stringBuffer52, fieldPosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(fraction51);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.lang.Object obj23 = numberFormat20.parseObject("1 / 1");
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator31 = properFractionFormat27.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj32 = properFractionFormat27.clone();
        java.lang.Object obj33 = properFractionFormat27.clone();
        java.text.NumberFormat numberFormat34 = properFractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat24, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat38.getWholeFormat();
        java.lang.Object obj46 = numberFormat44.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat49.getNumeratorFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat49.getWholeFormat();
        java.lang.Object obj57 = numberFormat55.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat44, numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat59.parse("10");
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setWholeFormat(numberFormat64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 1L + "'", obj23, 1L);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1L) + "'", obj46, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + (-1L) + "'", obj57, (-1L));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat23.parse("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat28.parse("-1 0 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        java.lang.Object obj38 = fractionFormat36.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        fractionFormat39.setDenominatorFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str48 = properFractionFormat46.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat49 = properFractionFormat46.getWholeFormat();
        fractionFormat39.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        java.lang.Object obj55 = numberFormat54.clone();
        fractionFormat51.setDenominatorFormat(numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        fractionFormat57.setDenominatorFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat67 = properFractionFormat64.getWholeFormat();
        fractionFormat57.setDenominatorFormat(numberFormat67);
        java.lang.Object obj70 = numberFormat67.parseObject("1 / 1");
        java.text.NumberFormat numberFormat71 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.lang.String str76 = properFractionFormat74.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator78 = properFractionFormat74.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj79 = properFractionFormat74.clone();
        java.lang.Object obj80 = properFractionFormat74.clone();
        java.text.NumberFormat numberFormat81 = properFractionFormat74.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67, numberFormat71, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat54, numberFormat67);
        fractionFormat36.setDenominatorFormat(numberFormat67);
        properFractionFormat28.setNumeratorFormat(numberFormat67);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat28.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer88 = null;
        java.text.FieldPosition fieldPosition89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer90 = properFractionFormat23.format((java.lang.Object) properFractionFormat28, stringBuffer88, fieldPosition89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1 0 / 1" + "'", str48, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + 1L + "'", obj70, 1L);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1 0 / 1" + "'", str76, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(fraction87);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction40 = properFractionFormat37.parse("1 / 1", parsePosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat3.parse("10 0 / 1", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator6 = properFractionFormat2.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj7 = properFractionFormat2.clone();
        java.lang.Object obj8 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat10.parse("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        java.lang.Object obj17 = numberFormat16.clone();
        fractionFormat13.setDenominatorFormat(numberFormat16);
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.FieldPosition fieldPosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = properFractionFormat10.format((java.lang.Object) numberFormat16, stringBuffer19, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        properFractionFormat4.setWholeFormat(numberFormat6);
        fractionFormat0.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj10 = numberFormat6.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        java.lang.Object obj13 = properFractionFormat11.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat18 = properFractionFormat17.getWholeFormat();
        properFractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = fractionFormat20.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        fractionFormat33.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        fractionFormat33.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction47 = fractionFormat33.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat48 = fractionFormat33.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat51.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        properFractionFormat51.setWholeFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        fractionFormat63.setDenominatorFormat(numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.lang.String str72 = properFractionFormat70.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat73 = properFractionFormat70.getWholeFormat();
        fractionFormat63.setDenominatorFormat(numberFormat73);
        java.lang.Object obj76 = numberFormat73.parseObject("1 / 1");
        java.text.NumberFormat numberFormat77 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.lang.String str82 = properFractionFormat80.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator84 = properFractionFormat80.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj85 = properFractionFormat80.clone();
        java.lang.Object obj86 = properFractionFormat80.clone();
        java.text.NumberFormat numberFormat87 = properFractionFormat80.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73, numberFormat77, numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat62, numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat48, numberFormat87);
        java.lang.Object obj92 = properFractionFormat90.parseObject("10 0 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator93 = numberFormat18.formatToCharacterIterator((java.lang.Object) "10 0 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1 0 / 1" + "'", str72, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + 1L + "'", obj76, 1L);
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1 0 / 1" + "'", str82, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.String str21 = properFractionFormat19.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat22 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat19.getWholeFormat();
        properFractionFormat16.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat30.getDenominatorFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat30.getWholeFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat30.getWholeFormat();
        java.text.NumberFormat numberFormat37 = properFractionFormat30.getWholeFormat();
        java.lang.StringBuffer stringBuffer38 = null;
        java.text.FieldPosition fieldPosition39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer40 = properFractionFormat16.format((java.lang.Object) properFractionFormat30, stringBuffer38, fieldPosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 0 / 1" + "'", str21, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat16.getNumeratorFormat();
        java.text.ParsePosition parsePosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = properFractionFormat16.parseObject("hi!", parsePosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getDenominatorFormat();
        fractionFormat7.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        java.lang.Object obj29 = numberFormat26.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        fractionFormat30.setDenominatorFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.lang.String str39 = properFractionFormat37.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat40 = properFractionFormat37.getWholeFormat();
        fractionFormat30.setDenominatorFormat(numberFormat40);
        java.text.NumberFormat numberFormat42 = fractionFormat30.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat26, numberFormat42);
        properFractionFormat2.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setDenominatorFormat(numberFormat45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + 1L + "'", obj29, 1L);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 0 / 1" + "'", str39, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat42);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str15 = properFractionFormat13.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat16 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat13.getDenominatorFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat13.getWholeFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat13.getWholeFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = numberFormat19.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 0 / 1" + "'", str15, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.lang.Object obj23 = numberFormat20.parseObject("1 / 1");
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator31 = properFractionFormat27.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj32 = properFractionFormat27.clone();
        java.lang.Object obj33 = properFractionFormat27.clone();
        java.text.NumberFormat numberFormat34 = properFractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat24, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str40 = properFractionFormat38.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat38.getWholeFormat();
        java.lang.Object obj46 = numberFormat44.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat49.getNumeratorFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat49.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat49.getWholeFormat();
        java.lang.Object obj57 = numberFormat55.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat44, numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat59.parse("10");
        java.text.NumberFormat numberFormat62 = properFractionFormat59.getWholeFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat66.parse("10 0 / 1");
        java.lang.String str69 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction68);
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.FieldPosition fieldPosition71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer72 = properFractionFormat2.format(fraction68, stringBuffer70, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 1L + "'", obj23, 1L);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1 0 / 1" + "'", str40, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1L) + "'", obj46, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + (-1L) + "'", obj57, (-1L));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "10 / 1" + "'", str69, "10 / 1");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat7.getNumeratorFormat();
        properFractionFormat4.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.Object obj17 = numberFormat15.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.String str32 = properFractionFormat30.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat33 = properFractionFormat30.getWholeFormat();
        fractionFormat23.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = fractionFormat23.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat19, numberFormat35);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.lang.String str50 = properFractionFormat48.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat51 = properFractionFormat48.getWholeFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat48.getDenominatorFormat();
        properFractionFormat40.setNumeratorFormat(numberFormat52);
        properFractionFormat36.setDenominatorFormat(numberFormat52);
        java.lang.Object obj55 = numberFormat52.clone();
        java.lang.Class<?> wildcardClass56 = numberFormat52.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1L + "'", obj22, 1L);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 0 / 1" + "'", str32, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 0 / 1" + "'", str50, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.ParsePosition parsePosition27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat25.parse("10 / 1", parsePosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getNumeratorFormat();
        java.lang.Object obj16 = numberFormat14.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.text.NumberFormat numberFormat18 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat17.parse("10");
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.FieldPosition fieldPosition24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = properFractionFormat3.format(fraction20, stringBuffer23, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1L + "'", obj16, 1L);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10 / 1" + "'", str21, "10 / 1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10 / 1" + "'", str22, "10 / 1");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat7.getNumeratorFormat();
        properFractionFormat4.setDenominatorFormat(numberFormat13);
        java.lang.Object obj15 = properFractionFormat4.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = properFractionFormat18.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Class<?> wildcardClass23 = attributedCharacterIterator22.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = properFractionFormat4.format((java.lang.Object) attributedCharacterIterator22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        java.lang.Class<?> wildcardClass9 = properFractionFormat2.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        fractionFormat10.setDenominatorFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat20 = properFractionFormat17.getWholeFormat();
        fractionFormat10.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = fractionFormat10.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = fractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator28 = numberFormat8.formatToCharacterIterator((java.lang.Object) numberFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat3.getDenominatorFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat3.getWholeFormat();
        java.lang.Object obj12 = properFractionFormat3.parseObject("-1 0 / 1");
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat3.parse("-1 0 / 1");
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.FieldPosition fieldPosition16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer17 = properFractionFormat0.format(fraction14, stringBuffer15, fieldPosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(fraction14);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.lang.Object obj9 = fractionFormat8.clone();
        java.text.NumberFormat numberFormat10 = fractionFormat8.getDenominatorFormat();
        java.lang.Class<?> wildcardClass11 = fractionFormat8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator12 = numberFormat7.formatToCharacterIterator((java.lang.Object) fractionFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        java.text.NumberFormat numberFormat20 = properFractionFormat16.getDenominatorFormat();
        fractionFormat13.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat11, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        java.lang.Object obj32 = numberFormat31.clone();
        java.text.NumberFormat numberFormat33 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat31, numberFormat33);
        properFractionFormat23.setNumeratorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        properFractionFormat46.setWholeFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat53.getDenominatorFormat();
        fractionFormat50.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat48, numberFormat57);
        java.lang.Object obj61 = numberFormat48.clone();
        fractionFormat36.setDenominatorFormat(numberFormat48);
        properFractionFormat23.setNumeratorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.lang.String str68 = properFractionFormat66.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat69 = properFractionFormat66.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat66.getNumeratorFormat();
        java.lang.Object obj72 = numberFormat70.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.NumberFormat numberFormat74 = properFractionFormat73.getDenominatorFormat();
        java.lang.Object obj75 = numberFormat74.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = properFractionFormat23.format((java.lang.Object) numberFormat74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 0 / 1" + "'", str68, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + 1L + "'", obj72, 1L);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat2.parseObject("10 0 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat3.getWholeFormat();
        java.text.ParsePosition parsePosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properFractionFormat3.parseObject("-1 / 1", parsePosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        java.lang.Object obj16 = numberFormat15.clone();
        fractionFormat12.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        fractionFormat18.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.lang.String str27 = properFractionFormat25.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat28 = properFractionFormat25.getWholeFormat();
        fractionFormat18.setDenominatorFormat(numberFormat28);
        java.lang.Object obj31 = numberFormat28.parseObject("1 / 1");
        java.text.NumberFormat numberFormat32 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator39 = properFractionFormat35.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj40 = properFractionFormat35.clone();
        java.lang.Object obj41 = properFractionFormat35.clone();
        java.text.NumberFormat numberFormat42 = properFractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat32, numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat15, numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        fractionFormat45.setDenominatorFormat(numberFormat47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.lang.String str54 = properFractionFormat52.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat55 = properFractionFormat52.getWholeFormat();
        fractionFormat45.setDenominatorFormat(numberFormat55);
        java.text.NumberFormat numberFormat57 = fractionFormat45.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction59 = fractionFormat45.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat60 = fractionFormat45.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.text.NumberFormat numberFormat62 = properFractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction64 = properFractionFormat61.parse("1 / 1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = numberFormat15.format((java.lang.Object) "1 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 0 / 1" + "'", str27, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 1L + "'", obj31, 1L);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 0 / 1" + "'", str54, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fraction64);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        properFractionFormat14.setWholeFormat(numberFormat16);
        fractionFormat10.setNumeratorFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        properFractionFormat9.setDenominatorFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator27 = properFractionFormat23.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj28 = properFractionFormat23.clone();
        java.lang.Object obj29 = properFractionFormat23.clone();
        java.text.NumberFormat numberFormat30 = properFractionFormat23.getDenominatorFormat();
        properFractionFormat9.setWholeFormat(numberFormat30);
        java.text.NumberFormat numberFormat32 = properFractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat9.parse("1");
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 / 1" + "'", str35, "1 / 1");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        fractionFormat11.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        fractionFormat20.setDenominatorFormat(numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        fractionFormat20.setDenominatorFormat(numberFormat30);
        java.lang.Object obj33 = numberFormat30.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        fractionFormat34.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str43 = properFractionFormat41.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat44 = properFractionFormat41.getWholeFormat();
        fractionFormat34.setDenominatorFormat(numberFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat34.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat30, numberFormat46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = properFractionFormat9.format((java.lang.Object) numberFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 1L + "'", obj33, 1L);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 0 / 1" + "'", str43, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat46);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.ParsePosition parsePosition29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat27.parse("-1 / 1", parsePosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat9.parse("10");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.String str22 = properFractionFormat20.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat23 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getDenominatorFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat20.getNumeratorFormat();
        properFractionFormat17.setDenominatorFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = properFractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        properFractionFormat9.setWholeFormat(numberFormat28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = properFractionFormat9.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 0 / 1" + "'", str22, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator12 = properFractionFormat8.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat13 = properFractionFormat8.getDenominatorFormat();
        java.lang.Object obj15 = properFractionFormat8.parseObject("1 / 1");
        java.text.NumberFormat numberFormat16 = properFractionFormat8.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction18 = properFractionFormat8.parse("1");
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.FieldPosition fieldPosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = properFractionFormat4.format(fraction18, stringBuffer19, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fraction18);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.Object obj76 = numberFormat21.parseObject("1");
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + 1L + "'", obj76, 1L);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj27 = properFractionFormat25.clone();
        java.lang.Object obj28 = properFractionFormat25.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        fractionFormat29.setDenominatorFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.String str38 = properFractionFormat36.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat39 = properFractionFormat36.getWholeFormat();
        fractionFormat29.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat29.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat44 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        fractionFormat46.setDenominatorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        fractionFormat46.setDenominatorFormat(numberFormat56);
        java.text.NumberFormat numberFormat58 = fractionFormat46.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat46.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat61 = fractionFormat46.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.NumberFormat numberFormat68 = properFractionFormat67.getNumeratorFormat();
        properFractionFormat62.setDenominatorFormat(numberFormat68);
        java.text.NumberFormat numberFormat70 = properFractionFormat62.getDenominatorFormat();
        properFractionFormat45.setNumeratorFormat(numberFormat70);
        properFractionFormat25.setNumeratorFormat(numberFormat70);
        java.text.NumberFormat numberFormat73 = properFractionFormat25.getDenominatorFormat();
        java.lang.Object obj74 = properFractionFormat25.clone();
        java.text.NumberFormat numberFormat75 = properFractionFormat25.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = numberFormat75.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 0 / 1" + "'", str38, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.lang.String str12 = properFractionFormat10.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat13 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat10.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        properFractionFormat10.setWholeFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        properFractionFormat23.setWholeFormat(numberFormat25);
        properFractionFormat10.setWholeFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat28.setDenominatorFormat(numberFormat30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str37 = properFractionFormat35.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat38 = properFractionFormat35.getWholeFormat();
        fractionFormat28.setDenominatorFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = fractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction42 = fractionFormat28.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat43 = fractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.lang.String str49 = properFractionFormat47.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat50 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat47.getNumeratorFormat();
        java.text.NumberFormat numberFormat52 = properFractionFormat47.getWholeFormat();
        java.text.NumberFormat numberFormat53 = properFractionFormat47.getWholeFormat();
        properFractionFormat44.setDenominatorFormat(numberFormat53);
        properFractionFormat10.setWholeFormat(numberFormat53);
        java.text.NumberFormat numberFormat56 = properFractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.text.NumberFormat numberFormat62 = properFractionFormat61.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.Object obj64 = numberFormat62.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat66 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat71 = fractionFormat70.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.lang.String str74 = properFractionFormat72.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat75 = properFractionFormat72.getWholeFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat72.getDenominatorFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat72.getWholeFormat();
        java.text.NumberFormat numberFormat78 = properFractionFormat72.getNumeratorFormat();
        properFractionFormat69.setDenominatorFormat(numberFormat78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56, numberFormat62, numberFormat78);
        properFractionFormat2.setDenominatorFormat(numberFormat62);
        java.text.ParsePosition parsePosition83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat2.parse("-1 0 / 1", parsePosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1 0 / 1" + "'", str12, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 0 / 1" + "'", str37, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 0 / 1" + "'", str49, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1 0 / 1" + "'", str74, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getWholeFormat();
        java.lang.Object obj18 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat24 = properFractionFormat21.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat21.getNumeratorFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat32 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat29.getDenominatorFormat();
        properFractionFormat21.setNumeratorFormat(numberFormat33);
        java.text.NumberFormat numberFormat35 = properFractionFormat21.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat36.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str45 = properFractionFormat43.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getWholeFormat();
        fractionFormat36.setDenominatorFormat(numberFormat46);
        java.lang.Object obj49 = numberFormat46.parseObject("1 / 1");
        java.text.NumberFormat numberFormat50 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator57 = properFractionFormat53.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj58 = properFractionFormat53.clone();
        java.lang.Object obj59 = properFractionFormat53.clone();
        java.text.NumberFormat numberFormat60 = properFractionFormat53.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat50, numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat67 = properFractionFormat64.getWholeFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat64.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat64.getWholeFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat64.getWholeFormat();
        java.lang.Object obj72 = numberFormat70.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat74 = fractionFormat73.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str77 = properFractionFormat75.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat78 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat75.getNumeratorFormat();
        java.text.NumberFormat numberFormat80 = properFractionFormat75.getWholeFormat();
        java.text.NumberFormat numberFormat81 = properFractionFormat75.getWholeFormat();
        java.lang.Object obj83 = numberFormat81.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60, numberFormat70, numberFormat81);
        properFractionFormat21.setNumeratorFormat(numberFormat70);
        properFractionFormat16.setDenominatorFormat(numberFormat70);
        java.lang.Class<?> wildcardClass87 = numberFormat70.getClass();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 0 / 1" + "'", str45, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + 1L + "'", obj49, 1L);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + (-1L) + "'", obj72, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 0 / 1" + "'", str77, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + (-1L) + "'", obj83, (-1L));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.String str16 = properFractionFormat14.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat17 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat18 = properFractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat20 = fractionFormat19.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.lang.String str23 = properFractionFormat21.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator25 = properFractionFormat21.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat26 = properFractionFormat21.getDenominatorFormat();
        properFractionFormat14.setNumeratorFormat(numberFormat26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.Object obj35 = numberFormat30.parseObject("1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat26, numberFormat30);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        java.lang.Object obj41 = numberFormat39.parseObject("10");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat42.parse("-1 0 / 1");
        java.text.AttributedCharacterIterator attributedCharacterIterator46 = properFractionFormat36.formatToCharacterIterator((java.lang.Object) fraction45);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 0 / 1" + "'", str16, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1 0 / 1" + "'", str23, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 1L + "'", obj35, 1L);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 10L + "'", obj41, 10L);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(attributedCharacterIterator46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 / 1" + "'", str47, "-1 / 1");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.String str11 = properFractionFormat9.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat12 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat9.getDenominatorFormat();
        fractionFormat6.setDenominatorFormat(numberFormat13);
        java.text.NumberFormat numberFormat15 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        fractionFormat16.setDenominatorFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str25 = properFractionFormat23.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        fractionFormat16.setDenominatorFormat(numberFormat26);
        java.text.NumberFormat numberFormat28 = fractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction30 = fractionFormat16.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat31 = fractionFormat16.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat34 = fractionFormat33.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getNumeratorFormat();
        properFractionFormat32.setDenominatorFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = properFractionFormat32.getDenominatorFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat32.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        fractionFormat42.setDenominatorFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.String str51 = properFractionFormat49.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        fractionFormat42.setDenominatorFormat(numberFormat52);
        java.text.NumberFormat numberFormat54 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction56 = fractionFormat42.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat57 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.lang.String str63 = properFractionFormat61.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat64 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat61.getNumeratorFormat();
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat61.getWholeFormat();
        properFractionFormat58.setDenominatorFormat(numberFormat67);
        java.text.NumberFormat numberFormat69 = properFractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat41, numberFormat69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        properFractionFormat75.setWholeFormat(numberFormat77);
        fractionFormat71.setNumeratorFormat(numberFormat77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat82 = fractionFormat81.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.text.NumberFormat numberFormat84 = properFractionFormat83.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat86 = fractionFormat85.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat88 = fractionFormat87.getDenominatorFormat();
        java.lang.Object obj89 = numberFormat88.clone();
        fractionFormat85.setDenominatorFormat(numberFormat88);
        properFractionFormat83.setWholeFormat(numberFormat88);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat77, numberFormat88);
        java.lang.StringBuffer stringBuffer93 = null;
        java.text.FieldPosition fieldPosition94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer95 = properFractionFormat5.format((java.lang.Object) numberFormat88, stringBuffer93, fieldPosition94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-1 0 / 1" + "'", str11, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 0 / 1" + "'", str25, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1 0 / 1" + "'", str51, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1 0 / 1" + "'", str63, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        java.text.ParsePosition parsePosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction7 = properFractionFormat3.parse("-1", parsePosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.lang.Object obj13 = numberFormat10.parseObject("1 / 1");
        java.text.NumberFormat numberFormat14 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.String str19 = properFractionFormat17.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj22 = properFractionFormat17.clone();
        java.lang.Object obj23 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat24 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat31 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj36 = numberFormat34.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat49.parse("10");
        java.text.NumberFormat numberFormat52 = properFractionFormat49.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        fractionFormat53.setDenominatorFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str62 = properFractionFormat60.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat63 = properFractionFormat60.getWholeFormat();
        fractionFormat53.setDenominatorFormat(numberFormat63);
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat53.parse("1");
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction66);
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.FieldPosition fieldPosition69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer70 = properFractionFormat49.format(fraction66, stringBuffer68, fieldPosition69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 1L + "'", obj13, 1L);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1 0 / 1" + "'", str19, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1L) + "'", obj36, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1 0 / 1" + "'", str62, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1 / 1" + "'", str67, "1 / 1");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        fractionFormat0.setDenominatorFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        fractionFormat0.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat0.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat15 = fractionFormat0.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        fractionFormat17.setDenominatorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.String str26 = properFractionFormat24.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat27 = properFractionFormat24.getWholeFormat();
        fractionFormat17.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction31 = fractionFormat17.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat32 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat35 = fractionFormat34.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        properFractionFormat33.setDenominatorFormat(numberFormat39);
        java.text.NumberFormat numberFormat41 = properFractionFormat33.getDenominatorFormat();
        properFractionFormat16.setNumeratorFormat(numberFormat41);
        java.text.NumberFormat numberFormat43 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat45 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat43, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        fractionFormat47.setDenominatorFormat(numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        java.lang.String str56 = properFractionFormat54.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat57 = properFractionFormat54.getWholeFormat();
        fractionFormat47.setDenominatorFormat(numberFormat57);
        java.lang.Object obj60 = numberFormat57.parseObject("1 / 1");
        java.text.NumberFormat numberFormat61 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str66 = properFractionFormat64.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat64.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj69 = properFractionFormat64.clone();
        java.lang.Object obj70 = properFractionFormat64.clone();
        java.text.NumberFormat numberFormat71 = properFractionFormat64.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat61, numberFormat71);
        properFractionFormat46.setWholeFormat(numberFormat57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat46.parse("1");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 0 / 1" + "'", str26, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 0 / 1" + "'", str56, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + 1L + "'", obj60, 1L);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 0 / 1" + "'", str66, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(numberFormat71);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str5 = properFractionFormat3.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat6 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat3.getDenominatorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        properFractionFormat9.setNumeratorFormat(numberFormat11);
        java.text.NumberFormat numberFormat15 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = properFractionFormat18.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.text.NumberFormat numberFormat23 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat18.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.String str29 = properFractionFormat27.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat30 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat27.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = properFractionFormat27.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat27.getWholeFormat();
        properFractionFormat18.setNumeratorFormat(numberFormat33);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator35 = numberFormat15.formatToCharacterIterator((java.lang.Object) numberFormat33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1 0 / 1" + "'", str5, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 0 / 1" + "'", str29, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat11.parse("1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator20 = properFractionFormat16.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj21 = properFractionFormat16.clone();
        java.lang.Object obj22 = properFractionFormat16.clone();
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat16.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat25 = properFractionFormat16.getDenominatorFormat();
        properFractionFormat11.setNumeratorFormat(numberFormat25);
        properFractionFormat2.setNumeratorFormat(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.String str9 = properFractionFormat7.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        properFractionFormat7.setWholeFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        properFractionFormat20.setWholeFormat(numberFormat22);
        properFractionFormat7.setWholeFormat(numberFormat22);
        java.lang.Object obj26 = properFractionFormat7.parseObject("10");
        java.lang.String str27 = numberFormat4.format(obj26);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 0 / 1" + "'", str9, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.String str8 = properFractionFormat6.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat9 = properFractionFormat6.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat6.getDenominatorFormat();
        java.text.NumberFormat numberFormat11 = properFractionFormat6.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat6.getWholeFormat();
        java.lang.Object obj13 = properFractionFormat6.clone();
        org.apache.commons.math.fraction.Fraction fraction15 = properFractionFormat6.parse("10");
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.FieldPosition fieldPosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = properFractionFormat3.format((java.lang.Object) properFractionFormat6, stringBuffer16, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 0 / 1" + "'", str8, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(fraction15);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        fractionFormat9.setDenominatorFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str18 = properFractionFormat16.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat19 = properFractionFormat16.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((java.lang.Object) (byte) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str28 = properFractionFormat26.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat29 = properFractionFormat26.getWholeFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat26.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        properFractionFormat26.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        properFractionFormat39.setWholeFormat(numberFormat41);
        properFractionFormat26.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        fractionFormat44.setDenominatorFormat(numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.lang.String str53 = properFractionFormat51.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat54 = properFractionFormat51.getWholeFormat();
        fractionFormat44.setDenominatorFormat(numberFormat54);
        java.text.NumberFormat numberFormat56 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat44.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat59 = fractionFormat44.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.lang.String str65 = properFractionFormat63.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat66 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getWholeFormat();
        properFractionFormat60.setDenominatorFormat(numberFormat69);
        properFractionFormat26.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = properFractionFormat73.parseObject("1", parsePosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1 0 / 1" + "'", str18, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 0 / 1" + "'", str28, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 0 / 1" + "'", str53, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1 0 / 1" + "'", str65, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.lang.Object obj4 = numberFormat3.clone();
        fractionFormat0.setDenominatorFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.String str10 = properFractionFormat8.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat11 = properFractionFormat8.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        java.lang.Object obj14 = numberFormat13.clone();
        java.text.NumberFormat numberFormat15 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat13, numberFormat15);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        fractionFormat0.setDenominatorFormat(numberFormat17);
        java.lang.Object obj19 = numberFormat17.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.String str24 = properFractionFormat22.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat25 = properFractionFormat22.getWholeFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat22.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.lang.String str31 = properFractionFormat29.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = properFractionFormat29.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj34 = properFractionFormat29.clone();
        java.lang.Object obj35 = properFractionFormat29.clone();
        java.text.NumberFormat numberFormat36 = properFractionFormat29.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.String str42 = properFractionFormat40.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getWholeFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getDenominatorFormat();
        fractionFormat37.setDenominatorFormat(numberFormat44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        fractionFormat46.setDenominatorFormat(numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat52 = fractionFormat51.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.lang.String str55 = properFractionFormat53.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        fractionFormat46.setDenominatorFormat(numberFormat56);
        java.lang.Object obj59 = numberFormat56.parseObject("1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        fractionFormat60.setDenominatorFormat(numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat66 = fractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.lang.String str69 = properFractionFormat67.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat70 = properFractionFormat67.getWholeFormat();
        fractionFormat60.setDenominatorFormat(numberFormat70);
        java.text.NumberFormat numberFormat72 = fractionFormat60.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44, numberFormat56, numberFormat72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        fractionFormat74.setDenominatorFormat(numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.lang.String str83 = properFractionFormat81.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat84 = properFractionFormat81.getWholeFormat();
        fractionFormat74.setDenominatorFormat(numberFormat84);
        java.text.NumberFormat numberFormat86 = fractionFormat74.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction88 = fractionFormat74.parse("-1 0 / 1");
        java.text.NumberFormat numberFormat89 = fractionFormat74.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat89);
        java.text.NumberFormat numberFormat91 = properFractionFormat90.getWholeFormat();
        java.text.NumberFormat numberFormat92 = properFractionFormat90.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat56, numberFormat92);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat26, numberFormat56);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1 0 / 1" + "'", str10, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1 0 / 1" + "'", str24, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 0 / 1" + "'", str31, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1 0 / 1" + "'", str42, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1 0 / 1" + "'", str55, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 1L + "'", obj59, 1L);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1 0 / 1" + "'", str69, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-1 0 / 1" + "'", str83, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertNotNull(numberFormat92);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str4 = properFractionFormat2.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getNumeratorFormat();
        java.lang.Object obj8 = numberFormat6.parseObject("1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        fractionFormat11.setDenominatorFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.lang.String str20 = properFractionFormat18.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat21 = properFractionFormat18.getWholeFormat();
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.lang.Object obj24 = numberFormat21.parseObject("1 / 1");
        java.text.NumberFormat numberFormat25 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str30 = properFractionFormat28.format((java.lang.Object) (-1));
        java.text.AttributedCharacterIterator attributedCharacterIterator32 = properFractionFormat28.formatToCharacterIterator((java.lang.Object) 1.0d);
        java.lang.Object obj33 = properFractionFormat28.clone();
        java.lang.Object obj34 = properFractionFormat28.clone();
        java.text.NumberFormat numberFormat35 = properFractionFormat28.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat25, numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str41 = properFractionFormat39.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat42 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat39.getWholeFormat();
        java.lang.Object obj47 = numberFormat45.parseObject("-1 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance();
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.lang.String str52 = properFractionFormat50.format((java.lang.Object) (-1));
        java.text.NumberFormat numberFormat53 = properFractionFormat50.getWholeFormat();
        java.text.NumberFormat numberFormat54 = properFractionFormat50.getNumeratorFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat50.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat50.getWholeFormat();
        java.lang.Object obj58 = numberFormat56.parseObject("-1 / 1");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat45, numberFormat56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        properFractionFormat9.setWholeFormat(numberFormat45);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 0 / 1" + "'", str4, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1L + "'", obj8, 1L);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 0 / 1" + "'", str20, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + 1L + "'", obj24, 1L);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 0 / 1" + "'", str30, "-1 0 / 1");
        org.junit.Assert.assertNotNull(attributedCharacterIterator32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 0 / 1" + "'", str41, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + (-1L) + "'", obj47, (-1L));
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1 0 / 1" + "'", str52, "-1 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + (-1L) + "'", obj58, (-1L));
    }
}

